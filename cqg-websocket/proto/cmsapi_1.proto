// CQG Customer Management System API Protocol.
//
// Protocol time attributes are 64-bit signed integers that contain offset in milliseconds from 01.01.1970 (unix timestamp).
//
// The following attributes are used in comments to describe fields specifics:
// 1. [immutable] - field is ignored via any operation message.
// 2. [obsolete] - field is obsolete and candidate for remove in some next protocol version.
// 3. [required] - field is required for any operation message, even if it is marked as optional.
// Attribute can be additionally amended with operation name it is applied for. For example:
// [required-create] - field is required for create message only.
//
// Last changes were made on 18 Jun 2019
// Version 1.24
syntax = "proto2";

option go_package = "proto;common_1";

import "common_1.proto";
import "traderouting_1.proto";

package cmsapi_1;

enum ProtocolVersion
{
    // Major number change is required for backward incompatible protocol versions (new 'proto' file is necessary)
    PROTOCOL_VERSION_MAJOR = 1;
    // Minor number is increased for backward compatible protocol versions when new messages and/ or fields are
    // added without removing/ changing any existing messages and fields (new 'proto' file is not created)
    PROTOCOL_VERSION_MINOR = 24;
}

////------------------------------------------
//// Client Messages

// Client to Server message, must include at least one field.
// Logon is required to be the first message after connection.
// Rate of incoming requests (sum of different requests within messages) is limited,
// maximum 1000 requests for 20 seconds period is allowed by default.
// NOTE: This and other limits mentioned in this protocol are not guaranteed; they are given for reference only
// and are subject to change without prior notice.
message ClientMessage
{
    // Session related messages.
    // Only one session related message is expected in ClientMessage (it should not be combined with other messages).
    optional common_1.Logon logon = 1;
    optional common_1.Logoff logoff = 2;
    optional common_1.RestoreOrJoinSession restore_or_join_session = 7;
    optional common_1.ObtainDemoAccess obtain_demo_access = 8;

    // Information request.
    repeated InformationRequest information_request = 3;

    // Search request.
    repeated SearchRequest search_request = 4;

    // Operation request.
    repeated OperationRequest operation_request = 5;

    // Trade routing related operations.
    repeated traderouting_1.TradeRoutingRequest trade_routing_request = 6;

    // Ping request initiated by client.
    optional Ping ping = 9;

    // Pong message in response to server Ping.
    optional Pong pong = 10;

    // Reserved for internal use.
    extensions 100 to 199;
}

// Information request message.
// One of the operational request fields is expected.
message InformationRequest
{
    // Request identifier.
    // It should be unique to match with operation result.
    required uint32 id = 1;

    // Request of user information.
    optional common_1.UserInfoRequest user_info_request = 2;

    // Request of user's entitlements.
    optional common_1.UserEntitlementServiceRequest user_entitlement_service_request = 3;

    // Request of entitlement categories.
    optional common_1.EntitlementCategoryListRequest entitlement_category_list_request = 4;

    // Request of entitlement service information.
    optional common_1.EntitlementServiceRequest entitlement_service_request = 5;

    // Request of customer information.
    optional common_1.CustomerRequest customer_request = 6;

    // Request for all services list.
    optional common_1.EntitlementServiceListRequest entitlement_service_list_request = 7;

    // Request of unique username
    optional common_1.GetUniqueUsernameRequest get_unique_username_request = 8;

    // Customer to sales series links request.
    optional common_1.CustomerSalesSeriesAuthorizationListRequest customer_sales_series_authorization_list_request = 9;

    // Login additional settings request.
    optional common_1.LoginSettingsRequest login_settings_request = 10;

    // Requests login's member ids.
    // Supported login domains: trade-routing.
    optional common_1.LoginExchangeMemberIdListRequest login_exchange_member_id_list_request = 11;

    // Get a list of lookup properties.
    // Lookup Property types are defined by CommonLookupPropertyType enum.
    optional common_1.LookupPropertyListRequest lookup_property_list_request = 12;

    // Get list of authentication partners.
    optional AuthPartnerListRequest auth_partner_list_request = 13;

    // Request of login billing custom data.
    optional common_1.LoginBillingCustomDataRequest login_billing_custom_data_request = 14;
}

// Request message to search for information.
// One optional field is expected.
message SearchRequest
{
    // Request identifier.
    // It should be unique to match with operation result.
    required uint32 id = 1;

    // Optionally restrict matched results by returning the first 'top' records.
    optional uint32 top = 2;

    // Search for users.
    optional common_1.UserSearchRequest user_search_request = 3;

    // Search for customers.
    optional common_1.CustomerSearchRequest customer_search_request = 4;

    // Search for sales series.
    optional common_1.SalesSeriesSearchRequest sales_series_search_request = 5;

    // Determines whether removed entities are included in search result.
    optional bool include_removed = 6 [default = false];
}

// Operation request message.
// One of the request fields is expected.
// Create operations ignore entity id fields (set it to an empty string).
// Update operations use entity id fields as a key to update corresponding entities.
// Also update operations have optional original entity fields (last know information before changes).
// If the original entity is specified then it is used to identify which fields are updated and
// which stay untouched so to update only fields that are different from the provided original.
// Update operation does not fail if some of the updated fields have been changed already.
// This means that if two clients change the same entity field at the same time then the last one is set
// but if two clients change different fields of this entity at the same time then both changes are applied.
message OperationRequest
{
    // Request identifier.
    // It should be unique to match with operation result.
    required uint32 id = 1;

    // Clone template or regular user.
    // Supported login domains: trade-routing.
    optional common_1.CloneUser clone_user = 2;

    // Create customer.
    optional common_1.CreateCustomer create_customer = 3;

    // Update customer.
    optional common_1.UpdateCustomer update_customer = 4;

    // Remove customer.
    optional common_1.RemoveCustomer remove_customer = 5;

    // Create user.
    optional common_1.CreateUser create_user = 6;

    // Update user.
    optional common_1.UpdateUser update_user = 7;

    // Remove user.
    optional common_1.RemoveUser remove_user = 8;

    // [re-]link user  to a customer.
    optional common_1.LinkUserToCustomer link_user_to_customer = 9;

    // Modify the list of user entitlement services.
    optional common_1.ModifyUserEntitlementService modify_user_entitlement_service = 10;

    // Send welcome e-mail to customer.
    optional SendWelcomeEmail send_welcome_email = 11;

    // Restore user.
    optional common_1.RestoreUser restore_user = 12;

    // Restore customer.
    optional common_1.RestoreCustomer restore_customer = 13;

    // Update customer to sales series authorization list operation.
    optional common_1.UpdateCustomerSalesSeriesAuthorizationList update_customer_sales_series_authorization_list = 14;

    // Update login exchange member id list.
    // Supported login domains: trade-routing.
    optional common_1.UpdateLoginExchangeMemberIdList update_login_exchange_member_id_list = 15;

    // Update Login settings.
    optional common_1.UpdateLoginSettings update_login_settings = 16;

    // Activate login operation.
    // Supported login domains: trade-routing.
    optional common_1.ActivateLogin activate_login = 17;

    // Deactivate login operation.
    // Supported login domains: trade-routing.
    optional common_1.DeactivateLogin deactivate_login = 18;

    // Send credential reset email.
    // Supported login domains: trade-routing, admin.
    optional SendCredentialResetEmail send_credential_reset_email = 19;

    // Generate a service security token for a special AuthServer operation.
    // Supported login domains: trade-routing, admin.
    optional GenerateServiceSecurityToken generate_service_security_token = 20;

    // Erases current credentials of specified types.
    // Supported login domains: trade-routing, admin.
    optional common_1.EraseCurrentCredentials erase_current_credentials = 21;

    // Supported login domains: trade-routing.
    optional common_1.TerminateLoginSession terminate_login_session = 22;

    // Update login billing custom data.
    // Supported login domains: trade-routing.
    optional common_1.UpdateLoginBillingCustomData update_login_billing_custom_data = 23;
}

////------------------------------------------
//// Server Messages.

// Server to Client message.
message ServerMessage
{
    // Session level messages results.
    optional common_1.LogonResult logon_result = 1;
    optional common_1.LoggedOff logged_off = 2;
    optional common_1.RestoreOrJoinSessionResult restore_or_join_session_result = 8;
    optional common_1.ObtainDemoAccessResult obtain_demo_access_result = 9;

    // Result of information request.
    repeated InformationResult information_result = 3;

    // Result of search request.
    repeated SearchResult search_result = 4;

    // Result of operation request.
    repeated OperationResult operation_result = 5;

    // Trade routing operation results.
    repeated traderouting_1.TradeRoutingResult trade_routing_result = 6;

    // Message from server.
    repeated common_1.UserMessage user_message = 7;

    // Ping request.
    optional Ping ping = 10;

    // Pong message in response to client Ping request.
    optional Pong pong = 11;

    // Reserved for internal use.
    extensions 100 to 199;
}

// Result of information request.
// Information is filtered according to permissions of logged-in user (or 'on-behalf-of' user).
message InformationResult
{
    // ID of a corresponding request.
    required uint32 request_id = 1;

    // Operation status.
    // This field is associated with common_1.OperationStatus enum.
    required uint32 operation_status = 2;

    // Failure details.
    optional common_1.Text error_message = 3;

    // User information.
    optional common_1.User user = 4;

    // List of user entitlement services.
    repeated common_1.UserEntitlementService user_entitlement_service = 5;

    // Entitlement categories list.
    repeated common_1.EntitlementCategory entitlement_category = 6;

    // Entitlement service list.
    repeated common_1.EntitlementService entitlement_service = 7;

    // Customer.
    optional common_1.Customer customer = 8;

    // Get unique username result
    optional common_1.UniqueUsernameResult unique_username_result = 9;

    // Customer to sales series authorization list result message.
    optional common_1.CustomerSalesSeriesAuthorizationListResult customer_sales_series_authorization_list_result = 10;

    // Result of LoginSettingsRequest.
    optional common_1.LoginSettingsResult login_settings_result = 11;

    // Result of LoginExchangeMemberIdListRequest
    optional common_1.LoginExchangeMemberIdListResult login_exchange_member_id_list_result = 12;

    // Result of lookup_property_list_request.
    optional common_1.LookupPropertyListResult lookup_property_list_result = 13;

    // Result of AuthPartnerListRequest.
    optional AuthPartnerListResult auth_partner_list_result = 14;

    // Result of LoginBillingCustomDataRequest.
    optional common_1.LoginBillingCustomDataResult login_billing_custom_data_result = 15;
}

// Search operation result.
message SearchResult
{
    // ID of a corresponding request.
    required uint32 request_id = 1;

    // Operation status.
    // This field is associated with common_1.OperationStatus enum.
    required uint32 operation_status = 2;

    // This flag is set to True if all search results are sent
    // and nothing was filtered out by 'top' parameter.
    optional bool is_complete = 3 [default = true];

    // Failure details.
    optional common_1.Text error_message = 4;

    // User search result records.
    repeated common_1.UserSearchResultRecord user_record = 5;

    // Customer search result records.
    repeated common_1.CustomerSearchResultRecord customer_record = 6;

    // List of found sales series.
    repeated common_1.SalesSeriesSearchResultRecord sales_series_record = 7;
}

// Result of operation request.
message OperationResult
{
    // ID of a corresponding request.
    required uint32 request_id = 1;

    // Operation status.
    // This field is associated with common_1.OperationStatus enum.
    required uint32 operation_status = 2;

    // Failure details.
    optional common_1.Text error_message = 3;

    // Clone user result.
    optional common_1.CloneUserResult clone_user_result = 4;

    // Create customer result.
    optional common_1.CreateCustomerResult create_customer_result = 5;

    // Update customer result.
    optional common_1.UpdateCustomerResult update_customer_result = 6;

    // Remove customer result.
    optional common_1.RemoveCustomerResult remove_customer_result = 7;

    // Create user result.
    optional common_1.CreateUserResult create_user_result = 8;

    // Update user result.
    optional common_1.UpdateUserResult update_user_result = 9;

    // Remove user result.
    optional common_1.RemoveUserResult remove_user_result = 10;

    // [re-]link user to customer result.
    optional common_1.LinkUserToCustomerResult link_user_to_customer_result = 11;

    // Modify user entitlement service result.
    optional common_1.ModifyUserEntitlementServiceResult modify_user_entitlement_service_result = 12;

    // Send welcome e-mail result.
    optional SendWelcomeEmailResult send_welcome_email_result = 13;

    // Restore user result.
    optional common_1.RestoreUserResult restore_user_result = 14;

    // Restore customer result.
    optional common_1.RestoreCustomerResult restore_customer_result = 15;

    // Result of customer to sales series authorization list update.
    optional common_1.UpdateCustomerSalesSeriesAuthorizationListResult update_customer_sales_series_authorization_list_result = 16;

    // Result of UpdateLoginExchangeMemberIdList.
    optional common_1.UpdateLoginExchangeMemberIdListResult update_login_exchange_member_id_list_result = 17;

    // Result of UpdateLoginSettings.
    optional common_1.UpdateLoginSettingsResult update_login_settings_result = 18;

    // Result of ActivateLogin
    optional common_1.ActivateLoginResult activate_login_result = 19;

    // Result of DeactivateLogin
    optional common_1.DeactivateLoginResult deactivate_login_result = 20;

    // Result of send credential reset email.
    optional SendCredentialResetEmailResult send_credential_reset_email_result = 21;

    // Result of generate a service security token for a special AuthServer operation.
    optional GenerateServiceSecurityTokenResult generate_service_security_token_result = 22;

    // Result of EraseCurrentCredentials.
    optional common_1.EraseCurrentCredentialsResult erase_current_credentials_result = 23;

    optional common_1.TerminateLoginSessionResult terminate_login_session_result = 24;

    // Result of UpdateLoginBillingCustomData.
    optional common_1.UpdateLoginBillingCustomDataResult update_login_billing_custom_data_result = 25;
}

// Send welcome e-mail operation.
message SendWelcomeEmail
{
    // [required] Customer id of a recipient.
    optional string customer_id = 1;

    // Optional list of logins to be included into this e-mail.
    // All customer's system logins are included if omitted.
    repeated string login_id = 2;
}

// Result of send welcome e-mail operation.
message SendWelcomeEmailResult
{
}

// Send credential reset e-mail to a customer.
message SendCredentialResetEmail
{
    // [required] customer id of a recipient.
    optional string customer_id = 1;

    // [required] A login linked to a customer for which the reset is requested.
    // Only trade-routing logins are supported now.
    optional string login_id = 2;

    // List of special operations that are requested for this login.
    // This filed is associated with common_1.AuthServerSpecialOperation enum.
    repeated uint32 operation = 3;
}

// Result of send e-mail operation.
message SendCredentialResetEmailResult
{
}

message GenerateServiceSecurityToken
{
    // [required] Generate SST for this login.
    // Only trade-routing logins are supported now.
    optional string login_id = 1;

    // List of special operations that are requested for this login.
    // This filed is associated with common_1.AuthServerSpecialOperation enum.
    repeated uint32 operation = 2;
}

message GenerateServiceSecurityTokenResult
{
    // Generated token.
    optional string security_token = 1;

    // URL that can be visited by a client to execute special operations using
    // generated token.
    optional string url = 2;
}

// Ping request which can be initiated by any side to ensure connection is alive.
// Both client and server sides must respond such request with Pong.
message Ping
{
   // Token routed back in Pong response.
   optional string token = 1;

   // UTC time when this request was composed. Used for network latency diagnostics.
   required sint64 ping_utc_time = 2;
}

// Pong response which must be sent in response on Ping request.
message Pong
{
   // Token passed in Ping request.
   optional string token = 1;

   // Corresponding value from Ping request.
   required sint64 ping_utc_time = 2;

   // UTC time when this response was composed.
   required sint64 pong_utc_time = 3;
}

// Request for list of authentication partners.
message AuthPartnerListRequest
{
}

// Reply to AuthPartnerListRequest.
message AuthPartnerListResult
{
    repeated AuthPartner auth_partner = 1;
}

// Information about authentication partner.
message AuthPartner
{
    // [required] Partner's ID.
    optional string id = 1; 

    // Partner's display name.
    optional string display_name = 2;

    // List of brokerage (FCM) IDs the partner enabled for.
    repeated string brokerage_id = 3;
}
