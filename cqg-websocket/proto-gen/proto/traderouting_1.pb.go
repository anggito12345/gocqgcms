// CQG Messages that are related to CQG trade routing system (CQG Gateway)
//
// Protocol time attributes are 64-bit signed integers (sint64) that contain offset in milliseconds from 01.01.1970 (i.e. unix timestamp).
//
// Last changes were made on 06 Aug 2019
// Version 1.39

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.6.1
// source: proto/traderouting_1.proto

package protogen

import (
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Types of trade routing related lookup properties.
type TradeRoutingLookupPropertyType int32

const (
	// Type of the account (e.g. 'Customer Account', 'House Account', etc.)
	TradeRoutingLookupPropertyType_ACCOUNT_TYPE TradeRoutingLookupPropertyType = 101
	// MODES Account groups type.
	TradeRoutingLookupPropertyType_MODES_ACCOUNT_GROUP TradeRoutingLookupPropertyType = 102
	// Time zones.
	TradeRoutingLookupPropertyType_TIME_ZONE TradeRoutingLookupPropertyType = 103
	// Risk server instances.
	TradeRoutingLookupPropertyType_RISK_SERVER_INSTANCE TradeRoutingLookupPropertyType = 104
	// Trade locations.
	TradeRoutingLookupPropertyType_TRADE_LOCATION TradeRoutingLookupPropertyType = 105
	// Order classes.
	TradeRoutingLookupPropertyType_ORDER_CLASS TradeRoutingLookupPropertyType = 106
	// Account origin ('Customer', 'firm', etc. )
	TradeRoutingLookupPropertyType_ACCOUNT_ORIGIN TradeRoutingLookupPropertyType = 107
)

// Enum value maps for TradeRoutingLookupPropertyType.
var (
	TradeRoutingLookupPropertyType_name = map[int32]string{
		101: "ACCOUNT_TYPE",
		102: "MODES_ACCOUNT_GROUP",
		103: "TIME_ZONE",
		104: "RISK_SERVER_INSTANCE",
		105: "TRADE_LOCATION",
		106: "ORDER_CLASS",
		107: "ACCOUNT_ORIGIN",
	}
	TradeRoutingLookupPropertyType_value = map[string]int32{
		"ACCOUNT_TYPE":         101,
		"MODES_ACCOUNT_GROUP":  102,
		"TIME_ZONE":            103,
		"RISK_SERVER_INSTANCE": 104,
		"TRADE_LOCATION":       105,
		"ORDER_CLASS":          106,
		"ACCOUNT_ORIGIN":       107,
	}
)

func (x TradeRoutingLookupPropertyType) Enum() *TradeRoutingLookupPropertyType {
	p := new(TradeRoutingLookupPropertyType)
	*p = x
	return p
}

func (x TradeRoutingLookupPropertyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeRoutingLookupPropertyType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_traderouting_1_proto_enumTypes[0].Descriptor()
}

func (TradeRoutingLookupPropertyType) Type() protoreflect.EnumType {
	return &file_proto_traderouting_1_proto_enumTypes[0]
}

func (x TradeRoutingLookupPropertyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TradeRoutingLookupPropertyType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TradeRoutingLookupPropertyType(num)
	return nil
}

// Deprecated: Use TradeRoutingLookupPropertyType.Descriptor instead.
func (TradeRoutingLookupPropertyType) EnumDescriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{0}
}

// Price limit mode enumeration.
type PriceLimitMode int32

const (
	// Trade price limit check is enforced only for orders subject to immediate execution. Check LMT only.
	PriceLimitMode_AGGRESSIVE_LMT PriceLimitMode = 1
	// Trade price limit check is enforced only for orders subject to immediate execution. Check LMT and STP.
	PriceLimitMode_AGGRESSIVE_LMT_STP PriceLimitMode = 2
	// Trade price limit check is enforced for all orders. Check LMT only.
	PriceLimitMode_ALL_LMT PriceLimitMode = 3
	// Trade price limit check is enforced for all orders. Check LMT and STP.
	PriceLimitMode_ALL_LMT_STP PriceLimitMode = 4
)

// Enum value maps for PriceLimitMode.
var (
	PriceLimitMode_name = map[int32]string{
		1: "AGGRESSIVE_LMT",
		2: "AGGRESSIVE_LMT_STP",
		3: "ALL_LMT",
		4: "ALL_LMT_STP",
	}
	PriceLimitMode_value = map[string]int32{
		"AGGRESSIVE_LMT":     1,
		"AGGRESSIVE_LMT_STP": 2,
		"ALL_LMT":            3,
		"ALL_LMT_STP":        4,
	}
)

func (x PriceLimitMode) Enum() *PriceLimitMode {
	p := new(PriceLimitMode)
	*p = x
	return p
}

func (x PriceLimitMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PriceLimitMode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_traderouting_1_proto_enumTypes[1].Descriptor()
}

func (PriceLimitMode) Type() protoreflect.EnumType {
	return &file_proto_traderouting_1_proto_enumTypes[1]
}

func (x PriceLimitMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PriceLimitMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PriceLimitMode(num)
	return nil
}

// Deprecated: Use PriceLimitMode.Descriptor instead.
func (PriceLimitMode) EnumDescriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{1}
}

// Limit mode.
type LimitMode int32

const (
	// Limit is inherited from a parent entity.
	LimitMode_DEFAULT LimitMode = 1
	// Limit is not enforced.
	LimitMode_UNLIMITED LimitMode = 2
	// Limit is enforced.
	LimitMode_LIMITED LimitMode = 3
)

// Enum value maps for LimitMode.
var (
	LimitMode_name = map[int32]string{
		1: "DEFAULT",
		2: "UNLIMITED",
		3: "LIMITED",
	}
	LimitMode_value = map[string]int32{
		"DEFAULT":   1,
		"UNLIMITED": 2,
		"LIMITED":   3,
	}
)

func (x LimitMode) Enum() *LimitMode {
	p := new(LimitMode)
	*p = x
	return p
}

func (x LimitMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LimitMode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_traderouting_1_proto_enumTypes[2].Descriptor()
}

func (LimitMode) Type() protoreflect.EnumType {
	return &file_proto_traderouting_1_proto_enumTypes[2]
}

func (x LimitMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LimitMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LimitMode(num)
	return nil
}

// Deprecated: Use LimitMode.Descriptor instead.
func (LimitMode) EnumDescriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{2}
}

type ServiceGroupAuthorizationLevel int32

const (
	// No additional authorization is required. Product enablement enables linked Service Groups.
	ServiceGroupAuthorizationLevel_NONE ServiceGroupAuthorizationLevel = 0
	// Only one Service Group for the exchange is possible to enable at the same time.
	// If nothing is enabled then there is no authorization to see/trade linked products.
	ServiceGroupAuthorizationLevel_ONE_REQUIRED ServiceGroupAuthorizationLevel = 1
	// One or more Service Group can be enabled at the same time.
	// If nothing is enabled then there is no authorization to see/trade linked products.
	ServiceGroupAuthorizationLevel_ANY_REQUIRED ServiceGroupAuthorizationLevel = 2
)

// Enum value maps for ServiceGroupAuthorizationLevel.
var (
	ServiceGroupAuthorizationLevel_name = map[int32]string{
		0: "NONE",
		1: "ONE_REQUIRED",
		2: "ANY_REQUIRED",
	}
	ServiceGroupAuthorizationLevel_value = map[string]int32{
		"NONE":         0,
		"ONE_REQUIRED": 1,
		"ANY_REQUIRED": 2,
	}
)

func (x ServiceGroupAuthorizationLevel) Enum() *ServiceGroupAuthorizationLevel {
	p := new(ServiceGroupAuthorizationLevel)
	*p = x
	return p
}

func (x ServiceGroupAuthorizationLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceGroupAuthorizationLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_traderouting_1_proto_enumTypes[3].Descriptor()
}

func (ServiceGroupAuthorizationLevel) Type() protoreflect.EnumType {
	return &file_proto_traderouting_1_proto_enumTypes[3]
}

func (x ServiceGroupAuthorizationLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ServiceGroupAuthorizationLevel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ServiceGroupAuthorizationLevel(num)
	return nil
}

// Deprecated: Use ServiceGroupAuthorizationLevel.Descriptor instead.
func (ServiceGroupAuthorizationLevel) EnumDescriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{3}
}

// List of possible search refine criteria.
type OrderSearchRequest_SearchCriteria int32

const (
	// Search by order id.
	OrderSearchRequest_ORDER_ID OrderSearchRequest_SearchCriteria = 1
	// Search by client order ID.
	OrderSearchRequest_CLIENT_ORDER_ID OrderSearchRequest_SearchCriteria = 2
	// Search by order ticket number
	// (order identifier assigned by execution system).
	OrderSearchRequest_TICKET_NUMBER OrderSearchRequest_SearchCriteria = 3
	// Search by order contract.
	OrderSearchRequest_CONTRACT OrderSearchRequest_SearchCriteria = 4
	// Search by account id.
	OrderSearchRequest_ACCOUNT_ID OrderSearchRequest_SearchCriteria = 5
	// Search by account name.
	OrderSearchRequest_ACCOUNT_NAME OrderSearchRequest_SearchCriteria = 6
	// Search by brokerage account number.
	OrderSearchRequest_BROKERAGE_NUMBER OrderSearchRequest_SearchCriteria = 7
	// Search by user name.
	OrderSearchRequest_USER_NAME OrderSearchRequest_SearchCriteria = 8
	// Search by customer last name.
	OrderSearchRequest_CUSTOMER_LAST_NAME OrderSearchRequest_SearchCriteria = 9
	// Search by customer first name.
	OrderSearchRequest_CUSTOMER_FIRST_NAME OrderSearchRequest_SearchCriteria = 10
	// Search by user id.
	OrderSearchRequest_USER_ID OrderSearchRequest_SearchCriteria = 11
	// Search by route order id
	// (numeric id assigned withing order route).
	OrderSearchRequest_ROUTE_ORDER_ID OrderSearchRequest_SearchCriteria = 12
	// Search by route client order id
	// (route order id transformed to meet execution system format rules).
	OrderSearchRequest_ROUTE_CLIENT_ORDER_ID OrderSearchRequest_SearchCriteria = 13
	// Search by order GUID.
	OrderSearchRequest_ORDER_GUID OrderSearchRequest_SearchCriteria = 14
	// Fill care order id.
	OrderSearchRequest_FILL_CARE_ORDER_ID OrderSearchRequest_SearchCriteria = 15
	// Chain order id.
	OrderSearchRequest_CHAIN_ORDER_ID OrderSearchRequest_SearchCriteria = 16
	// Search by sales series number.
	OrderSearchRequest_SALES_SERIES_NUMBER OrderSearchRequest_SearchCriteria = 17
	// Search by sales series name.
	OrderSearchRequest_SALES_SERIES_NAME OrderSearchRequest_SearchCriteria = 18
	// Search by sales series ID.
	OrderSearchRequest_SALES_SERIES_ID OrderSearchRequest_SearchCriteria = 19
	// Search by exchange name.
	OrderSearchRequest_EXCHANGE_NAME OrderSearchRequest_SearchCriteria = 20
	// Search by route code.
	OrderSearchRequest_ROUTE_CODE OrderSearchRequest_SearchCriteria = 21
	// Search by route name.
	OrderSearchRequest_ROUTE_NAME OrderSearchRequest_SearchCriteria = 22
)

// Enum value maps for OrderSearchRequest_SearchCriteria.
var (
	OrderSearchRequest_SearchCriteria_name = map[int32]string{
		1:  "ORDER_ID",
		2:  "CLIENT_ORDER_ID",
		3:  "TICKET_NUMBER",
		4:  "CONTRACT",
		5:  "ACCOUNT_ID",
		6:  "ACCOUNT_NAME",
		7:  "BROKERAGE_NUMBER",
		8:  "USER_NAME",
		9:  "CUSTOMER_LAST_NAME",
		10: "CUSTOMER_FIRST_NAME",
		11: "USER_ID",
		12: "ROUTE_ORDER_ID",
		13: "ROUTE_CLIENT_ORDER_ID",
		14: "ORDER_GUID",
		15: "FILL_CARE_ORDER_ID",
		16: "CHAIN_ORDER_ID",
		17: "SALES_SERIES_NUMBER",
		18: "SALES_SERIES_NAME",
		19: "SALES_SERIES_ID",
		20: "EXCHANGE_NAME",
		21: "ROUTE_CODE",
		22: "ROUTE_NAME",
	}
	OrderSearchRequest_SearchCriteria_value = map[string]int32{
		"ORDER_ID":              1,
		"CLIENT_ORDER_ID":       2,
		"TICKET_NUMBER":         3,
		"CONTRACT":              4,
		"ACCOUNT_ID":            5,
		"ACCOUNT_NAME":          6,
		"BROKERAGE_NUMBER":      7,
		"USER_NAME":             8,
		"CUSTOMER_LAST_NAME":    9,
		"CUSTOMER_FIRST_NAME":   10,
		"USER_ID":               11,
		"ROUTE_ORDER_ID":        12,
		"ROUTE_CLIENT_ORDER_ID": 13,
		"ORDER_GUID":            14,
		"FILL_CARE_ORDER_ID":    15,
		"CHAIN_ORDER_ID":        16,
		"SALES_SERIES_NUMBER":   17,
		"SALES_SERIES_NAME":     18,
		"SALES_SERIES_ID":       19,
		"EXCHANGE_NAME":         20,
		"ROUTE_CODE":            21,
		"ROUTE_NAME":            22,
	}
)

func (x OrderSearchRequest_SearchCriteria) Enum() *OrderSearchRequest_SearchCriteria {
	p := new(OrderSearchRequest_SearchCriteria)
	*p = x
	return p
}

func (x OrderSearchRequest_SearchCriteria) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderSearchRequest_SearchCriteria) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_traderouting_1_proto_enumTypes[4].Descriptor()
}

func (OrderSearchRequest_SearchCriteria) Type() protoreflect.EnumType {
	return &file_proto_traderouting_1_proto_enumTypes[4]
}

func (x OrderSearchRequest_SearchCriteria) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OrderSearchRequest_SearchCriteria) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OrderSearchRequest_SearchCriteria(num)
	return nil
}

// Deprecated: Use OrderSearchRequest_SearchCriteria.Descriptor instead.
func (OrderSearchRequest_SearchCriteria) EnumDescriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{6, 0}
}

type AccountSearchRequest_AccountGroupRole int32

const (
	AccountSearchRequest_MASTER AccountSearchRequest_AccountGroupRole = 2
	AccountSearchRequest_SUB    AccountSearchRequest_AccountGroupRole = 3
)

// Enum value maps for AccountSearchRequest_AccountGroupRole.
var (
	AccountSearchRequest_AccountGroupRole_name = map[int32]string{
		2: "MASTER",
		3: "SUB",
	}
	AccountSearchRequest_AccountGroupRole_value = map[string]int32{
		"MASTER": 2,
		"SUB":    3,
	}
)

func (x AccountSearchRequest_AccountGroupRole) Enum() *AccountSearchRequest_AccountGroupRole {
	p := new(AccountSearchRequest_AccountGroupRole)
	*p = x
	return p
}

func (x AccountSearchRequest_AccountGroupRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountSearchRequest_AccountGroupRole) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_traderouting_1_proto_enumTypes[5].Descriptor()
}

func (AccountSearchRequest_AccountGroupRole) Type() protoreflect.EnumType {
	return &file_proto_traderouting_1_proto_enumTypes[5]
}

func (x AccountSearchRequest_AccountGroupRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AccountSearchRequest_AccountGroupRole) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AccountSearchRequest_AccountGroupRole(num)
	return nil
}

// Deprecated: Use AccountSearchRequest_AccountGroupRole.Descriptor instead.
func (AccountSearchRequest_AccountGroupRole) EnumDescriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{17, 0}
}

// List of possible search refine criteria.
type AccountSearchRequest_SearchCriteria int32

const (
	// Search by account id.
	AccountSearchRequest_ACCOUNT_ID AccountSearchRequest_SearchCriteria = 1
	// Search by account name.
	AccountSearchRequest_ACCOUNT_NAME AccountSearchRequest_SearchCriteria = 2
	// Search by brokerage account number.
	AccountSearchRequest_BROKERAGE_NUMBER AccountSearchRequest_SearchCriteria = 3
	// Search by sales series number.
	AccountSearchRequest_SALES_SERIES_NUMBER AccountSearchRequest_SearchCriteria = 4
	// Search by sales series name.
	AccountSearchRequest_SALES_SERIES_NAME AccountSearchRequest_SearchCriteria = 5
	// Search by sales series ID.
	AccountSearchRequest_SALES_SERIES_ID AccountSearchRequest_SearchCriteria = 6
	// Search by customer ID.
	AccountSearchRequest_CUSTOMER_ID AccountSearchRequest_SearchCriteria = 7
	// Search by customer name.
	AccountSearchRequest_CUSTOMER_NAME AccountSearchRequest_SearchCriteria = 8
	// [obsolete] Search by account cluster.
	// This criteria is no longer supported.
	AccountSearchRequest_OBSOLETE_ACCOUNT_CLUSTER_ID AccountSearchRequest_SearchCriteria = 9
	// LIMITED USE: Only explicitly, one per search option with EXACT_EQUALITY rule and in all match mode.
	AccountSearchRequest_RISK_SERVER_INSTANCE_ID AccountSearchRequest_SearchCriteria = 10
	AccountSearchRequest_ACCOUNT_GROUP_ID        AccountSearchRequest_SearchCriteria = 11
	// This field is associated with AccountSearchRequest.AccountGroupRole enum type.
	// LIMITED USE: Only explicitly, one per search option with EXACT_EQUALITY rule and in all match mode.
	AccountSearchRequest_ACCOUNT_GROUP_ROLE AccountSearchRequest_SearchCriteria = 12
	AccountSearchRequest_BROKERAGE_ID       AccountSearchRequest_SearchCriteria = 13
	// This field is associated with Account.Class enum type.
	// LIMITED USE: Only explicitly, one per search option with EXACT_EQUALITY rule and in all match mode.
	AccountSearchRequest_ACCOUNT_CLASS AccountSearchRequest_SearchCriteria = 14
	// Can be 0 (false) or 1 (true).
	// LIMITED USE: Only explicitly, one per search option with EXACT_EQUALITY rule and in all match mode.
	AccountSearchRequest_IS_COLLECTION AccountSearchRequest_SearchCriteria = 15
	// Can be 0 (false) or 1 (true).
	// LIMITED USE: Only explicitly, one per search option with EXACT_EQUALITY rule and in all match mode.
	AccountSearchRequest_IS_IN_ACCOUNT_GROUP AccountSearchRequest_SearchCriteria = 16
)

// Enum value maps for AccountSearchRequest_SearchCriteria.
var (
	AccountSearchRequest_SearchCriteria_name = map[int32]string{
		1:  "ACCOUNT_ID",
		2:  "ACCOUNT_NAME",
		3:  "BROKERAGE_NUMBER",
		4:  "SALES_SERIES_NUMBER",
		5:  "SALES_SERIES_NAME",
		6:  "SALES_SERIES_ID",
		7:  "CUSTOMER_ID",
		8:  "CUSTOMER_NAME",
		9:  "OBSOLETE_ACCOUNT_CLUSTER_ID",
		10: "RISK_SERVER_INSTANCE_ID",
		11: "ACCOUNT_GROUP_ID",
		12: "ACCOUNT_GROUP_ROLE",
		13: "BROKERAGE_ID",
		14: "ACCOUNT_CLASS",
		15: "IS_COLLECTION",
		16: "IS_IN_ACCOUNT_GROUP",
	}
	AccountSearchRequest_SearchCriteria_value = map[string]int32{
		"ACCOUNT_ID":                  1,
		"ACCOUNT_NAME":                2,
		"BROKERAGE_NUMBER":            3,
		"SALES_SERIES_NUMBER":         4,
		"SALES_SERIES_NAME":           5,
		"SALES_SERIES_ID":             6,
		"CUSTOMER_ID":                 7,
		"CUSTOMER_NAME":               8,
		"OBSOLETE_ACCOUNT_CLUSTER_ID": 9,
		"RISK_SERVER_INSTANCE_ID":     10,
		"ACCOUNT_GROUP_ID":            11,
		"ACCOUNT_GROUP_ROLE":          12,
		"BROKERAGE_ID":                13,
		"ACCOUNT_CLASS":               14,
		"IS_COLLECTION":               15,
		"IS_IN_ACCOUNT_GROUP":         16,
	}
)

func (x AccountSearchRequest_SearchCriteria) Enum() *AccountSearchRequest_SearchCriteria {
	p := new(AccountSearchRequest_SearchCriteria)
	*p = x
	return p
}

func (x AccountSearchRequest_SearchCriteria) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountSearchRequest_SearchCriteria) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_traderouting_1_proto_enumTypes[6].Descriptor()
}

func (AccountSearchRequest_SearchCriteria) Type() protoreflect.EnumType {
	return &file_proto_traderouting_1_proto_enumTypes[6]
}

func (x AccountSearchRequest_SearchCriteria) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AccountSearchRequest_SearchCriteria) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AccountSearchRequest_SearchCriteria(num)
	return nil
}

// Deprecated: Use AccountSearchRequest_SearchCriteria.Descriptor instead.
func (AccountSearchRequest_SearchCriteria) EnumDescriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{17, 1}
}

// Order side enum.
type OrderChain_Side int32

const (
	// Describes purchasing side of a trade.
	OrderChain_BUY OrderChain_Side = 1
	// Describes selling side of a trade.
	OrderChain_SELL OrderChain_Side = 2
)

// Enum value maps for OrderChain_Side.
var (
	OrderChain_Side_name = map[int32]string{
		1: "BUY",
		2: "SELL",
	}
	OrderChain_Side_value = map[string]int32{
		"BUY":  1,
		"SELL": 2,
	}
)

func (x OrderChain_Side) Enum() *OrderChain_Side {
	p := new(OrderChain_Side)
	*p = x
	return p
}

func (x OrderChain_Side) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderChain_Side) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_traderouting_1_proto_enumTypes[7].Descriptor()
}

func (OrderChain_Side) Type() protoreflect.EnumType {
	return &file_proto_traderouting_1_proto_enumTypes[7]
}

func (x OrderChain_Side) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OrderChain_Side) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OrderChain_Side(num)
	return nil
}

// Deprecated: Use OrderChain_Side.Descriptor instead.
func (OrderChain_Side) EnumDescriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{82, 0}
}

// Order type enum.
type OrderChain_OrderType int32

const (
	// Market order, buy or sell at the best available opposite price.
	OrderChain_MKT OrderChain_OrderType = 1
	// Limit order, buy or sell at price that is the same or better than specified limit price.
	OrderChain_LMT OrderChain_OrderType = 2
	// Stop order, order becomes a market order when market reaches order's stop price.
	// (which is on opposite side of market).
	OrderChain_STP OrderChain_OrderType = 3
	// Stop-limit order, order becomes a limit order when market reaches order's stop price.
	OrderChain_STL OrderChain_OrderType = 4
)

// Enum value maps for OrderChain_OrderType.
var (
	OrderChain_OrderType_name = map[int32]string{
		1: "MKT",
		2: "LMT",
		3: "STP",
		4: "STL",
	}
	OrderChain_OrderType_value = map[string]int32{
		"MKT": 1,
		"LMT": 2,
		"STP": 3,
		"STL": 4,
	}
)

func (x OrderChain_OrderType) Enum() *OrderChain_OrderType {
	p := new(OrderChain_OrderType)
	*p = x
	return p
}

func (x OrderChain_OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderChain_OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_traderouting_1_proto_enumTypes[8].Descriptor()
}

func (OrderChain_OrderType) Type() protoreflect.EnumType {
	return &file_proto_traderouting_1_proto_enumTypes[8]
}

func (x OrderChain_OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OrderChain_OrderType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OrderChain_OrderType(num)
	return nil
}

// Deprecated: Use OrderChain_OrderType.Descriptor instead.
func (OrderChain_OrderType) EnumDescriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{82, 1}
}

// Order execution instruction.
type OrderChain_ExecInstruction int32

const (
	// All or None (fill order only completely).
	OrderChain_AON OrderChain_ExecInstruction = 1
	// Iceberg (show only part of order size).
	OrderChain_ICEBERG OrderChain_ExecInstruction = 2
	// Quantity triggered (aka DOM Triggered, honor additional quantity threshold for triggering).
	OrderChain_QT OrderChain_ExecInstruction = 3
	// Trailing order (price of the order is following market one direction by specific offset).
	OrderChain_TRAIL OrderChain_ExecInstruction = 4
	// Funari (Limit order becomes a Market on Close).
	OrderChain_FUNARI OrderChain_ExecInstruction = 5
	// Market if Touched (Limit order becomes a Market when market reaches order's limit price).
	OrderChain_MIT OrderChain_ExecInstruction = 6
	// Market Limit Market is a limit order that is used to place a buy order above the best offer
	// to fill by the best offer or a sell order below the best bid to fill by the best bid.
	OrderChain_MLM OrderChain_ExecInstruction = 7
	// Market with Leftover as Limit
	// (market order then unexecuted quantity becomes limit order at last price).
	OrderChain_MTL OrderChain_ExecInstruction = 8
	// An auction order is an order to buy or sell in the market at the Calculated Opening Price (COP)
	// (Unmatched auction orders are converted to limit orders on the market open).
	OrderChain_AUCTION OrderChain_ExecInstruction = 9
)

// Enum value maps for OrderChain_ExecInstruction.
var (
	OrderChain_ExecInstruction_name = map[int32]string{
		1: "AON",
		2: "ICEBERG",
		3: "QT",
		4: "TRAIL",
		5: "FUNARI",
		6: "MIT",
		7: "MLM",
		8: "MTL",
		9: "AUCTION",
	}
	OrderChain_ExecInstruction_value = map[string]int32{
		"AON":     1,
		"ICEBERG": 2,
		"QT":      3,
		"TRAIL":   4,
		"FUNARI":  5,
		"MIT":     6,
		"MLM":     7,
		"MTL":     8,
		"AUCTION": 9,
	}
)

func (x OrderChain_ExecInstruction) Enum() *OrderChain_ExecInstruction {
	p := new(OrderChain_ExecInstruction)
	*p = x
	return p
}

func (x OrderChain_ExecInstruction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderChain_ExecInstruction) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_traderouting_1_proto_enumTypes[9].Descriptor()
}

func (OrderChain_ExecInstruction) Type() protoreflect.EnumType {
	return &file_proto_traderouting_1_proto_enumTypes[9]
}

func (x OrderChain_ExecInstruction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OrderChain_ExecInstruction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OrderChain_ExecInstruction(num)
	return nil
}

// Deprecated: Use OrderChain_ExecInstruction.Descriptor instead.
func (OrderChain_ExecInstruction) EnumDescriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{82, 2}
}

// Order duration.
type OrderChain_Duration int32

const (
	// Day order. Order is working through the current trading day only.
	OrderChain_DAY OrderChain_Duration = 1
	// Good Til Canceled. Order is working until canceled or until the contract is no longer available for trading.
	OrderChain_GTC OrderChain_Duration = 2
	// Good Til Date. Order is working until the end of the nearest trading day for the contract on
	// or before the date specified in the order.
	OrderChain_GTD OrderChain_Duration = 3
	// Good Til Time. Order is working until the specified time.
	OrderChain_GTT OrderChain_Duration = 4
	// Fill and Kill. Immediately fill as many as possible and cancel the rest.
	OrderChain_FAK OrderChain_Duration = 5
	// Fill Or Kill. Immediately fill this order completely or cancel.
	OrderChain_FOK OrderChain_Duration = 6
	// At The Open. Buy or sell at the very beginning of the trading day.
	OrderChain_ATO OrderChain_Duration = 7
	// At The Close. Buy or sell at the close of the market, or as near to the closing price as possible.
	OrderChain_ATC OrderChain_Duration = 8
)

// Enum value maps for OrderChain_Duration.
var (
	OrderChain_Duration_name = map[int32]string{
		1: "DAY",
		2: "GTC",
		3: "GTD",
		4: "GTT",
		5: "FAK",
		6: "FOK",
		7: "ATO",
		8: "ATC",
	}
	OrderChain_Duration_value = map[string]int32{
		"DAY": 1,
		"GTC": 2,
		"GTD": 3,
		"GTT": 4,
		"FAK": 5,
		"FOK": 6,
		"ATO": 7,
		"ATC": 8,
	}
)

func (x OrderChain_Duration) Enum() *OrderChain_Duration {
	p := new(OrderChain_Duration)
	*p = x
	return p
}

func (x OrderChain_Duration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderChain_Duration) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_traderouting_1_proto_enumTypes[10].Descriptor()
}

func (OrderChain_Duration) Type() protoreflect.EnumType {
	return &file_proto_traderouting_1_proto_enumTypes[10]
}

func (x OrderChain_Duration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OrderChain_Duration) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OrderChain_Duration(num)
	return nil
}

// Deprecated: Use OrderChain_Duration.Descriptor instead.
func (OrderChain_Duration) EnumDescriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{82, 3}
}

// Current order chain status.
type OrderChain_Status int32

const (
	// This status is used for internal Gateway transactions.
	OrderChain_UNDEFINED OrderChain_Status = 0
	// Original order is sent to execution system.
	OrderChain_IN_TRANSIT OrderChain_Status = 1
	// Order is rejected.
	OrderChain_REJECTED OrderChain_Status = 2
	// Order is acknowledged by execution and perhaps partially filled.
	OrderChain_WORKING OrderChain_Status = 3
	// Order is expired.
	OrderChain_EXPIRED OrderChain_Status = 4
	// Cancel request is sent to execution system.
	OrderChain_IN_CANCEL OrderChain_Status = 5
	// Modify request is sent to execution system.
	OrderChain_IN_MODIFY OrderChain_Status = 6
	// Order is canceled.
	OrderChain_CANCELLED OrderChain_Status = 7
	// Order is completely filled by execution system.
	OrderChain_FILLED OrderChain_Status = 8
	// Order is waiting submission to execution system.
	OrderChain_SUSPENDED OrderChain_Status = 9
	// Order may be canceled because a disconnection occurred.
	OrderChain_DISCONNECTED OrderChain_Status = 10
	// Order will be placed at a specified time (waiting for execution system to start accepting orders).
	OrderChain_ACTIVE_AT OrderChain_Status = 11
)

// Enum value maps for OrderChain_Status.
var (
	OrderChain_Status_name = map[int32]string{
		0:  "UNDEFINED",
		1:  "IN_TRANSIT",
		2:  "REJECTED",
		3:  "WORKING",
		4:  "EXPIRED",
		5:  "IN_CANCEL",
		6:  "IN_MODIFY",
		7:  "CANCELLED",
		8:  "FILLED",
		9:  "SUSPENDED",
		10: "DISCONNECTED",
		11: "ACTIVE_AT",
	}
	OrderChain_Status_value = map[string]int32{
		"UNDEFINED":    0,
		"IN_TRANSIT":   1,
		"REJECTED":     2,
		"WORKING":      3,
		"EXPIRED":      4,
		"IN_CANCEL":    5,
		"IN_MODIFY":    6,
		"CANCELLED":    7,
		"FILLED":       8,
		"SUSPENDED":    9,
		"DISCONNECTED": 10,
		"ACTIVE_AT":    11,
	}
)

func (x OrderChain_Status) Enum() *OrderChain_Status {
	p := new(OrderChain_Status)
	*p = x
	return p
}

func (x OrderChain_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderChain_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_traderouting_1_proto_enumTypes[11].Descriptor()
}

func (OrderChain_Status) Type() protoreflect.EnumType {
	return &file_proto_traderouting_1_proto_enumTypes[11]
}

func (x OrderChain_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OrderChain_Status) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OrderChain_Status(num)
	return nil
}

// Deprecated: Use OrderChain_Status.Descriptor instead.
func (OrderChain_Status) EnumDescriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{82, 4}
}

// Order or fill open/close type enum.
type OrderChain_OpenCloseType int32

const (
	// Opening new current day position.
	OrderChain_OPEN OrderChain_OpenCloseType = 1
	// Closing (current day only if instrument uses explicit close).
	OrderChain_CLOSE OrderChain_OpenCloseType = 2
	// Closing previous day (if instrument uses explicit close).
	OrderChain_CLOSE_PREVIOUS OrderChain_OpenCloseType = 3
)

// Enum value maps for OrderChain_OpenCloseType.
var (
	OrderChain_OpenCloseType_name = map[int32]string{
		1: "OPEN",
		2: "CLOSE",
		3: "CLOSE_PREVIOUS",
	}
	OrderChain_OpenCloseType_value = map[string]int32{
		"OPEN":           1,
		"CLOSE":          2,
		"CLOSE_PREVIOUS": 3,
	}
)

func (x OrderChain_OpenCloseType) Enum() *OrderChain_OpenCloseType {
	p := new(OrderChain_OpenCloseType)
	*p = x
	return p
}

func (x OrderChain_OpenCloseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderChain_OpenCloseType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_traderouting_1_proto_enumTypes[12].Descriptor()
}

func (OrderChain_OpenCloseType) Type() protoreflect.EnumType {
	return &file_proto_traderouting_1_proto_enumTypes[12]
}

func (x OrderChain_OpenCloseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OrderChain_OpenCloseType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OrderChain_OpenCloseType(num)
	return nil
}

// Deprecated: Use OrderChain_OpenCloseType.Descriptor instead.
func (OrderChain_OpenCloseType) EnumDescriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{82, 5}
}

// Order or fill speculation type enum.
type OrderChain_SpeculationType int32

const (
	// Speculation.
	OrderChain_SPECULATION OrderChain_SpeculationType = 1
	// Hedge.
	OrderChain_HEDGE OrderChain_SpeculationType = 2
	// Arbitrage.
	OrderChain_ARBITRAGE OrderChain_SpeculationType = 3
)

// Enum value maps for OrderChain_SpeculationType.
var (
	OrderChain_SpeculationType_name = map[int32]string{
		1: "SPECULATION",
		2: "HEDGE",
		3: "ARBITRAGE",
	}
	OrderChain_SpeculationType_value = map[string]int32{
		"SPECULATION": 1,
		"HEDGE":       2,
		"ARBITRAGE":   3,
	}
)

func (x OrderChain_SpeculationType) Enum() *OrderChain_SpeculationType {
	p := new(OrderChain_SpeculationType)
	*p = x
	return p
}

func (x OrderChain_SpeculationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderChain_SpeculationType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_traderouting_1_proto_enumTypes[13].Descriptor()
}

func (OrderChain_SpeculationType) Type() protoreflect.EnumType {
	return &file_proto_traderouting_1_proto_enumTypes[13]
}

func (x OrderChain_SpeculationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OrderChain_SpeculationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OrderChain_SpeculationType(num)
	return nil
}

// Deprecated: Use OrderChain_SpeculationType.Descriptor instead.
func (OrderChain_SpeculationType) EnumDescriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{82, 6}
}

// Type of order request in order chain.
type OrderRequest_RequestType int32

const (
	// New order place request.
	OrderRequest_PLACE OrderRequest_RequestType = 1
	// Replace order request.
	OrderRequest_REPLACE OrderRequest_RequestType = 2
	// Cancel order request.
	OrderRequest_CANCEL OrderRequest_RequestType = 3
)

// Enum value maps for OrderRequest_RequestType.
var (
	OrderRequest_RequestType_name = map[int32]string{
		1: "PLACE",
		2: "REPLACE",
		3: "CANCEL",
	}
	OrderRequest_RequestType_value = map[string]int32{
		"PLACE":   1,
		"REPLACE": 2,
		"CANCEL":  3,
	}
)

func (x OrderRequest_RequestType) Enum() *OrderRequest_RequestType {
	p := new(OrderRequest_RequestType)
	*p = x
	return p
}

func (x OrderRequest_RequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderRequest_RequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_traderouting_1_proto_enumTypes[14].Descriptor()
}

func (OrderRequest_RequestType) Type() protoreflect.EnumType {
	return &file_proto_traderouting_1_proto_enumTypes[14]
}

func (x OrderRequest_RequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OrderRequest_RequestType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OrderRequest_RequestType(num)
	return nil
}

// Deprecated: Use OrderRequest_RequestType.Descriptor instead.
func (OrderRequest_RequestType) EnumDescriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{87, 0}
}

// State of order request.
type OrderRequest_State int32

const (
	// Order is waiting for trading session start time for activation.
	OrderRequest_ACTIVE_AT OrderRequest_State = 1
	// Order request is suspended.
	OrderRequest_SUSPENDED OrderRequest_State = 2
	// Order request is sent to an execution system and is waiting for acknowledgment.
	OrderRequest_PENDING OrderRequest_State = 3
	// Order request is working at an execution system.
	OrderRequest_WORKING OrderRequest_State = 4
	// Order request is replaced with a new one.
	OrderRequest_REPLACED OrderRequest_State = 5
	// Order request is cancelled.
	OrderRequest_CANCELLED OrderRequest_State = 6
	// Order request is rejected.
	OrderRequest_REJECTED OrderRequest_State = 7
	// Order request is filled.
	OrderRequest_FILLED OrderRequest_State = 8
	// Order request is expired.
	OrderRequest_EXPIRED OrderRequest_State = 9
)

// Enum value maps for OrderRequest_State.
var (
	OrderRequest_State_name = map[int32]string{
		1: "ACTIVE_AT",
		2: "SUSPENDED",
		3: "PENDING",
		4: "WORKING",
		5: "REPLACED",
		6: "CANCELLED",
		7: "REJECTED",
		8: "FILLED",
		9: "EXPIRED",
	}
	OrderRequest_State_value = map[string]int32{
		"ACTIVE_AT": 1,
		"SUSPENDED": 2,
		"PENDING":   3,
		"WORKING":   4,
		"REPLACED":  5,
		"CANCELLED": 6,
		"REJECTED":  7,
		"FILLED":    8,
		"EXPIRED":   9,
	}
)

func (x OrderRequest_State) Enum() *OrderRequest_State {
	p := new(OrderRequest_State)
	*p = x
	return p
}

func (x OrderRequest_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderRequest_State) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_traderouting_1_proto_enumTypes[15].Descriptor()
}

func (OrderRequest_State) Type() protoreflect.EnumType {
	return &file_proto_traderouting_1_proto_enumTypes[15]
}

func (x OrderRequest_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OrderRequest_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OrderRequest_State(num)
	return nil
}

// Deprecated: Use OrderRequest_State.Descriptor instead.
func (OrderRequest_State) EnumDescriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{87, 1}
}

// Trailing type.
type OrderTrailing_TrailType int32

const (
	OrderTrailing_BEST_BID   OrderTrailing_TrailType = 1
	OrderTrailing_BEST_ASK   OrderTrailing_TrailType = 2
	OrderTrailing_LAST_TRADE OrderTrailing_TrailType = 3
)

// Enum value maps for OrderTrailing_TrailType.
var (
	OrderTrailing_TrailType_name = map[int32]string{
		1: "BEST_BID",
		2: "BEST_ASK",
		3: "LAST_TRADE",
	}
	OrderTrailing_TrailType_value = map[string]int32{
		"BEST_BID":   1,
		"BEST_ASK":   2,
		"LAST_TRADE": 3,
	}
)

func (x OrderTrailing_TrailType) Enum() *OrderTrailing_TrailType {
	p := new(OrderTrailing_TrailType)
	*p = x
	return p
}

func (x OrderTrailing_TrailType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderTrailing_TrailType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_traderouting_1_proto_enumTypes[16].Descriptor()
}

func (OrderTrailing_TrailType) Type() protoreflect.EnumType {
	return &file_proto_traderouting_1_proto_enumTypes[16]
}

func (x OrderTrailing_TrailType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OrderTrailing_TrailType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OrderTrailing_TrailType(num)
	return nil
}

// Deprecated: Use OrderTrailing_TrailType.Descriptor instead.
func (OrderTrailing_TrailType) EnumDescriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{89, 0}
}

// Status of the transaction.
type TransactionStatus_Status int32

const (
	// This status is used for internal Gateway transactions.
	TransactionStatus_UNDEFINED TransactionStatus_Status = 0
	// Original order is sent to execution system.
	TransactionStatus_IN_TRANSIT TransactionStatus_Status = 1
	// Original order is rejected (exception).
	TransactionStatus_REJECTED TransactionStatus_Status = 2
	// Order is acknowledged by execution system.
	TransactionStatus_ACK_PLACE TransactionStatus_Status = 3
	// Order is expired (exception).
	TransactionStatus_EXPIRED TransactionStatus_Status = 4
	// Cancel request is sent to execution system.
	TransactionStatus_IN_CANCEL TransactionStatus_Status = 5
	// Cancel is acknowledged by execution system.
	TransactionStatus_ACK_CANCEL TransactionStatus_Status = 6
	// Cancel request is rejected (exception).
	TransactionStatus_REJECT_CANCEL TransactionStatus_Status = 7
	// Modify request is sent to execution system.
	TransactionStatus_IN_MODIFY TransactionStatus_Status = 8
	// Modify is acknowledged by execution system.
	TransactionStatus_ACK_MODIFY TransactionStatus_Status = 9
	// Modify request is rejected (exception).
	TransactionStatus_REJECT_MODIFY TransactionStatus_Status = 10
	// Fill event is received from execution system.
	TransactionStatus_FILL TransactionStatus_Status = 11
	// Order is suspended.
	TransactionStatus_SUSPEND TransactionStatus_Status = 12
	// Referenced fill is corrected.
	TransactionStatus_FILL_CORRECT TransactionStatus_Status = 13
	// Referenced fill is canceled (exception).
	TransactionStatus_FILL_CANCEL TransactionStatus_Status = 14
	// Referenced fill is busted (exception).
	TransactionStatus_FILL_BUST TransactionStatus_Status = 15
	// Acknowledgment that order will activate at specified time.
	TransactionStatus_ACTIVEAT TransactionStatus_Status = 16
	// Order may be canceled because a disconnect occurred (exception).
	TransactionStatus_DISCONNECT TransactionStatus_Status = 17
	// Synthetic order was sent to the actual execution system.
	TransactionStatus_SYNTHETIC_ACTIVATED TransactionStatus_Status = 18
	// Order status and/ or attributes are updated.
	TransactionStatus_UPDATE TransactionStatus_Status = 19
)

// Enum value maps for TransactionStatus_Status.
var (
	TransactionStatus_Status_name = map[int32]string{
		0:  "UNDEFINED",
		1:  "IN_TRANSIT",
		2:  "REJECTED",
		3:  "ACK_PLACE",
		4:  "EXPIRED",
		5:  "IN_CANCEL",
		6:  "ACK_CANCEL",
		7:  "REJECT_CANCEL",
		8:  "IN_MODIFY",
		9:  "ACK_MODIFY",
		10: "REJECT_MODIFY",
		11: "FILL",
		12: "SUSPEND",
		13: "FILL_CORRECT",
		14: "FILL_CANCEL",
		15: "FILL_BUST",
		16: "ACTIVEAT",
		17: "DISCONNECT",
		18: "SYNTHETIC_ACTIVATED",
		19: "UPDATE",
	}
	TransactionStatus_Status_value = map[string]int32{
		"UNDEFINED":           0,
		"IN_TRANSIT":          1,
		"REJECTED":            2,
		"ACK_PLACE":           3,
		"EXPIRED":             4,
		"IN_CANCEL":           5,
		"ACK_CANCEL":          6,
		"REJECT_CANCEL":       7,
		"IN_MODIFY":           8,
		"ACK_MODIFY":          9,
		"REJECT_MODIFY":       10,
		"FILL":                11,
		"SUSPEND":             12,
		"FILL_CORRECT":        13,
		"FILL_CANCEL":         14,
		"FILL_BUST":           15,
		"ACTIVEAT":            16,
		"DISCONNECT":          17,
		"SYNTHETIC_ACTIVATED": 18,
		"UPDATE":              19,
	}
)

func (x TransactionStatus_Status) Enum() *TransactionStatus_Status {
	p := new(TransactionStatus_Status)
	*p = x
	return p
}

func (x TransactionStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_traderouting_1_proto_enumTypes[17].Descriptor()
}

func (TransactionStatus_Status) Type() protoreflect.EnumType {
	return &file_proto_traderouting_1_proto_enumTypes[17]
}

func (x TransactionStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TransactionStatus_Status) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TransactionStatus_Status(num)
	return nil
}

// Deprecated: Use TransactionStatus_Status.Descriptor instead.
func (TransactionStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{91, 0}
}

// Possible fill status.
type OrderFill_FillStatus int32

const (
	// Regular valid fill.
	OrderFill_VALID OrderFill_FillStatus = 1
	// Fill was busted.
	OrderFill_BUSTED OrderFill_FillStatus = 2
	// Fill was corrected.
	OrderFill_CORRECTED OrderFill_FillStatus = 3
	// Fill was cancelled.
	OrderFill_CANCELLED OrderFill_FillStatus = 4
)

// Enum value maps for OrderFill_FillStatus.
var (
	OrderFill_FillStatus_name = map[int32]string{
		1: "VALID",
		2: "BUSTED",
		3: "CORRECTED",
		4: "CANCELLED",
	}
	OrderFill_FillStatus_value = map[string]int32{
		"VALID":     1,
		"BUSTED":    2,
		"CORRECTED": 3,
		"CANCELLED": 4,
	}
)

func (x OrderFill_FillStatus) Enum() *OrderFill_FillStatus {
	p := new(OrderFill_FillStatus)
	*p = x
	return p
}

func (x OrderFill_FillStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderFill_FillStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_traderouting_1_proto_enumTypes[18].Descriptor()
}

func (OrderFill_FillStatus) Type() protoreflect.EnumType {
	return &file_proto_traderouting_1_proto_enumTypes[18]
}

func (x OrderFill_FillStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OrderFill_FillStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OrderFill_FillStatus(num)
	return nil
}

// Deprecated: Use OrderFill_FillStatus.Descriptor instead.
func (OrderFill_FillStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{92, 0}
}

type CompoundOrder_CompoundOrderNodeRole int32

const (
	// Root of tree.
	CompoundOrder_ROOT CompoundOrder_CompoundOrderNodeRole = 1
	// Order place order primary.
	CompoundOrder_OPO_PRIMARY CompoundOrder_CompoundOrderNodeRole = 2
	// Order place order secondary.
	CompoundOrder_OPO_SECONDARY CompoundOrder_CompoundOrderNodeRole = 3
	// Order cancel order.
	CompoundOrder_OCO_ROLE CompoundOrder_CompoundOrderNodeRole = 4
)

// Enum value maps for CompoundOrder_CompoundOrderNodeRole.
var (
	CompoundOrder_CompoundOrderNodeRole_name = map[int32]string{
		1: "ROOT",
		2: "OPO_PRIMARY",
		3: "OPO_SECONDARY",
		4: "OCO_ROLE",
	}
	CompoundOrder_CompoundOrderNodeRole_value = map[string]int32{
		"ROOT":          1,
		"OPO_PRIMARY":   2,
		"OPO_SECONDARY": 3,
		"OCO_ROLE":      4,
	}
)

func (x CompoundOrder_CompoundOrderNodeRole) Enum() *CompoundOrder_CompoundOrderNodeRole {
	p := new(CompoundOrder_CompoundOrderNodeRole)
	*p = x
	return p
}

func (x CompoundOrder_CompoundOrderNodeRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompoundOrder_CompoundOrderNodeRole) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_traderouting_1_proto_enumTypes[19].Descriptor()
}

func (CompoundOrder_CompoundOrderNodeRole) Type() protoreflect.EnumType {
	return &file_proto_traderouting_1_proto_enumTypes[19]
}

func (x CompoundOrder_CompoundOrderNodeRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CompoundOrder_CompoundOrderNodeRole) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CompoundOrder_CompoundOrderNodeRole(num)
	return nil
}

// Deprecated: Use CompoundOrder_CompoundOrderNodeRole.Descriptor instead.
func (CompoundOrder_CompoundOrderNodeRole) EnumDescriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{95, 0}
}

type CompoundOrder_CompoundOrderType int32

const (
	// Order cancel order.
	CompoundOrder_OCO CompoundOrder_CompoundOrderType = 1
	// Order place order.
	CompoundOrder_OPO CompoundOrder_CompoundOrderType = 2
	// Order type. Compound order with ORDER type is associated with order chain.
	CompoundOrder_ORDER CompoundOrder_CompoundOrderType = 3
)

// Enum value maps for CompoundOrder_CompoundOrderType.
var (
	CompoundOrder_CompoundOrderType_name = map[int32]string{
		1: "OCO",
		2: "OPO",
		3: "ORDER",
	}
	CompoundOrder_CompoundOrderType_value = map[string]int32{
		"OCO":   1,
		"OPO":   2,
		"ORDER": 3,
	}
)

func (x CompoundOrder_CompoundOrderType) Enum() *CompoundOrder_CompoundOrderType {
	p := new(CompoundOrder_CompoundOrderType)
	*p = x
	return p
}

func (x CompoundOrder_CompoundOrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompoundOrder_CompoundOrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_traderouting_1_proto_enumTypes[20].Descriptor()
}

func (CompoundOrder_CompoundOrderType) Type() protoreflect.EnumType {
	return &file_proto_traderouting_1_proto_enumTypes[20]
}

func (x CompoundOrder_CompoundOrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CompoundOrder_CompoundOrderType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CompoundOrder_CompoundOrderType(num)
	return nil
}

// Deprecated: Use CompoundOrder_CompoundOrderType.Descriptor instead.
func (CompoundOrder_CompoundOrderType) EnumDescriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{95, 1}
}

type CompoundOrder_CompoundOrderTriggerType int32

const (
	// Default value for compound order. Indicates whether сompound order is working.
	CompoundOrder_Working CompoundOrder_CompoundOrderTriggerType = 1
	// Indicates whether сompound order has been filled.
	CompoundOrder_Filled CompoundOrder_CompoundOrderTriggerType = 2
	// Indicates whether сompound order has been cancelled.
	CompoundOrder_Cancelled CompoundOrder_CompoundOrderTriggerType = 3
)

// Enum value maps for CompoundOrder_CompoundOrderTriggerType.
var (
	CompoundOrder_CompoundOrderTriggerType_name = map[int32]string{
		1: "Working",
		2: "Filled",
		3: "Cancelled",
	}
	CompoundOrder_CompoundOrderTriggerType_value = map[string]int32{
		"Working":   1,
		"Filled":    2,
		"Cancelled": 3,
	}
)

func (x CompoundOrder_CompoundOrderTriggerType) Enum() *CompoundOrder_CompoundOrderTriggerType {
	p := new(CompoundOrder_CompoundOrderTriggerType)
	*p = x
	return p
}

func (x CompoundOrder_CompoundOrderTriggerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompoundOrder_CompoundOrderTriggerType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_traderouting_1_proto_enumTypes[21].Descriptor()
}

func (CompoundOrder_CompoundOrderTriggerType) Type() protoreflect.EnumType {
	return &file_proto_traderouting_1_proto_enumTypes[21]
}

func (x CompoundOrder_CompoundOrderTriggerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CompoundOrder_CompoundOrderTriggerType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CompoundOrder_CompoundOrderTriggerType(num)
	return nil
}

// Deprecated: Use CompoundOrder_CompoundOrderTriggerType.Descriptor instead.
func (CompoundOrder_CompoundOrderTriggerType) EnumDescriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{95, 2}
}

type StrategyLeg_StrategyMode int32

const (
	// All legs executed.
	StrategyLeg_ALL StrategyLeg_StrategyMode = 1
	// Aggregate legs.
	StrategyLeg_AGGR StrategyLeg_StrategyMode = 2
	// Multiplicative strategy.
	StrategyLeg_MUL StrategyLeg_StrategyMode = 3
)

// Enum value maps for StrategyLeg_StrategyMode.
var (
	StrategyLeg_StrategyMode_name = map[int32]string{
		1: "ALL",
		2: "AGGR",
		3: "MUL",
	}
	StrategyLeg_StrategyMode_value = map[string]int32{
		"ALL":  1,
		"AGGR": 2,
		"MUL":  3,
	}
)

func (x StrategyLeg_StrategyMode) Enum() *StrategyLeg_StrategyMode {
	p := new(StrategyLeg_StrategyMode)
	*p = x
	return p
}

func (x StrategyLeg_StrategyMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StrategyLeg_StrategyMode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_traderouting_1_proto_enumTypes[22].Descriptor()
}

func (StrategyLeg_StrategyMode) Type() protoreflect.EnumType {
	return &file_proto_traderouting_1_proto_enumTypes[22]
}

func (x StrategyLeg_StrategyMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *StrategyLeg_StrategyMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = StrategyLeg_StrategyMode(num)
	return nil
}

// Deprecated: Use StrategyLeg_StrategyMode.Descriptor instead.
func (StrategyLeg_StrategyMode) EnumDescriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{96, 0}
}

// Account class enumeration.
type Account_Class int32

const (
	// Regular account class.
	Account_REGULAR Account_Class = 1
	// Template account class.
	// This class is used for back office parsing not for clonning.
	Account_TEMPLATE Account_Class = 2
	// Omnibus account class.
	Account_OMNIBUS Account_Class = 3
)

// Enum value maps for Account_Class.
var (
	Account_Class_name = map[int32]string{
		1: "REGULAR",
		2: "TEMPLATE",
		3: "OMNIBUS",
	}
	Account_Class_value = map[string]int32{
		"REGULAR":  1,
		"TEMPLATE": 2,
		"OMNIBUS":  3,
	}
)

func (x Account_Class) Enum() *Account_Class {
	p := new(Account_Class)
	*p = x
	return p
}

func (x Account_Class) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Account_Class) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_traderouting_1_proto_enumTypes[23].Descriptor()
}

func (Account_Class) Type() protoreflect.EnumType {
	return &file_proto_traderouting_1_proto_enumTypes[23]
}

func (x Account_Class) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Account_Class) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Account_Class(num)
	return nil
}

// Deprecated: Use Account_Class.Descriptor instead.
func (Account_Class) EnumDescriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{97, 0}
}

// Account sub-class enumeration.
type Account_SubClass int32

const (
	// Regular account sub-class.
	Account_SUB_CLASS_REGULAR Account_SubClass = 1
	// Gateway internal account sub-class.
	Account_SUB_CLASS_INTERNAL Account_SubClass = 2
)

// Enum value maps for Account_SubClass.
var (
	Account_SubClass_name = map[int32]string{
		1: "SUB_CLASS_REGULAR",
		2: "SUB_CLASS_INTERNAL",
	}
	Account_SubClass_value = map[string]int32{
		"SUB_CLASS_REGULAR":  1,
		"SUB_CLASS_INTERNAL": 2,
	}
)

func (x Account_SubClass) Enum() *Account_SubClass {
	p := new(Account_SubClass)
	*p = x
	return p
}

func (x Account_SubClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Account_SubClass) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_traderouting_1_proto_enumTypes[24].Descriptor()
}

func (Account_SubClass) Type() protoreflect.EnumType {
	return &file_proto_traderouting_1_proto_enumTypes[24]
}

func (x Account_SubClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Account_SubClass) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Account_SubClass(num)
	return nil
}

// Deprecated: Use Account_SubClass.Descriptor instead.
func (Account_SubClass) EnumDescriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{97, 1}
}

// Represents balance origin enum.
type BalanceRecord_BalanceOrigin int32

const (
	// Not-available.
	BalanceRecord_NA BalanceRecord_BalanceOrigin = 1
	// Local balance.
	BalanceRecord_LOCAL BalanceRecord_BalanceOrigin = 2
	// Abroad balance.
	BalanceRecord_OVERSEAS BalanceRecord_BalanceOrigin = 3
)

// Enum value maps for BalanceRecord_BalanceOrigin.
var (
	BalanceRecord_BalanceOrigin_name = map[int32]string{
		1: "NA",
		2: "LOCAL",
		3: "OVERSEAS",
	}
	BalanceRecord_BalanceOrigin_value = map[string]int32{
		"NA":       1,
		"LOCAL":    2,
		"OVERSEAS": 3,
	}
)

func (x BalanceRecord_BalanceOrigin) Enum() *BalanceRecord_BalanceOrigin {
	p := new(BalanceRecord_BalanceOrigin)
	*p = x
	return p
}

func (x BalanceRecord_BalanceOrigin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BalanceRecord_BalanceOrigin) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_traderouting_1_proto_enumTypes[25].Descriptor()
}

func (BalanceRecord_BalanceOrigin) Type() protoreflect.EnumType {
	return &file_proto_traderouting_1_proto_enumTypes[25]
}

func (x BalanceRecord_BalanceOrigin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BalanceRecord_BalanceOrigin) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BalanceRecord_BalanceOrigin(num)
	return nil
}

// Deprecated: Use BalanceRecord_BalanceOrigin.Descriptor instead.
func (BalanceRecord_BalanceOrigin) EnumDescriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{98, 0}
}

// Account statement processing option enumeration (account clearing).
type AccountSettings_StatementOption int32

const (
	// Generate complete daily statement (simulated clearing).
	AccountSettings_GENERATE AccountSettings_StatementOption = 1
	// Process statements as received from a brokerage.
	AccountSettings_BROKERAGE AccountSettings_StatementOption = 2
	// Reset to zero positions at the end of the day.
	AccountSettings_RESET AccountSettings_StatementOption = 3
)

// Enum value maps for AccountSettings_StatementOption.
var (
	AccountSettings_StatementOption_name = map[int32]string{
		1: "GENERATE",
		2: "BROKERAGE",
		3: "RESET",
	}
	AccountSettings_StatementOption_value = map[string]int32{
		"GENERATE":  1,
		"BROKERAGE": 2,
		"RESET":     3,
	}
)

func (x AccountSettings_StatementOption) Enum() *AccountSettings_StatementOption {
	p := new(AccountSettings_StatementOption)
	*p = x
	return p
}

func (x AccountSettings_StatementOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountSettings_StatementOption) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_traderouting_1_proto_enumTypes[26].Descriptor()
}

func (AccountSettings_StatementOption) Type() protoreflect.EnumType {
	return &file_proto_traderouting_1_proto_enumTypes[26]
}

func (x AccountSettings_StatementOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AccountSettings_StatementOption) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AccountSettings_StatementOption(num)
	return nil
}

// Deprecated: Use AccountSettings_StatementOption.Descriptor instead.
func (AccountSettings_StatementOption) EnumDescriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{103, 0}
}

type AccountRiskParameters_OptionsTrading int32

const (
	// Cannot buy or sell options.
	AccountRiskParameters_NO AccountRiskParameters_OptionsTrading = 1
	// Buy options or liquidate long option positions.
	AccountRiskParameters_BUY AccountRiskParameters_OptionsTrading = 2
	// Buy or Sell options.
	AccountRiskParameters_ALL AccountRiskParameters_OptionsTrading = 3
)

// Enum value maps for AccountRiskParameters_OptionsTrading.
var (
	AccountRiskParameters_OptionsTrading_name = map[int32]string{
		1: "NO",
		2: "BUY",
		3: "ALL",
	}
	AccountRiskParameters_OptionsTrading_value = map[string]int32{
		"NO":  1,
		"BUY": 2,
		"ALL": 3,
	}
)

func (x AccountRiskParameters_OptionsTrading) Enum() *AccountRiskParameters_OptionsTrading {
	p := new(AccountRiskParameters_OptionsTrading)
	*p = x
	return p
}

func (x AccountRiskParameters_OptionsTrading) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountRiskParameters_OptionsTrading) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_traderouting_1_proto_enumTypes[27].Descriptor()
}

func (AccountRiskParameters_OptionsTrading) Type() protoreflect.EnumType {
	return &file_proto_traderouting_1_proto_enumTypes[27]
}

func (x AccountRiskParameters_OptionsTrading) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AccountRiskParameters_OptionsTrading) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AccountRiskParameters_OptionsTrading(num)
	return nil
}

// Deprecated: Use AccountRiskParameters_OptionsTrading.Descriptor instead.
func (AccountRiskParameters_OptionsTrading) EnumDescriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{104, 0}
}

// Group accounts relation enumeration.
type AccountGroup_RelationType int32

const (
	// Margin independently (sub accounts can borrow Purchasing Power from master up to configured %).
	AccountGroup_MARGIN_INDEPENDENTLY_BORROW AccountGroup_RelationType = 1
	// Margin independently, then sum margin requirements and Purchasing Powers.
	AccountGroup_MARGIN_INDEPENDENTLY_SUM AccountGroup_RelationType = 2
	// Margin master and sub-accounts together (combine funds, orders, and positions for margin calculations).
	AccountGroup_MARGIN_TOGETHER AccountGroup_RelationType = 3
)

// Enum value maps for AccountGroup_RelationType.
var (
	AccountGroup_RelationType_name = map[int32]string{
		1: "MARGIN_INDEPENDENTLY_BORROW",
		2: "MARGIN_INDEPENDENTLY_SUM",
		3: "MARGIN_TOGETHER",
	}
	AccountGroup_RelationType_value = map[string]int32{
		"MARGIN_INDEPENDENTLY_BORROW": 1,
		"MARGIN_INDEPENDENTLY_SUM":    2,
		"MARGIN_TOGETHER":             3,
	}
)

func (x AccountGroup_RelationType) Enum() *AccountGroup_RelationType {
	p := new(AccountGroup_RelationType)
	*p = x
	return p
}

func (x AccountGroup_RelationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountGroup_RelationType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_traderouting_1_proto_enumTypes[28].Descriptor()
}

func (AccountGroup_RelationType) Type() protoreflect.EnumType {
	return &file_proto_traderouting_1_proto_enumTypes[28]
}

func (x AccountGroup_RelationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AccountGroup_RelationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AccountGroup_RelationType(num)
	return nil
}

// Deprecated: Use AccountGroup_RelationType.Descriptor instead.
func (AccountGroup_RelationType) EnumDescriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{105, 0}
}

// Possible options to include different values into purchasing power.
type PurchasingPowerParameters_IncludeOption int32

const (
	// Value is included.
	PurchasingPowerParameters_YES PurchasingPowerParameters_IncludeOption = 1
	// Only negative value is included.
	PurchasingPowerParameters_NEGATIVE PurchasingPowerParameters_IncludeOption = 2
	// Value is not included.
	PurchasingPowerParameters_NO PurchasingPowerParameters_IncludeOption = 3
)

// Enum value maps for PurchasingPowerParameters_IncludeOption.
var (
	PurchasingPowerParameters_IncludeOption_name = map[int32]string{
		1: "YES",
		2: "NEGATIVE",
		3: "NO",
	}
	PurchasingPowerParameters_IncludeOption_value = map[string]int32{
		"YES":      1,
		"NEGATIVE": 2,
		"NO":       3,
	}
)

func (x PurchasingPowerParameters_IncludeOption) Enum() *PurchasingPowerParameters_IncludeOption {
	p := new(PurchasingPowerParameters_IncludeOption)
	*p = x
	return p
}

func (x PurchasingPowerParameters_IncludeOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PurchasingPowerParameters_IncludeOption) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_traderouting_1_proto_enumTypes[29].Descriptor()
}

func (PurchasingPowerParameters_IncludeOption) Type() protoreflect.EnumType {
	return &file_proto_traderouting_1_proto_enumTypes[29]
}

func (x PurchasingPowerParameters_IncludeOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PurchasingPowerParameters_IncludeOption) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PurchasingPowerParameters_IncludeOption(num)
	return nil
}

// Deprecated: Use PurchasingPowerParameters_IncludeOption.Descriptor instead.
func (PurchasingPowerParameters_IncludeOption) EnumDescriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{112, 0}
}

// Loss limit type enumeration.
// It defines what is used to get the limit absolute value during calculation.
type LossLimit_Type int32

const (
	// Percentage of funds allowed in losses.
	LossLimit_PERCENT LossLimit_Type = 1
	// Absolute amount allowed in losses, limited by funds.
	LossLimit_AMOUNT LossLimit_Type = 2
	// Minimum from percent and absolute amount of funds allowed in losses.
	LossLimit_MIN_PERCENT_AMOUNT LossLimit_Type = 3
	// Maximum from percent and absolute amount of funds allowed in losses.
	LossLimit_MAX_PERCENT_AMOUNT LossLimit_Type = 4
	// Absolute amount of funds allowed in losses, and not limited by funds.
	LossLimit_AMOUNT_NO_LIMIT LossLimit_Type = 5
)

// Enum value maps for LossLimit_Type.
var (
	LossLimit_Type_name = map[int32]string{
		1: "PERCENT",
		2: "AMOUNT",
		3: "MIN_PERCENT_AMOUNT",
		4: "MAX_PERCENT_AMOUNT",
		5: "AMOUNT_NO_LIMIT",
	}
	LossLimit_Type_value = map[string]int32{
		"PERCENT":            1,
		"AMOUNT":             2,
		"MIN_PERCENT_AMOUNT": 3,
		"MAX_PERCENT_AMOUNT": 4,
		"AMOUNT_NO_LIMIT":    5,
	}
)

func (x LossLimit_Type) Enum() *LossLimit_Type {
	p := new(LossLimit_Type)
	*p = x
	return p
}

func (x LossLimit_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LossLimit_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_traderouting_1_proto_enumTypes[30].Descriptor()
}

func (LossLimit_Type) Type() protoreflect.EnumType {
	return &file_proto_traderouting_1_proto_enumTypes[30]
}

func (x LossLimit_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LossLimit_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LossLimit_Type(num)
	return nil
}

// Deprecated: Use LossLimit_Type.Descriptor instead.
func (LossLimit_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{113, 0}
}

// Different market limit types.
type InstrumentType_MarketLimitType int32

const (
	// Instrument position limit type.
	InstrumentType_INSTRUMENT_POSITION_LIMIT InstrumentType_MarketLimitType = 1
	// Contract position limit type.
	InstrumentType_CONTRACT_POSITION_LIMIT InstrumentType_MarketLimitType = 2
	// Trade size limit type.
	InstrumentType_TRADE_SIZE_LIMIT InstrumentType_MarketLimitType = 3
	// Trade price limit type.
	InstrumentType_TRADE_PRICE_LIMIT InstrumentType_MarketLimitType = 4
	// Trade price limit type.
	InstrumentType_LAST_TRADING_DATE_LIMIT InstrumentType_MarketLimitType = 5
)

// Enum value maps for InstrumentType_MarketLimitType.
var (
	InstrumentType_MarketLimitType_name = map[int32]string{
		1: "INSTRUMENT_POSITION_LIMIT",
		2: "CONTRACT_POSITION_LIMIT",
		3: "TRADE_SIZE_LIMIT",
		4: "TRADE_PRICE_LIMIT",
		5: "LAST_TRADING_DATE_LIMIT",
	}
	InstrumentType_MarketLimitType_value = map[string]int32{
		"INSTRUMENT_POSITION_LIMIT": 1,
		"CONTRACT_POSITION_LIMIT":   2,
		"TRADE_SIZE_LIMIT":          3,
		"TRADE_PRICE_LIMIT":         4,
		"LAST_TRADING_DATE_LIMIT":   5,
	}
)

func (x InstrumentType_MarketLimitType) Enum() *InstrumentType_MarketLimitType {
	p := new(InstrumentType_MarketLimitType)
	*p = x
	return p
}

func (x InstrumentType_MarketLimitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstrumentType_MarketLimitType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_traderouting_1_proto_enumTypes[31].Descriptor()
}

func (InstrumentType_MarketLimitType) Type() protoreflect.EnumType {
	return &file_proto_traderouting_1_proto_enumTypes[31]
}

func (x InstrumentType_MarketLimitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *InstrumentType_MarketLimitType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = InstrumentType_MarketLimitType(num)
	return nil
}

// Deprecated: Use InstrumentType_MarketLimitType.Descriptor instead.
func (InstrumentType_MarketLimitType) EnumDescriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{117, 0}
}

type OpenPosition_PositionStatus int32

const (
	OpenPosition_POSITION      OpenPosition_PositionStatus = 1
	OpenPosition_WORKING_ORDER OpenPosition_PositionStatus = 2
)

// Enum value maps for OpenPosition_PositionStatus.
var (
	OpenPosition_PositionStatus_name = map[int32]string{
		1: "POSITION",
		2: "WORKING_ORDER",
	}
	OpenPosition_PositionStatus_value = map[string]int32{
		"POSITION":      1,
		"WORKING_ORDER": 2,
	}
)

func (x OpenPosition_PositionStatus) Enum() *OpenPosition_PositionStatus {
	p := new(OpenPosition_PositionStatus)
	*p = x
	return p
}

func (x OpenPosition_PositionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenPosition_PositionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_traderouting_1_proto_enumTypes[32].Descriptor()
}

func (OpenPosition_PositionStatus) Type() protoreflect.EnumType {
	return &file_proto_traderouting_1_proto_enumTypes[32]
}

func (x OpenPosition_PositionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OpenPosition_PositionStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OpenPosition_PositionStatus(num)
	return nil
}

// Deprecated: Use OpenPosition_PositionStatus.Descriptor instead.
func (OpenPosition_PositionStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{128, 0}
}

type Route_OmnibusSupportType int32

const (
	Route_PROHIBITED Route_OmnibusSupportType = 1
	Route_ALLOWED    Route_OmnibusSupportType = 2
	Route_REQUIRED   Route_OmnibusSupportType = 3
)

// Enum value maps for Route_OmnibusSupportType.
var (
	Route_OmnibusSupportType_name = map[int32]string{
		1: "PROHIBITED",
		2: "ALLOWED",
		3: "REQUIRED",
	}
	Route_OmnibusSupportType_value = map[string]int32{
		"PROHIBITED": 1,
		"ALLOWED":    2,
		"REQUIRED":   3,
	}
)

func (x Route_OmnibusSupportType) Enum() *Route_OmnibusSupportType {
	p := new(Route_OmnibusSupportType)
	*p = x
	return p
}

func (x Route_OmnibusSupportType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Route_OmnibusSupportType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_traderouting_1_proto_enumTypes[33].Descriptor()
}

func (Route_OmnibusSupportType) Type() protoreflect.EnumType {
	return &file_proto_traderouting_1_proto_enumTypes[33]
}

func (x Route_OmnibusSupportType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Route_OmnibusSupportType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Route_OmnibusSupportType(num)
	return nil
}

// Deprecated: Use Route_OmnibusSupportType.Descriptor instead.
func (Route_OmnibusSupportType) EnumDescriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{134, 0}
}

// Request related to trade routing.
// Only one optional field is expected.
type TradeRoutingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of a request.
	Id *uint32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// Request related to trade routing accounts.
	AccountScopeRequest *AccountScopeRequest `protobuf:"bytes,2,opt,name=account_scope_request,json=accountScopeRequest" json:"account_scope_request,omitempty"`
	// Request related to trade routing orders.
	OrderScopeRequest *OrderScopeRequest `protobuf:"bytes,3,opt,name=order_scope_request,json=orderScopeRequest" json:"order_scope_request,omitempty"`
	// Get a list of related to trade routing lookup properties.
	// Lookup property types are defined in TradeRoutingLookupPropertyType enum.
	LookupPropertyListRequest *LookupPropertyListRequest `protobuf:"bytes,4,opt,name=lookup_property_list_request,json=lookupPropertyListRequest" json:"lookup_property_list_request,omitempty"`
}

func (x *TradeRoutingRequest) Reset() {
	*x = TradeRoutingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeRoutingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeRoutingRequest) ProtoMessage() {}

func (x *TradeRoutingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeRoutingRequest.ProtoReflect.Descriptor instead.
func (*TradeRoutingRequest) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{0}
}

func (x *TradeRoutingRequest) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *TradeRoutingRequest) GetAccountScopeRequest() *AccountScopeRequest {
	if x != nil {
		return x.AccountScopeRequest
	}
	return nil
}

func (x *TradeRoutingRequest) GetOrderScopeRequest() *OrderScopeRequest {
	if x != nil {
		return x.OrderScopeRequest
	}
	return nil
}

func (x *TradeRoutingRequest) GetLookupPropertyListRequest() *LookupPropertyListRequest {
	if x != nil {
		return x.LookupPropertyListRequest
	}
	return nil
}

// Request related to trade routing accounts.
// Only one optional field is expected.
type AccountScopeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Get information about an account.
	AccountInfoRequest *AccountInfoRequest `protobuf:"bytes,1,opt,name=account_info_request,json=accountInfoRequest" json:"account_info_request,omitempty"`
	// Get balance records for an account.
	BalanceRecordsRequest *BalanceRecordsRequest `protobuf:"bytes,2,opt,name=balance_records_request,json=balanceRecordsRequest" json:"balance_records_request,omitempty"`
	// Create new balance record.
	CreateBalanceRecord *CreateBalanceRecord `protobuf:"bytes,3,opt,name=create_balance_record,json=createBalanceRecord" json:"create_balance_record,omitempty"`
	// Update existing balance record.
	UpdateBalanceRecord *UpdateBalanceRecord `protobuf:"bytes,4,opt,name=update_balance_record,json=updateBalanceRecord" json:"update_balance_record,omitempty"`
	// Get account risk parameters.
	AccountRiskParametersRequest *AccountRiskParametersRequest `protobuf:"bytes,5,opt,name=account_risk_parameters_request,json=accountRiskParametersRequest" json:"account_risk_parameters_request,omitempty"`
	// Update account's risk parameters.
	// [obsolete] Use UpdateAccountRiskParameters instead.
	//
	// Deprecated: Do not use.
	ObsoleteUpdateRiskParameters *UpdateRiskParameters `protobuf:"bytes,6,opt,name=obsolete_update_risk_parameters,json=obsoleteUpdateRiskParameters" json:"obsolete_update_risk_parameters,omitempty"`
	// Search account information.
	AccountSearchRequest *AccountSearchRequest `protobuf:"bytes,7,opt,name=account_search_request,json=accountSearchRequest" json:"account_search_request,omitempty"`
	// Get enabled account's routes.
	AccountRouteListRequest *AccountRouteListRequest `protobuf:"bytes,8,opt,name=account_route_list_request,json=accountRouteListRequest" json:"account_route_list_request,omitempty"`
	// Get account to user authorization list.
	AccountUserAuthorizationListRequest *AccountUserAuthorizationListRequest `protobuf:"bytes,9,opt,name=account_user_authorization_list_request,json=accountUserAuthorizationListRequest" json:"account_user_authorization_list_request,omitempty"`
	// Get account settings.
	AccountSettingsRequest *AccountSettingsRequest `protobuf:"bytes,10,opt,name=account_settings_request,json=accountSettingsRequest" json:"account_settings_request,omitempty"`
	// Get list of exchange groups and commodities that are potentially available for the account.
	// List of enabled exchange groups and commodities along with other settings is requested by account_market_limits_request.
	AccountAvailableExchangeGroupsRequest *AccountAvailableExchangeGroupsRequest `protobuf:"bytes,11,opt,name=account_available_exchange_groups_request,json=accountAvailableExchangeGroupsRequest" json:"account_available_exchange_groups_request,omitempty"`
	// Get account market limits.
	// Account risk parameters with limits enforcement settings is requested by account_risk_parameters_request.
	AccountMarketLimitsRequest *AccountMarketLimitsRequest `protobuf:"bytes,12,opt,name=account_market_limits_request,json=accountMarketLimitsRequest" json:"account_market_limits_request,omitempty"`
	// Get account positions.
	AccountPositionsRequest *AccountPositionsRequest `protobuf:"bytes,13,opt,name=account_positions_request,json=accountPositionsRequest" json:"account_positions_request,omitempty"`
	// Get account equity.
	AccountEquityRequest *AccountEquityRequest `protobuf:"bytes,14,opt,name=account_equity_request,json=accountEquityRequest" json:"account_equity_request,omitempty"`
	// Get current account collateral (margin details).
	AccountCollateralRequest *AccountCollateralRequest `protobuf:"bytes,15,opt,name=account_collateral_request,json=accountCollateralRequest" json:"account_collateral_request,omitempty"`
	// Create new account and clone configuration from the existing one.
	CloneAccount *CloneAccount `protobuf:"bytes,16,opt,name=clone_account,json=cloneAccount" json:"clone_account,omitempty"`
	// Update general information of account.
	UpdateAccount *UpdateAccount `protobuf:"bytes,17,opt,name=update_account,json=updateAccount" json:"update_account,omitempty"`
	// Update specific account settings.
	UpdateAccountSettings *UpdateAccountSettings `protobuf:"bytes,18,opt,name=update_account_settings,json=updateAccountSettings" json:"update_account_settings,omitempty"`
	// Get account group information.
	AccountGroupRequest *AccountGroupRequest `protobuf:"bytes,19,opt,name=account_group_request,json=accountGroupRequest" json:"account_group_request,omitempty"`
	// Update account risk parameters.
	UpdateAccountRiskParameters *UpdateAccountRiskParameters `protobuf:"bytes,20,opt,name=update_account_risk_parameters,json=updateAccountRiskParameters" json:"update_account_risk_parameters,omitempty"`
	// Request of all routes available for the account.
	RouteListRequest *RouteListRequest `protobuf:"bytes,21,opt,name=route_list_request,json=routeListRequest" json:"route_list_request,omitempty"`
	// Update account routes list.
	UpdateAccountRouteList *UpdateAccountRouteList `protobuf:"bytes,22,opt,name=update_account_route_list,json=updateAccountRouteList" json:"update_account_route_list,omitempty"`
	// Update account market limits.
	UpdateAccountMarketLimits *UpdateAccountMarketLimits `protobuf:"bytes,23,opt,name=update_account_market_limits,json=updateAccountMarketLimits" json:"update_account_market_limits,omitempty"`
	// Create account.
	CreateAccount *CreateAccount `protobuf:"bytes,24,opt,name=create_account,json=createAccount" json:"create_account,omitempty"`
	// [obsolete] This operation is no longer supported.
	//
	// Deprecated: Do not use.
	ObsoleteAccountClusterRequest *AccountClusterRequest `protobuf:"bytes,25,opt,name=obsolete_account_cluster_request,json=obsoleteAccountClusterRequest" json:"obsolete_account_cluster_request,omitempty"`
	// [obsolete] This operation is no longer supported.
	//
	// Deprecated: Do not use.
	ObsoleteCreateAccountCluster *CreateAccountCluster `protobuf:"bytes,26,opt,name=obsolete_create_account_cluster,json=obsoleteCreateAccountCluster" json:"obsolete_create_account_cluster,omitempty"`
	// [obsolete] This operation is no longer supported.
	//
	// Deprecated: Do not use.
	ObsoleteUpdateAccountCluster *UpdateAccountCluster `protobuf:"bytes,27,opt,name=obsolete_update_account_cluster,json=obsoleteUpdateAccountCluster" json:"obsolete_update_account_cluster,omitempty"`
	// [obsolete] This operation is no longer supported.
	//
	// Deprecated: Do not use.
	ObsoleteUpdateAccountClusterPriceOffsets *UpdateAccountClusterPriceOffsets `protobuf:"bytes,28,opt,name=obsolete_update_account_cluster_price_offsets,json=obsoleteUpdateAccountClusterPriceOffsets" json:"obsolete_update_account_cluster_price_offsets,omitempty"`
	// Restore account.
	RestoreAccount *RestoreAccount `protobuf:"bytes,29,opt,name=restore_account,json=restoreAccount" json:"restore_account,omitempty"`
	// Account type overrides per exchange list.
	AccountTypeOverrideListRequest *AccountTypeOverrideListRequest `protobuf:"bytes,30,opt,name=account_type_override_list_request,json=accountTypeOverrideListRequest" json:"account_type_override_list_request,omitempty"`
	// Update account type overrides list.
	UpdateAccountTypeOverrideList *UpdateAccountTypeOverrideList `protobuf:"bytes,31,opt,name=update_account_type_override_list,json=updateAccountTypeOverrideList" json:"update_account_type_override_list,omitempty"`
	// Update account to user authorization list.
	UpdateAccountUserAuthorizationList *UpdateAccountUserAuthorizationList `protobuf:"bytes,32,opt,name=update_account_user_authorization_list,json=updateAccountUserAuthorizationList" json:"update_account_user_authorization_list,omitempty"`
	// Remove account.
	RemoveAccount *RemoveAccount `protobuf:"bytes,33,opt,name=remove_account,json=removeAccount" json:"remove_account,omitempty"`
	// Gets available to account list of Service Groups according to enabled routes.
	AccountAvailableServiceGroupListRequest *AccountAvailableServiceGroupListRequest `protobuf:"bytes,34,opt,name=account_available_service_group_list_request,json=accountAvailableServiceGroupListRequest" json:"account_available_service_group_list_request,omitempty"`
	// Gets account's enabled Service Groups.
	AccountServiceGroupListRequest *AccountServiceGroupListRequest `protobuf:"bytes,35,opt,name=account_service_group_list_request,json=accountServiceGroupListRequest" json:"account_service_group_list_request,omitempty"`
	// Updates list of account's enabled Service Groups.
	UpdateAccountServiceGroupList *UpdateAccountServiceGroupList `protobuf:"bytes,36,opt,name=update_account_service_group_list,json=updateAccountServiceGroupList" json:"update_account_service_group_list,omitempty"`
	// Gets billable exchanges available to the current admin login.
	BillableExchangeListRequest *BillableExchangeListRequest `protobuf:"bytes,37,opt,name=billable_exchange_list_request,json=billableExchangeListRequest" json:"billable_exchange_list_request,omitempty"`
	// Creates new account group with master and sub accounts.
	CreateAccountGroup *CreateAccountGroup `protobuf:"bytes,38,opt,name=create_account_group,json=createAccountGroup" json:"create_account_group,omitempty"`
	// Updates existing account group.
	UpdateAccountGroup *UpdateAccountGroup `protobuf:"bytes,39,opt,name=update_account_group,json=updateAccountGroup" json:"update_account_group,omitempty"`
	// Removes existing account group.
	RemoveAccountGroup *RemoveAccountGroup `protobuf:"bytes,40,opt,name=remove_account_group,json=removeAccountGroup" json:"remove_account_group,omitempty"`
}

func (x *AccountScopeRequest) Reset() {
	*x = AccountScopeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountScopeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountScopeRequest) ProtoMessage() {}

func (x *AccountScopeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountScopeRequest.ProtoReflect.Descriptor instead.
func (*AccountScopeRequest) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{1}
}

func (x *AccountScopeRequest) GetAccountInfoRequest() *AccountInfoRequest {
	if x != nil {
		return x.AccountInfoRequest
	}
	return nil
}

func (x *AccountScopeRequest) GetBalanceRecordsRequest() *BalanceRecordsRequest {
	if x != nil {
		return x.BalanceRecordsRequest
	}
	return nil
}

func (x *AccountScopeRequest) GetCreateBalanceRecord() *CreateBalanceRecord {
	if x != nil {
		return x.CreateBalanceRecord
	}
	return nil
}

func (x *AccountScopeRequest) GetUpdateBalanceRecord() *UpdateBalanceRecord {
	if x != nil {
		return x.UpdateBalanceRecord
	}
	return nil
}

func (x *AccountScopeRequest) GetAccountRiskParametersRequest() *AccountRiskParametersRequest {
	if x != nil {
		return x.AccountRiskParametersRequest
	}
	return nil
}

// Deprecated: Do not use.
func (x *AccountScopeRequest) GetObsoleteUpdateRiskParameters() *UpdateRiskParameters {
	if x != nil {
		return x.ObsoleteUpdateRiskParameters
	}
	return nil
}

func (x *AccountScopeRequest) GetAccountSearchRequest() *AccountSearchRequest {
	if x != nil {
		return x.AccountSearchRequest
	}
	return nil
}

func (x *AccountScopeRequest) GetAccountRouteListRequest() *AccountRouteListRequest {
	if x != nil {
		return x.AccountRouteListRequest
	}
	return nil
}

func (x *AccountScopeRequest) GetAccountUserAuthorizationListRequest() *AccountUserAuthorizationListRequest {
	if x != nil {
		return x.AccountUserAuthorizationListRequest
	}
	return nil
}

func (x *AccountScopeRequest) GetAccountSettingsRequest() *AccountSettingsRequest {
	if x != nil {
		return x.AccountSettingsRequest
	}
	return nil
}

func (x *AccountScopeRequest) GetAccountAvailableExchangeGroupsRequest() *AccountAvailableExchangeGroupsRequest {
	if x != nil {
		return x.AccountAvailableExchangeGroupsRequest
	}
	return nil
}

func (x *AccountScopeRequest) GetAccountMarketLimitsRequest() *AccountMarketLimitsRequest {
	if x != nil {
		return x.AccountMarketLimitsRequest
	}
	return nil
}

func (x *AccountScopeRequest) GetAccountPositionsRequest() *AccountPositionsRequest {
	if x != nil {
		return x.AccountPositionsRequest
	}
	return nil
}

func (x *AccountScopeRequest) GetAccountEquityRequest() *AccountEquityRequest {
	if x != nil {
		return x.AccountEquityRequest
	}
	return nil
}

func (x *AccountScopeRequest) GetAccountCollateralRequest() *AccountCollateralRequest {
	if x != nil {
		return x.AccountCollateralRequest
	}
	return nil
}

func (x *AccountScopeRequest) GetCloneAccount() *CloneAccount {
	if x != nil {
		return x.CloneAccount
	}
	return nil
}

func (x *AccountScopeRequest) GetUpdateAccount() *UpdateAccount {
	if x != nil {
		return x.UpdateAccount
	}
	return nil
}

func (x *AccountScopeRequest) GetUpdateAccountSettings() *UpdateAccountSettings {
	if x != nil {
		return x.UpdateAccountSettings
	}
	return nil
}

func (x *AccountScopeRequest) GetAccountGroupRequest() *AccountGroupRequest {
	if x != nil {
		return x.AccountGroupRequest
	}
	return nil
}

func (x *AccountScopeRequest) GetUpdateAccountRiskParameters() *UpdateAccountRiskParameters {
	if x != nil {
		return x.UpdateAccountRiskParameters
	}
	return nil
}

func (x *AccountScopeRequest) GetRouteListRequest() *RouteListRequest {
	if x != nil {
		return x.RouteListRequest
	}
	return nil
}

func (x *AccountScopeRequest) GetUpdateAccountRouteList() *UpdateAccountRouteList {
	if x != nil {
		return x.UpdateAccountRouteList
	}
	return nil
}

func (x *AccountScopeRequest) GetUpdateAccountMarketLimits() *UpdateAccountMarketLimits {
	if x != nil {
		return x.UpdateAccountMarketLimits
	}
	return nil
}

func (x *AccountScopeRequest) GetCreateAccount() *CreateAccount {
	if x != nil {
		return x.CreateAccount
	}
	return nil
}

// Deprecated: Do not use.
func (x *AccountScopeRequest) GetObsoleteAccountClusterRequest() *AccountClusterRequest {
	if x != nil {
		return x.ObsoleteAccountClusterRequest
	}
	return nil
}

// Deprecated: Do not use.
func (x *AccountScopeRequest) GetObsoleteCreateAccountCluster() *CreateAccountCluster {
	if x != nil {
		return x.ObsoleteCreateAccountCluster
	}
	return nil
}

// Deprecated: Do not use.
func (x *AccountScopeRequest) GetObsoleteUpdateAccountCluster() *UpdateAccountCluster {
	if x != nil {
		return x.ObsoleteUpdateAccountCluster
	}
	return nil
}

// Deprecated: Do not use.
func (x *AccountScopeRequest) GetObsoleteUpdateAccountClusterPriceOffsets() *UpdateAccountClusterPriceOffsets {
	if x != nil {
		return x.ObsoleteUpdateAccountClusterPriceOffsets
	}
	return nil
}

func (x *AccountScopeRequest) GetRestoreAccount() *RestoreAccount {
	if x != nil {
		return x.RestoreAccount
	}
	return nil
}

func (x *AccountScopeRequest) GetAccountTypeOverrideListRequest() *AccountTypeOverrideListRequest {
	if x != nil {
		return x.AccountTypeOverrideListRequest
	}
	return nil
}

func (x *AccountScopeRequest) GetUpdateAccountTypeOverrideList() *UpdateAccountTypeOverrideList {
	if x != nil {
		return x.UpdateAccountTypeOverrideList
	}
	return nil
}

func (x *AccountScopeRequest) GetUpdateAccountUserAuthorizationList() *UpdateAccountUserAuthorizationList {
	if x != nil {
		return x.UpdateAccountUserAuthorizationList
	}
	return nil
}

func (x *AccountScopeRequest) GetRemoveAccount() *RemoveAccount {
	if x != nil {
		return x.RemoveAccount
	}
	return nil
}

func (x *AccountScopeRequest) GetAccountAvailableServiceGroupListRequest() *AccountAvailableServiceGroupListRequest {
	if x != nil {
		return x.AccountAvailableServiceGroupListRequest
	}
	return nil
}

func (x *AccountScopeRequest) GetAccountServiceGroupListRequest() *AccountServiceGroupListRequest {
	if x != nil {
		return x.AccountServiceGroupListRequest
	}
	return nil
}

func (x *AccountScopeRequest) GetUpdateAccountServiceGroupList() *UpdateAccountServiceGroupList {
	if x != nil {
		return x.UpdateAccountServiceGroupList
	}
	return nil
}

func (x *AccountScopeRequest) GetBillableExchangeListRequest() *BillableExchangeListRequest {
	if x != nil {
		return x.BillableExchangeListRequest
	}
	return nil
}

func (x *AccountScopeRequest) GetCreateAccountGroup() *CreateAccountGroup {
	if x != nil {
		return x.CreateAccountGroup
	}
	return nil
}

func (x *AccountScopeRequest) GetUpdateAccountGroup() *UpdateAccountGroup {
	if x != nil {
		return x.UpdateAccountGroup
	}
	return nil
}

func (x *AccountScopeRequest) GetRemoveAccountGroup() *RemoveAccountGroup {
	if x != nil {
		return x.RemoveAccountGroup
	}
	return nil
}

// Request related to trade routing orders.
// Only one optional field is expected.
type OrderScopeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Get order details.
	OrderDetailsRequest *OrderDetailsRequest `protobuf:"bytes,1,opt,name=order_details_request,json=orderDetailsRequest" json:"order_details_request,omitempty"`
	// Add fill to the existing order.
	AddFill *AddFill `protobuf:"bytes,2,opt,name=add_fill,json=addFill" json:"add_fill,omitempty"`
	// Create new external order.
	CreateExternalOrder *CreateExternalOrder `protobuf:"bytes,3,opt,name=create_external_order,json=createExternalOrder" json:"create_external_order,omitempty"`
	// Search order information.
	OrderSearchRequest *OrderSearchRequest `protobuf:"bytes,4,opt,name=order_search_request,json=orderSearchRequest" json:"order_search_request,omitempty"`
	// Requests tree with related order chains for synthetic or synthetic strategy orders.
	RelatedOrderTreeRequest *RelatedOrderTreeRequest `protobuf:"bytes,5,opt,name=related_order_tree_request,json=relatedOrderTreeRequest" json:"related_order_tree_request,omitempty"`
	// Compound orders tree.
	CompoundOrderTreeRequest *CompoundOrderTreeRequest `protobuf:"bytes,6,opt,name=compound_order_tree_request,json=compoundOrderTreeRequest" json:"compound_order_tree_request,omitempty"`
	// Order strategy tree, describing synthetic strategy.
	SyntheticStrategyTreeRequest *SyntheticStrategyTreeRequest `protobuf:"bytes,7,opt,name=synthetic_strategy_tree_request,json=syntheticStrategyTreeRequest" json:"synthetic_strategy_tree_request,omitempty"`
	// Cancel order operation.
	CancelOrder *CancelOrder `protobuf:"bytes,8,opt,name=cancel_order,json=cancelOrder" json:"cancel_order,omitempty"`
	// Reflect order as canceled without sending real cancel request to exchange.
	ReflectAsCanceledOrder *ReflectAsCanceledOrder `protobuf:"bytes,9,opt,name=reflect_as_canceled_order,json=reflectAsCanceledOrder" json:"reflect_as_canceled_order,omitempty"`
	// Cancel whole tree of compound orders.
	CancelCompoundOrderTree *CancelCompoundOrderTree `protobuf:"bytes,10,opt,name=cancel_compound_order_tree,json=cancelCompoundOrderTree" json:"cancel_compound_order_tree,omitempty"`
}

func (x *OrderScopeRequest) Reset() {
	*x = OrderScopeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderScopeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderScopeRequest) ProtoMessage() {}

func (x *OrderScopeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderScopeRequest.ProtoReflect.Descriptor instead.
func (*OrderScopeRequest) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{2}
}

func (x *OrderScopeRequest) GetOrderDetailsRequest() *OrderDetailsRequest {
	if x != nil {
		return x.OrderDetailsRequest
	}
	return nil
}

func (x *OrderScopeRequest) GetAddFill() *AddFill {
	if x != nil {
		return x.AddFill
	}
	return nil
}

func (x *OrderScopeRequest) GetCreateExternalOrder() *CreateExternalOrder {
	if x != nil {
		return x.CreateExternalOrder
	}
	return nil
}

func (x *OrderScopeRequest) GetOrderSearchRequest() *OrderSearchRequest {
	if x != nil {
		return x.OrderSearchRequest
	}
	return nil
}

func (x *OrderScopeRequest) GetRelatedOrderTreeRequest() *RelatedOrderTreeRequest {
	if x != nil {
		return x.RelatedOrderTreeRequest
	}
	return nil
}

func (x *OrderScopeRequest) GetCompoundOrderTreeRequest() *CompoundOrderTreeRequest {
	if x != nil {
		return x.CompoundOrderTreeRequest
	}
	return nil
}

func (x *OrderScopeRequest) GetSyntheticStrategyTreeRequest() *SyntheticStrategyTreeRequest {
	if x != nil {
		return x.SyntheticStrategyTreeRequest
	}
	return nil
}

func (x *OrderScopeRequest) GetCancelOrder() *CancelOrder {
	if x != nil {
		return x.CancelOrder
	}
	return nil
}

func (x *OrderScopeRequest) GetReflectAsCanceledOrder() *ReflectAsCanceledOrder {
	if x != nil {
		return x.ReflectAsCanceledOrder
	}
	return nil
}

func (x *OrderScopeRequest) GetCancelCompoundOrderTree() *CancelCompoundOrderTree {
	if x != nil {
		return x.CancelCompoundOrderTree
	}
	return nil
}

// Order details request message.
// Get information about an order chain.
type OrderDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the account that was used to place the order.
	// Mutually exclusive with trade_location_id field.
	AccountId *int32 `protobuf:"zigzag32,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// [required] Server order identifier (one of order ID within order chain).
	OrderId *string `protobuf:"bytes,2,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	// Trade location.
	// Mutually exclusive with account_id field.
	TradeLocationId *string `protobuf:"bytes,3,opt,name=trade_location_id,json=tradeLocationId" json:"trade_location_id,omitempty"`
	// Optionally restrict order requests in the chain by returning 'top' ones of the last submitted.
	OrderRequestsTop *uint32 `protobuf:"varint,4,opt,name=order_requests_top,json=orderRequestsTop" json:"order_requests_top,omitempty"`
}

func (x *OrderDetailsRequest) Reset() {
	*x = OrderDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderDetailsRequest) ProtoMessage() {}

func (x *OrderDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderDetailsRequest.ProtoReflect.Descriptor instead.
func (*OrderDetailsRequest) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{3}
}

func (x *OrderDetailsRequest) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *OrderDetailsRequest) GetOrderId() string {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return ""
}

func (x *OrderDetailsRequest) GetTradeLocationId() string {
	if x != nil && x.TradeLocationId != nil {
		return *x.TradeLocationId
	}
	return ""
}

func (x *OrderDetailsRequest) GetOrderRequestsTop() uint32 {
	if x != nil && x.OrderRequestsTop != nil {
		return *x.OrderRequestsTop
	}
	return 0
}

// Add fill message.
// Fills may only be added to single leg (outright) orders.
// Server automatically creates an order and matching leg fill.
type AddFill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of a trade routing account that is used to add a fill.
	AccountId *int32 `protobuf:"zigzag32,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// [required] Order identifier assigned by server after last modification.
	OrderId *string `protobuf:"bytes,2,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	// [required] Quantity of bought or sold lots depending on order side.
	Quantity *uint32 `protobuf:"varint,3,opt,name=quantity" json:"quantity,omitempty"`
	// [required] Price at which the lots were bought or sold.
	// Correct price format.
	// Mutually exclusive with display_price field.
	Price *float64 `protobuf:"fixed64,4,opt,name=price" json:"price,omitempty"`
	// UTC time of the fill (offset in milliseconds from 01.01.1970).
	FillUtcTime *int64 `protobuf:"zigzag64,5,opt,name=fill_utc_time,json=fillUtcTime" json:"fill_utc_time,omitempty"`
	// Flag that trade was aggressive (Fixed Income specific order modifier; true by default).
	IsAggressive *bool `protobuf:"varint,6,opt,name=is_aggressive,json=isAggressive" json:"is_aggressive,omitempty"`
	// [required] Price of the single fill to apply to the order.
	// Display price format for the order's contract.
	// Mutually exclusive with price field.
	DisplayPrice *int64 `protobuf:"zigzag64,7,opt,name=display_price,json=displayPrice" json:"display_price,omitempty"`
	// Order fill open/close type.
	// This field is associated with OrderChain.OpenCloseType enum type.
	OpenCloseType *uint32 `protobuf:"varint,8,opt,name=open_close_type,json=openCloseType" json:"open_close_type,omitempty"`
	// Order fill speculation type.
	// This field is associated with OrderChain.SpeculationType enum type.
	SpeculationType *uint32 `protobuf:"varint,9,opt,name=speculation_type,json=speculationType" json:"speculation_type,omitempty"`
	// Trade location.
	TradeLocationId *string `protobuf:"bytes,10,opt,name=trade_location_id,json=tradeLocationId" json:"trade_location_id,omitempty"`
}

func (x *AddFill) Reset() {
	*x = AddFill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFill) ProtoMessage() {}

func (x *AddFill) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFill.ProtoReflect.Descriptor instead.
func (*AddFill) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{4}
}

func (x *AddFill) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *AddFill) GetOrderId() string {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return ""
}

func (x *AddFill) GetQuantity() uint32 {
	if x != nil && x.Quantity != nil {
		return *x.Quantity
	}
	return 0
}

func (x *AddFill) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *AddFill) GetFillUtcTime() int64 {
	if x != nil && x.FillUtcTime != nil {
		return *x.FillUtcTime
	}
	return 0
}

func (x *AddFill) GetIsAggressive() bool {
	if x != nil && x.IsAggressive != nil {
		return *x.IsAggressive
	}
	return false
}

func (x *AddFill) GetDisplayPrice() int64 {
	if x != nil && x.DisplayPrice != nil {
		return *x.DisplayPrice
	}
	return 0
}

func (x *AddFill) GetOpenCloseType() uint32 {
	if x != nil && x.OpenCloseType != nil {
		return *x.OpenCloseType
	}
	return 0
}

func (x *AddFill) GetSpeculationType() uint32 {
	if x != nil && x.SpeculationType != nil {
		return *x.SpeculationType
	}
	return 0
}

func (x *AddFill) GetTradeLocationId() string {
	if x != nil && x.TradeLocationId != nil {
		return *x.TradeLocationId
	}
	return ""
}

// Create external order and fill message.
// Only single leg (outright) orders are supported.
// Server automatically creates an order and matching leg fill.
type CreateExternalOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Account ID.
	AccountId *int32 `protobuf:"zigzag32,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// [required] User ID.
	UserId *string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// [required] Full contract symbol.
	ContractSymbol *string `protobuf:"bytes,3,opt,name=contract_symbol,json=contractSymbol" json:"contract_symbol,omitempty"`
	// Order side.
	// [required] This field is associated with OrderChain.Side enum type.
	Side *uint32 `protobuf:"varint,4,opt,name=side" json:"side,omitempty"`
	// Order type.
	// [required] This field is associated with OrderChain.OrderType enum type.
	OrderType *uint32 `protobuf:"varint,5,opt,name=order_type,json=orderType" json:"order_type,omitempty"`
	// Limit price of the order (required for limit and stop-limit orders).
	// Correct price format.
	// Mutually exclusive with display_limit_price field.
	LimitPrice *float64 `protobuf:"fixed64,6,opt,name=limit_price,json=limitPrice" json:"limit_price,omitempty"`
	// Stop price of the order (required for stop and stop-limit orders).
	// Correct price format.
	// Mutually exclusive with display_stop_price field.
	StopPrice *float64 `protobuf:"fixed64,7,opt,name=stop_price,json=stopPrice" json:"stop_price,omitempty"`
	// [required] Quantity of the single fill to apply to the order.
	FillQuantity *uint32 `protobuf:"varint,8,opt,name=fill_quantity,json=fillQuantity" json:"fill_quantity,omitempty"`
	// [required] Price of the single fill to apply to the order.
	// CQG correct price format for the order's contract.
	// Mutually exclusive with display_fill_price field.
	FillPrice *float64 `protobuf:"fixed64,9,opt,name=fill_price,json=fillPrice" json:"fill_price,omitempty"`
	// UTC time of the fill.
	FillUtcTime *int64 `protobuf:"zigzag64,10,opt,name=fill_utc_time,json=fillUtcTime" json:"fill_utc_time,omitempty"`
	// Limit price of the order (required for limit and stop-limit orders).
	// Display price format.
	// Mutually exclusive with limit_price field.
	DisplayLimitPrice *int64 `protobuf:"zigzag64,11,opt,name=display_limit_price,json=displayLimitPrice" json:"display_limit_price,omitempty"`
	// Stop price of the order (required for stop and stop-limit orders).
	// Display price format.
	// Mutually exclusive with stop_price field.
	DisplayStopPrice *int64 `protobuf:"zigzag64,12,opt,name=display_stop_price,json=displayStopPrice" json:"display_stop_price,omitempty"`
	// [required] Price of the single fill to apply to the order.
	// Display price format for the order's contract.
	// Mutually exclusive with fill_price field.
	DisplayFillPrice *int64 `protobuf:"zigzag64,13,opt,name=display_fill_price,json=displayFillPrice" json:"display_fill_price,omitempty"`
	// Order open/close type.
	// This field is associated with OrderChain.OpenCloseType enum type.
	OpenCloseType *uint32 `protobuf:"varint,14,opt,name=open_close_type,json=openCloseType" json:"open_close_type,omitempty"`
	// Order speculation type.
	// This field is associated with OrderChain.SpeculationType enum type.
	SpeculationType *uint32 `protobuf:"varint,15,opt,name=speculation_type,json=speculationType" json:"speculation_type,omitempty"`
	// Flag that trade was aggressive (null by default).
	FillIsAggressive *bool `protobuf:"varint,16,opt,name=fill_is_aggressive,json=fillIsAggressive" json:"fill_is_aggressive,omitempty"`
}

func (x *CreateExternalOrder) Reset() {
	*x = CreateExternalOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateExternalOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExternalOrder) ProtoMessage() {}

func (x *CreateExternalOrder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExternalOrder.ProtoReflect.Descriptor instead.
func (*CreateExternalOrder) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{5}
}

func (x *CreateExternalOrder) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CreateExternalOrder) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *CreateExternalOrder) GetContractSymbol() string {
	if x != nil && x.ContractSymbol != nil {
		return *x.ContractSymbol
	}
	return ""
}

func (x *CreateExternalOrder) GetSide() uint32 {
	if x != nil && x.Side != nil {
		return *x.Side
	}
	return 0
}

func (x *CreateExternalOrder) GetOrderType() uint32 {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return 0
}

func (x *CreateExternalOrder) GetLimitPrice() float64 {
	if x != nil && x.LimitPrice != nil {
		return *x.LimitPrice
	}
	return 0
}

func (x *CreateExternalOrder) GetStopPrice() float64 {
	if x != nil && x.StopPrice != nil {
		return *x.StopPrice
	}
	return 0
}

func (x *CreateExternalOrder) GetFillQuantity() uint32 {
	if x != nil && x.FillQuantity != nil {
		return *x.FillQuantity
	}
	return 0
}

func (x *CreateExternalOrder) GetFillPrice() float64 {
	if x != nil && x.FillPrice != nil {
		return *x.FillPrice
	}
	return 0
}

func (x *CreateExternalOrder) GetFillUtcTime() int64 {
	if x != nil && x.FillUtcTime != nil {
		return *x.FillUtcTime
	}
	return 0
}

func (x *CreateExternalOrder) GetDisplayLimitPrice() int64 {
	if x != nil && x.DisplayLimitPrice != nil {
		return *x.DisplayLimitPrice
	}
	return 0
}

func (x *CreateExternalOrder) GetDisplayStopPrice() int64 {
	if x != nil && x.DisplayStopPrice != nil {
		return *x.DisplayStopPrice
	}
	return 0
}

func (x *CreateExternalOrder) GetDisplayFillPrice() int64 {
	if x != nil && x.DisplayFillPrice != nil {
		return *x.DisplayFillPrice
	}
	return 0
}

func (x *CreateExternalOrder) GetOpenCloseType() uint32 {
	if x != nil && x.OpenCloseType != nil {
		return *x.OpenCloseType
	}
	return 0
}

func (x *CreateExternalOrder) GetSpeculationType() uint32 {
	if x != nil && x.SpeculationType != nil {
		return *x.SpeculationType
	}
	return 0
}

func (x *CreateExternalOrder) GetFillIsAggressive() bool {
	if x != nil && x.FillIsAggressive != nil {
		return *x.FillIsAggressive
	}
	return false
}

// Order search request message.
// Server returns a list of found order records.
type OrderSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [obsolete] Text to search.
	//
	// Deprecated: Do not use.
	ObsoleteText *string `protobuf:"bytes,1,opt,name=obsolete_text,json=obsoleteText" json:"obsolete_text,omitempty"`
	// [obsolete] List of search options.
	// This field is associated with SearchCriteria enum type.
	// Empty list means search by any possible options.
	//
	// Deprecated: Do not use.
	ObsoleteSearchCriteria []uint32 `protobuf:"varint,2,rep,name=obsolete_search_criteria,json=obsoleteSearchCriteria" json:"obsolete_search_criteria,omitempty"`
	// optionally restrict matched results by returning the first 'top' records.
	Top *uint32 `protobuf:"varint,3,opt,name=top" json:"top,omitempty"`
	// Trade location.
	TradeLocationId *string `protobuf:"bytes,4,opt,name=trade_location_id,json=tradeLocationId" json:"trade_location_id,omitempty"`
	// Archived orders only.
	Archived *bool `protobuf:"varint,5,opt,name=archived" json:"archived,omitempty"`
	// List of search options. Each option has its own search text, criteria and matching rule.
	SearchOptions []*SearchOption `protobuf:"bytes,6,rep,name=search_options,json=searchOptions" json:"search_options,omitempty"`
	// Indicates, whether all criteria must match at once.
	// By default any criteria must match.
	AllMatchMode *bool `protobuf:"varint,7,opt,name=all_match_mode,json=allMatchMode,def=0" json:"all_match_mode,omitempty"`
}

// Default values for OrderSearchRequest fields.
const (
	Default_OrderSearchRequest_AllMatchMode = bool(false)
)

func (x *OrderSearchRequest) Reset() {
	*x = OrderSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderSearchRequest) ProtoMessage() {}

func (x *OrderSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderSearchRequest.ProtoReflect.Descriptor instead.
func (*OrderSearchRequest) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{6}
}

// Deprecated: Do not use.
func (x *OrderSearchRequest) GetObsoleteText() string {
	if x != nil && x.ObsoleteText != nil {
		return *x.ObsoleteText
	}
	return ""
}

// Deprecated: Do not use.
func (x *OrderSearchRequest) GetObsoleteSearchCriteria() []uint32 {
	if x != nil {
		return x.ObsoleteSearchCriteria
	}
	return nil
}

func (x *OrderSearchRequest) GetTop() uint32 {
	if x != nil && x.Top != nil {
		return *x.Top
	}
	return 0
}

func (x *OrderSearchRequest) GetTradeLocationId() string {
	if x != nil && x.TradeLocationId != nil {
		return *x.TradeLocationId
	}
	return ""
}

func (x *OrderSearchRequest) GetArchived() bool {
	if x != nil && x.Archived != nil {
		return *x.Archived
	}
	return false
}

func (x *OrderSearchRequest) GetSearchOptions() []*SearchOption {
	if x != nil {
		return x.SearchOptions
	}
	return nil
}

func (x *OrderSearchRequest) GetAllMatchMode() bool {
	if x != nil && x.AllMatchMode != nil {
		return *x.AllMatchMode
	}
	return Default_OrderSearchRequest_AllMatchMode
}

// Requests tree with related order chains for synthetic or synthetic strategy orders.
type RelatedOrderTreeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Identifier of any order chain in a tree.
	ChainOrderId *string `protobuf:"bytes,1,opt,name=chain_order_id,json=chainOrderId" json:"chain_order_id,omitempty"`
	// Trade location.
	TradeLocationId *string `protobuf:"bytes,2,opt,name=trade_location_id,json=tradeLocationId" json:"trade_location_id,omitempty"`
	// Optionally restrict order requests in the chains by returning 'top' ones of the last submitted.
	OrderRequestsTop *uint32 `protobuf:"varint,3,opt,name=order_requests_top,json=orderRequestsTop" json:"order_requests_top,omitempty"`
	// Optionally restrict matched results by returning the first 'top' records (sorted by leg path).
	Top *uint32 `protobuf:"varint,4,opt,name=top" json:"top,omitempty"`
}

func (x *RelatedOrderTreeRequest) Reset() {
	*x = RelatedOrderTreeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelatedOrderTreeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedOrderTreeRequest) ProtoMessage() {}

func (x *RelatedOrderTreeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedOrderTreeRequest.ProtoReflect.Descriptor instead.
func (*RelatedOrderTreeRequest) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{7}
}

func (x *RelatedOrderTreeRequest) GetChainOrderId() string {
	if x != nil && x.ChainOrderId != nil {
		return *x.ChainOrderId
	}
	return ""
}

func (x *RelatedOrderTreeRequest) GetTradeLocationId() string {
	if x != nil && x.TradeLocationId != nil {
		return *x.TradeLocationId
	}
	return ""
}

func (x *RelatedOrderTreeRequest) GetOrderRequestsTop() uint32 {
	if x != nil && x.OrderRequestsTop != nil {
		return *x.OrderRequestsTop
	}
	return 0
}

func (x *RelatedOrderTreeRequest) GetTop() uint32 {
	if x != nil && x.Top != nil {
		return *x.Top
	}
	return 0
}

// Compound orders tree.
type CompoundOrderTreeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Identifier of compound tree.
	CompoundTreeId *string `protobuf:"bytes,1,opt,name=compound_tree_id,json=compoundTreeId" json:"compound_tree_id,omitempty"`
	// Trade location.
	TradeLocationId *string `protobuf:"bytes,2,opt,name=trade_location_id,json=tradeLocationId" json:"trade_location_id,omitempty"`
	// Optionally restrict order requests in the chains by returning 'top' ones of the last submitted.
	OrderRequestsTop *uint32 `protobuf:"varint,3,opt,name=order_requests_top,json=orderRequestsTop" json:"order_requests_top,omitempty"`
	// optionally restrict matched results by returning the first 'top' records.
	Top *uint32 `protobuf:"varint,4,opt,name=top" json:"top,omitempty"`
}

func (x *CompoundOrderTreeRequest) Reset() {
	*x = CompoundOrderTreeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompoundOrderTreeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompoundOrderTreeRequest) ProtoMessage() {}

func (x *CompoundOrderTreeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompoundOrderTreeRequest.ProtoReflect.Descriptor instead.
func (*CompoundOrderTreeRequest) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{8}
}

func (x *CompoundOrderTreeRequest) GetCompoundTreeId() string {
	if x != nil && x.CompoundTreeId != nil {
		return *x.CompoundTreeId
	}
	return ""
}

func (x *CompoundOrderTreeRequest) GetTradeLocationId() string {
	if x != nil && x.TradeLocationId != nil {
		return *x.TradeLocationId
	}
	return ""
}

func (x *CompoundOrderTreeRequest) GetOrderRequestsTop() uint32 {
	if x != nil && x.OrderRequestsTop != nil {
		return *x.OrderRequestsTop
	}
	return 0
}

func (x *CompoundOrderTreeRequest) GetTop() uint32 {
	if x != nil && x.Top != nil {
		return *x.Top
	}
	return 0
}

// Order strategy tree, describing synthetic strategy.
type SyntheticStrategyTreeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Identifier of root synthetic strategy order chain.
	RootChainOrderId *string `protobuf:"bytes,1,opt,name=root_chain_order_id,json=rootChainOrderId" json:"root_chain_order_id,omitempty"`
	// Trade location.
	TradeLocationId *string `protobuf:"bytes,2,opt,name=trade_location_id,json=tradeLocationId" json:"trade_location_id,omitempty"`
}

func (x *SyntheticStrategyTreeRequest) Reset() {
	*x = SyntheticStrategyTreeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyntheticStrategyTreeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyntheticStrategyTreeRequest) ProtoMessage() {}

func (x *SyntheticStrategyTreeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyntheticStrategyTreeRequest.ProtoReflect.Descriptor instead.
func (*SyntheticStrategyTreeRequest) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{9}
}

func (x *SyntheticStrategyTreeRequest) GetRootChainOrderId() string {
	if x != nil && x.RootChainOrderId != nil {
		return *x.RootChainOrderId
	}
	return ""
}

func (x *SyntheticStrategyTreeRequest) GetTradeLocationId() string {
	if x != nil && x.TradeLocationId != nil {
		return *x.TradeLocationId
	}
	return ""
}

// Cancel order operation.
type CancelOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Chain order identifier.
	ChainOrderId *string `protobuf:"bytes,1,opt,name=chain_order_id,json=chainOrderId" json:"chain_order_id,omitempty"`
	// ID of the account that was used to place the order.
	// Mutually exclusive with trade_location_id field.
	AccountId *int32 `protobuf:"zigzag32,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Trade location.
	// Mutually exclusive with account_id field.
	TradeLocationId *string `protobuf:"bytes,3,opt,name=trade_location_id,json=tradeLocationId" json:"trade_location_id,omitempty"`
}

func (x *CancelOrder) Reset() {
	*x = CancelOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOrder) ProtoMessage() {}

func (x *CancelOrder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOrder.ProtoReflect.Descriptor instead.
func (*CancelOrder) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{10}
}

func (x *CancelOrder) GetChainOrderId() string {
	if x != nil && x.ChainOrderId != nil {
		return *x.ChainOrderId
	}
	return ""
}

func (x *CancelOrder) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CancelOrder) GetTradeLocationId() string {
	if x != nil && x.TradeLocationId != nil {
		return *x.TradeLocationId
	}
	return ""
}

// Reflect order as canceled without sending real cancel request to exchange.
type ReflectAsCanceledOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Chain order identifier.
	ChainOrderId *string `protobuf:"bytes,1,opt,name=chain_order_id,json=chainOrderId" json:"chain_order_id,omitempty"`
	// ID of the account that was used to place the order.
	// Mutually exclusive with trade_location_id field.
	AccountId *int32 `protobuf:"zigzag32,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Trade location.
	// Mutually exclusive with account_id field.
	TradeLocationId *string `protobuf:"bytes,3,opt,name=trade_location_id,json=tradeLocationId" json:"trade_location_id,omitempty"`
}

func (x *ReflectAsCanceledOrder) Reset() {
	*x = ReflectAsCanceledOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReflectAsCanceledOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReflectAsCanceledOrder) ProtoMessage() {}

func (x *ReflectAsCanceledOrder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReflectAsCanceledOrder.ProtoReflect.Descriptor instead.
func (*ReflectAsCanceledOrder) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{11}
}

func (x *ReflectAsCanceledOrder) GetChainOrderId() string {
	if x != nil && x.ChainOrderId != nil {
		return *x.ChainOrderId
	}
	return ""
}

func (x *ReflectAsCanceledOrder) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *ReflectAsCanceledOrder) GetTradeLocationId() string {
	if x != nil && x.TradeLocationId != nil {
		return *x.TradeLocationId
	}
	return ""
}

// Cancel whole tree of compound orders.
type CancelCompoundOrderTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Compound tree identifier.
	CompoundTreeId *string `protobuf:"bytes,1,opt,name=compound_tree_id,json=compoundTreeId" json:"compound_tree_id,omitempty"`
	// ID of the account that was used to place the tree.
	// Mutually exclusive with trade_location_id field.
	AccountId *int32 `protobuf:"zigzag32,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Trade location.
	// Mutually exclusive with account_id field.
	TradeLocationId *string `protobuf:"bytes,3,opt,name=trade_location_id,json=tradeLocationId" json:"trade_location_id,omitempty"`
}

func (x *CancelCompoundOrderTree) Reset() {
	*x = CancelCompoundOrderTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelCompoundOrderTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelCompoundOrderTree) ProtoMessage() {}

func (x *CancelCompoundOrderTree) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelCompoundOrderTree.ProtoReflect.Descriptor instead.
func (*CancelCompoundOrderTree) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{12}
}

func (x *CancelCompoundOrderTree) GetCompoundTreeId() string {
	if x != nil && x.CompoundTreeId != nil {
		return *x.CompoundTreeId
	}
	return ""
}

func (x *CancelCompoundOrderTree) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CancelCompoundOrderTree) GetTradeLocationId() string {
	if x != nil && x.TradeLocationId != nil {
		return *x.TradeLocationId
	}
	return ""
}

// Account information request message.
// Server returns matching account if exactly one account matches supplied criteria.
type AccountInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trade routing account identifier.
	// If supplied, brokerage_account_number should not be supplied.
	AccountId *int32 `protobuf:"zigzag32,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Brokerage account number.
	// If supplied, account_id should not be supplied.
	BrokerageAccountNumber *string `protobuf:"bytes,2,opt,name=brokerage_account_number,json=brokerageAccountNumber" json:"brokerage_account_number,omitempty"`
}

func (x *AccountInfoRequest) Reset() {
	*x = AccountInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountInfoRequest) ProtoMessage() {}

func (x *AccountInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountInfoRequest.ProtoReflect.Descriptor instead.
func (*AccountInfoRequest) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{13}
}

func (x *AccountInfoRequest) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *AccountInfoRequest) GetBrokerageAccountNumber() string {
	if x != nil && x.BrokerageAccountNumber != nil {
		return *x.BrokerageAccountNumber
	}
	return ""
}

// Balance records request message.
// Server returns balance records that matches supplied criteria.
type BalanceRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Gateway account identifier.
	// If supplied, balance_id should not be supplied.
	AccountId *int32 `protobuf:"zigzag32,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Currency code (real currency code is ISO 4217 based;
	// for crypto currency code, please contact continuum@cqg.com).
	// If supplied, only balance records of this currency are returned.
	// Can be supplied only with account_id.
	Currency *string `protobuf:"bytes,2,opt,name=currency" json:"currency,omitempty"`
	// Trade routing balance identifier.
	// If supplied, only the balance record with this ID is returned.
	// If supplied, account_id and currency should not be supplied.
	BalanceId *int32 `protobuf:"zigzag32,3,opt,name=balance_id,json=balanceId" json:"balance_id,omitempty"`
}

func (x *BalanceRecordsRequest) Reset() {
	*x = BalanceRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceRecordsRequest) ProtoMessage() {}

func (x *BalanceRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceRecordsRequest.ProtoReflect.Descriptor instead.
func (*BalanceRecordsRequest) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{14}
}

func (x *BalanceRecordsRequest) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *BalanceRecordsRequest) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *BalanceRecordsRequest) GetBalanceId() int32 {
	if x != nil && x.BalanceId != nil {
		return *x.BalanceId
	}
	return 0
}

// Create balance record message.
// Add a new balance record for the specified account.
type CreateBalanceRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Trade routing account identifier.
	AccountId *int32 `protobuf:"zigzag32,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// [required] Currency code (real currency code is ISO 4217 based;
	// for crypto currency code, please contact continuum@cqg.com).
	Currency *string `protobuf:"bytes,2,opt,name=currency" json:"currency,omitempty"`
	// [required] End cash balance.
	EndCashBalance *float64 `protobuf:"fixed64,3,opt,name=end_cash_balance,json=endCashBalance" json:"end_cash_balance,omitempty"`
	// Cash value of collateral.
	Collateral *float64 `protobuf:"fixed64,4,opt,name=collateral" json:"collateral,omitempty"`
	// Regulated.
	Regulated *bool `protobuf:"varint,5,opt,name=regulated,def=1" json:"regulated,omitempty"`
	// Statement date, could be present or future (UTC).
	// Datetime format is used but only date part is used, time part is ignored.
	AsOfDate *int64 `protobuf:"zigzag64,6,opt,name=as_of_date,json=asOfDate" json:"as_of_date,omitempty"`
}

// Default values for CreateBalanceRecord fields.
const (
	Default_CreateBalanceRecord_Regulated = bool(true)
)

func (x *CreateBalanceRecord) Reset() {
	*x = CreateBalanceRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBalanceRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBalanceRecord) ProtoMessage() {}

func (x *CreateBalanceRecord) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBalanceRecord.ProtoReflect.Descriptor instead.
func (*CreateBalanceRecord) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{15}
}

func (x *CreateBalanceRecord) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CreateBalanceRecord) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *CreateBalanceRecord) GetEndCashBalance() float64 {
	if x != nil && x.EndCashBalance != nil {
		return *x.EndCashBalance
	}
	return 0
}

func (x *CreateBalanceRecord) GetCollateral() float64 {
	if x != nil && x.Collateral != nil {
		return *x.Collateral
	}
	return 0
}

func (x *CreateBalanceRecord) GetRegulated() bool {
	if x != nil && x.Regulated != nil {
		return *x.Regulated
	}
	return Default_CreateBalanceRecord_Regulated
}

func (x *CreateBalanceRecord) GetAsOfDate() int64 {
	if x != nil && x.AsOfDate != nil {
		return *x.AsOfDate
	}
	return 0
}

// Update balance record message.
type UpdateBalanceRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Trade routing balance record identifier.
	BalanceId *int32 `protobuf:"zigzag32,1,req,name=balance_id,json=balanceId" json:"balance_id,omitempty"`
	// End cash balance.
	EndCashBalance *float64 `protobuf:"fixed64,2,opt,name=end_cash_balance,json=endCashBalance" json:"end_cash_balance,omitempty"`
	// Cash value of collateral.
	// If not supplied, any existing collateral value is not changed.
	Collateral *float64 `protobuf:"fixed64,3,opt,name=collateral" json:"collateral,omitempty"`
}

func (x *UpdateBalanceRecord) Reset() {
	*x = UpdateBalanceRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBalanceRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBalanceRecord) ProtoMessage() {}

func (x *UpdateBalanceRecord) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBalanceRecord.ProtoReflect.Descriptor instead.
func (*UpdateBalanceRecord) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateBalanceRecord) GetBalanceId() int32 {
	if x != nil && x.BalanceId != nil {
		return *x.BalanceId
	}
	return 0
}

func (x *UpdateBalanceRecord) GetEndCashBalance() float64 {
	if x != nil && x.EndCashBalance != nil {
		return *x.EndCashBalance
	}
	return 0
}

func (x *UpdateBalanceRecord) GetCollateral() float64 {
	if x != nil && x.Collateral != nil {
		return *x.Collateral
	}
	return 0
}

// Account search request message.
// Server returns a list of found account records.
type AccountSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [obsolete] Text to search.
	//
	// Deprecated: Do not use.
	ObsoleteText *string `protobuf:"bytes,1,opt,name=obsolete_text,json=obsoleteText" json:"obsolete_text,omitempty"`
	// [obsolete] List of search options.
	// This field is associated with SearchCriteria enum type.
	// Empty list means search by any possible options.
	//
	// Deprecated: Do not use.
	ObsoleteSearchCriteria []uint32 `protobuf:"varint,2,rep,name=obsolete_search_criteria,json=obsoleteSearchCriteria" json:"obsolete_search_criteria,omitempty"`
	// Optionally restrict matched results by returning the first 'top' records.
	Top *uint32 `protobuf:"varint,3,opt,name=top" json:"top,omitempty"`
	// Determines whether removed entities are included in search result.
	// For clients that use protocol version under 1.19 it is 'true' by default.
	IncludeRemoved *bool `protobuf:"varint,4,opt,name=include_removed,json=includeRemoved,def=0" json:"include_removed,omitempty"`
	// List of search options. Each option has its own search text, criteria and matching rule.
	SearchOptions []*SearchOption `protobuf:"bytes,5,rep,name=search_options,json=searchOptions" json:"search_options,omitempty"`
	// Indicates, whether all criteria must match at once.
	// By default any criteria must match.
	AllMatchMode *bool `protobuf:"varint,6,opt,name=all_match_mode,json=allMatchMode,def=0" json:"all_match_mode,omitempty"`
}

// Default values for AccountSearchRequest fields.
const (
	Default_AccountSearchRequest_IncludeRemoved = bool(false)
	Default_AccountSearchRequest_AllMatchMode   = bool(false)
)

func (x *AccountSearchRequest) Reset() {
	*x = AccountSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountSearchRequest) ProtoMessage() {}

func (x *AccountSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountSearchRequest.ProtoReflect.Descriptor instead.
func (*AccountSearchRequest) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{17}
}

// Deprecated: Do not use.
func (x *AccountSearchRequest) GetObsoleteText() string {
	if x != nil && x.ObsoleteText != nil {
		return *x.ObsoleteText
	}
	return ""
}

// Deprecated: Do not use.
func (x *AccountSearchRequest) GetObsoleteSearchCriteria() []uint32 {
	if x != nil {
		return x.ObsoleteSearchCriteria
	}
	return nil
}

func (x *AccountSearchRequest) GetTop() uint32 {
	if x != nil && x.Top != nil {
		return *x.Top
	}
	return 0
}

func (x *AccountSearchRequest) GetIncludeRemoved() bool {
	if x != nil && x.IncludeRemoved != nil {
		return *x.IncludeRemoved
	}
	return Default_AccountSearchRequest_IncludeRemoved
}

func (x *AccountSearchRequest) GetSearchOptions() []*SearchOption {
	if x != nil {
		return x.SearchOptions
	}
	return nil
}

func (x *AccountSearchRequest) GetAllMatchMode() bool {
	if x != nil && x.AllMatchMode != nil {
		return *x.AllMatchMode
	}
	return Default_AccountSearchRequest_AllMatchMode
}

// Get list of routes enabled for the account.
type AccountRouteListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account ID to get list of routes.
	AccountId *int32 `protobuf:"zigzag32,1,req,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *AccountRouteListRequest) Reset() {
	*x = AccountRouteListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountRouteListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountRouteListRequest) ProtoMessage() {}

func (x *AccountRouteListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountRouteListRequest.ProtoReflect.Descriptor instead.
func (*AccountRouteListRequest) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{18}
}

func (x *AccountRouteListRequest) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

// Account to user authorization list request message.
// Either account_id (to request a list of users for an account)
// or user_id (to request a list or accounts for a user) is expected.
type AccountUserAuthorizationListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account ID.
	AccountId *int32 `protobuf:"zigzag32,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// User ID.
	UserId *string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// optionally restrict results by returning the first 'top' records.
	Top *uint32 `protobuf:"varint,3,opt,name=top" json:"top,omitempty"`
	// Includes also implicit authorization (via brokerage or sales series direct authority).
	IncludeImplicitAuthorization *bool `protobuf:"varint,4,opt,name=include_implicit_authorization,json=includeImplicitAuthorization" json:"include_implicit_authorization,omitempty"`
}

func (x *AccountUserAuthorizationListRequest) Reset() {
	*x = AccountUserAuthorizationListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountUserAuthorizationListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountUserAuthorizationListRequest) ProtoMessage() {}

func (x *AccountUserAuthorizationListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountUserAuthorizationListRequest.ProtoReflect.Descriptor instead.
func (*AccountUserAuthorizationListRequest) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{19}
}

func (x *AccountUserAuthorizationListRequest) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *AccountUserAuthorizationListRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *AccountUserAuthorizationListRequest) GetTop() uint32 {
	if x != nil && x.Top != nil {
		return *x.Top
	}
	return 0
}

func (x *AccountUserAuthorizationListRequest) GetIncludeImplicitAuthorization() bool {
	if x != nil && x.IncludeImplicitAuthorization != nil {
		return *x.IncludeImplicitAuthorization
	}
	return false
}

// Account settings request message.
type AccountSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account ID to get account settings.
	AccountId *int32 `protobuf:"zigzag32,1,req,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *AccountSettingsRequest) Reset() {
	*x = AccountSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountSettingsRequest) ProtoMessage() {}

func (x *AccountSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountSettingsRequest.ProtoReflect.Descriptor instead.
func (*AccountSettingsRequest) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{20}
}

func (x *AccountSettingsRequest) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

// Account risk parameters request message.
type AccountRiskParametersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account ID to get risk parameters.
	AccountId *int32 `protobuf:"zigzag32,1,req,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *AccountRiskParametersRequest) Reset() {
	*x = AccountRiskParametersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountRiskParametersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountRiskParametersRequest) ProtoMessage() {}

func (x *AccountRiskParametersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountRiskParametersRequest.ProtoReflect.Descriptor instead.
func (*AccountRiskParametersRequest) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{21}
}

func (x *AccountRiskParametersRequest) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

// Update account risk parameters message.
// [obsolete] Use UpdateAccountRiskParameters instead.
type UpdateRiskParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trade routing account identifier.
	AccountId *int32 `protobuf:"zigzag32,1,req,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Allow positions to be closed only.
	LiquidationOnly *bool `protobuf:"varint,2,opt,name=liquidation_only,json=liquidationOnly" json:"liquidation_only,omitempty"`
	// Allow futures trading.
	AllowFutures *bool `protobuf:"varint,3,opt,name=allow_futures,json=allowFutures" json:"allow_futures,omitempty"`
	// Allow options trading.
	// The value is associated with AccountRiskParameters.OptionsTrading enum.
	AllowOptions *uint32 `protobuf:"varint,4,opt,name=allow_options,json=allowOptions" json:"allow_options,omitempty"`
	// Additional credit available to satisfy margin requirements.
	// Can be set only if Margin Subsystem is enabled for the account.
	AllowableMarginCredit *float64 `protobuf:"fixed64,5,opt,name=allowable_margin_credit,json=allowableMarginCredit" json:"allowable_margin_credit,omitempty"`
}

func (x *UpdateRiskParameters) Reset() {
	*x = UpdateRiskParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRiskParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRiskParameters) ProtoMessage() {}

func (x *UpdateRiskParameters) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRiskParameters.ProtoReflect.Descriptor instead.
func (*UpdateRiskParameters) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateRiskParameters) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *UpdateRiskParameters) GetLiquidationOnly() bool {
	if x != nil && x.LiquidationOnly != nil {
		return *x.LiquidationOnly
	}
	return false
}

func (x *UpdateRiskParameters) GetAllowFutures() bool {
	if x != nil && x.AllowFutures != nil {
		return *x.AllowFutures
	}
	return false
}

func (x *UpdateRiskParameters) GetAllowOptions() uint32 {
	if x != nil && x.AllowOptions != nil {
		return *x.AllowOptions
	}
	return 0
}

func (x *UpdateRiskParameters) GetAllowableMarginCredit() float64 {
	if x != nil && x.AllowableMarginCredit != nil {
		return *x.AllowableMarginCredit
	}
	return 0
}

// Account potentially available exchange groups and commodities request message.
type AccountAvailableExchangeGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account ID to get exchange groups.
	AccountId *int32 `protobuf:"zigzag32,1,req,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *AccountAvailableExchangeGroupsRequest) Reset() {
	*x = AccountAvailableExchangeGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountAvailableExchangeGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountAvailableExchangeGroupsRequest) ProtoMessage() {}

func (x *AccountAvailableExchangeGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountAvailableExchangeGroupsRequest.ProtoReflect.Descriptor instead.
func (*AccountAvailableExchangeGroupsRequest) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{23}
}

func (x *AccountAvailableExchangeGroupsRequest) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

// Account market limits request message.
type AccountMarketLimitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account ID to get limits.
	AccountId *int32 `protobuf:"zigzag32,1,req,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *AccountMarketLimitsRequest) Reset() {
	*x = AccountMarketLimitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountMarketLimitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountMarketLimitsRequest) ProtoMessage() {}

func (x *AccountMarketLimitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountMarketLimitsRequest.ProtoReflect.Descriptor instead.
func (*AccountMarketLimitsRequest) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{24}
}

func (x *AccountMarketLimitsRequest) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

// Account positions request message.
type AccountPositionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account ID to get positions.
	AccountId *int32 `protobuf:"zigzag32,1,req,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *AccountPositionsRequest) Reset() {
	*x = AccountPositionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountPositionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountPositionsRequest) ProtoMessage() {}

func (x *AccountPositionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountPositionsRequest.ProtoReflect.Descriptor instead.
func (*AccountPositionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{25}
}

func (x *AccountPositionsRequest) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

// Account equity request message.
type AccountEquityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account ID.
	AccountId *int32 `protobuf:"zigzag32,1,req,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Currency code of requested equity values (ISO 4217 based).
	// Defaults to account’s currency if omitted.
	Currency *string `protobuf:"bytes,2,opt,name=currency" json:"currency,omitempty"`
}

func (x *AccountEquityRequest) Reset() {
	*x = AccountEquityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountEquityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountEquityRequest) ProtoMessage() {}

func (x *AccountEquityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountEquityRequest.ProtoReflect.Descriptor instead.
func (*AccountEquityRequest) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{26}
}

func (x *AccountEquityRequest) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *AccountEquityRequest) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

// Account collateral request message.
type AccountCollateralRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account ID.
	AccountId *int32 `protobuf:"zigzag32,1,req,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *AccountCollateralRequest) Reset() {
	*x = AccountCollateralRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountCollateralRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountCollateralRequest) ProtoMessage() {}

func (x *AccountCollateralRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountCollateralRequest.ProtoReflect.Descriptor instead.
func (*AccountCollateralRequest) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{27}
}

func (x *AccountCollateralRequest) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

// Clone account message.
// Information that is cloned:
// - account customer (if new_account_user_id is not provided);
// - account settings;
// - account routing options;
// - account risk parameters;
// - account market limits and allowable markets;
// - list of authorized traders.
type CloneAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account which configuration will be copied.
	SourceAccountId *int32 `protobuf:"zigzag32,1,req,name=source_account_id,json=sourceAccountId" json:"source_account_id,omitempty"`
	// Name of the new account (max length = 64).
	NewAccountName *string `protobuf:"bytes,2,req,name=new_account_name,json=newAccountName" json:"new_account_name,omitempty"`
	// Brokerage number of the new account (max length = 12).
	NewAccountBrokerageNumber *string `protobuf:"bytes,3,req,name=new_account_brokerage_number,json=newAccountBrokerageNumber" json:"new_account_brokerage_number,omitempty"`
	// ID of a user (trader) which customer is used for the new account.
	// This user will be authorized on the new account.
	// If not specified then the source account customer will be used.
	NewAccountUserId *string `protobuf:"bytes,4,opt,name=new_account_user_id,json=newAccountUserId" json:"new_account_user_id,omitempty"`
}

func (x *CloneAccount) Reset() {
	*x = CloneAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloneAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneAccount) ProtoMessage() {}

func (x *CloneAccount) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneAccount.ProtoReflect.Descriptor instead.
func (*CloneAccount) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{28}
}

func (x *CloneAccount) GetSourceAccountId() int32 {
	if x != nil && x.SourceAccountId != nil {
		return *x.SourceAccountId
	}
	return 0
}

func (x *CloneAccount) GetNewAccountName() string {
	if x != nil && x.NewAccountName != nil {
		return *x.NewAccountName
	}
	return ""
}

func (x *CloneAccount) GetNewAccountBrokerageNumber() string {
	if x != nil && x.NewAccountBrokerageNumber != nil {
		return *x.NewAccountBrokerageNumber
	}
	return ""
}

func (x *CloneAccount) GetNewAccountUserId() string {
	if x != nil && x.NewAccountUserId != nil {
		return *x.NewAccountUserId
	}
	return ""
}

// Updates general information of account.
type UpdateAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account information to update.
	// Fields that cannot be changed with this update message (see fields comments) are ignored.
	Account *Account `protobuf:"bytes,1,req,name=account" json:"account,omitempty"`
	// Original account information.
	// When provided, only fields that are different from the original account are changed
	// otherwise account information is applied as provided in account field.
	OriginalAccount *Account `protobuf:"bytes,2,opt,name=original_account,json=originalAccount" json:"original_account,omitempty"`
}

func (x *UpdateAccount) Reset() {
	*x = UpdateAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccount) ProtoMessage() {}

func (x *UpdateAccount) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccount.ProtoReflect.Descriptor instead.
func (*UpdateAccount) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateAccount) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *UpdateAccount) GetOriginalAccount() *Account {
	if x != nil {
		return x.OriginalAccount
	}
	return nil
}

// [obsolete] Requests account cluster by its identifier.
type AccountClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Account cluster id.
	AccountClusterId *string `protobuf:"bytes,1,opt,name=account_cluster_id,json=accountClusterId" json:"account_cluster_id,omitempty"`
}

func (x *AccountClusterRequest) Reset() {
	*x = AccountClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountClusterRequest) ProtoMessage() {}

func (x *AccountClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountClusterRequest.ProtoReflect.Descriptor instead.
func (*AccountClusterRequest) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{30}
}

func (x *AccountClusterRequest) GetAccountClusterId() string {
	if x != nil && x.AccountClusterId != nil {
		return *x.AccountClusterId
	}
	return ""
}

// [obsolete] Creates account cluster.
type CreateAccountCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Account cluster to create.
	//
	// Deprecated: Do not use.
	ObsoleteAccountCluster *AccountCluster `protobuf:"bytes,1,opt,name=obsolete_account_cluster,json=obsoleteAccountCluster" json:"obsolete_account_cluster,omitempty"`
}

func (x *CreateAccountCluster) Reset() {
	*x = CreateAccountCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccountCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountCluster) ProtoMessage() {}

func (x *CreateAccountCluster) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountCluster.ProtoReflect.Descriptor instead.
func (*CreateAccountCluster) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{31}
}

// Deprecated: Do not use.
func (x *CreateAccountCluster) GetObsoleteAccountCluster() *AccountCluster {
	if x != nil {
		return x.ObsoleteAccountCluster
	}
	return nil
}

// [obsolete] Updates account cluster.
type UpdateAccountCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Account cluster to update.
	//
	// Deprecated: Do not use.
	ObsoleteAccountCluster *AccountCluster `protobuf:"bytes,1,opt,name=obsolete_account_cluster,json=obsoleteAccountCluster" json:"obsolete_account_cluster,omitempty"`
	// Original account cluster information.
	// When provided, only fields that are different from the original account cluster are changed;
	// otherwise account cluster is applied as provided in account cluster fields.
	//
	// Deprecated: Do not use.
	ObsoleteOriginalAccountCluster *AccountCluster `protobuf:"bytes,2,opt,name=obsolete_original_account_cluster,json=obsoleteOriginalAccountCluster" json:"obsolete_original_account_cluster,omitempty"`
}

func (x *UpdateAccountCluster) Reset() {
	*x = UpdateAccountCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAccountCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountCluster) ProtoMessage() {}

func (x *UpdateAccountCluster) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountCluster.ProtoReflect.Descriptor instead.
func (*UpdateAccountCluster) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{32}
}

// Deprecated: Do not use.
func (x *UpdateAccountCluster) GetObsoleteAccountCluster() *AccountCluster {
	if x != nil {
		return x.ObsoleteAccountCluster
	}
	return nil
}

// Deprecated: Do not use.
func (x *UpdateAccountCluster) GetObsoleteOriginalAccountCluster() *AccountCluster {
	if x != nil {
		return x.ObsoleteOriginalAccountCluster
	}
	return nil
}

// [obsolete] Updates account cluster price offsets.
type UpdateAccountClusterPriceOffsets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Account cluster id.
	AccountClusterId *string `protobuf:"bytes,1,opt,name=account_cluster_id,json=accountClusterId" json:"account_cluster_id,omitempty"`
	// Price offsets to create or update.
	// Price offsets will be created if they do not exist or updated otherwise.
	OffsetsToSet []*AccountClusterPriceOffset `protobuf:"bytes,2,rep,name=offsets_to_set,json=offsetsToSet" json:"offsets_to_set,omitempty"`
	// Price offsets to remove.
	OffsetsToRemove []*AccountClusterPriceOffset `protobuf:"bytes,3,rep,name=offsets_to_remove,json=offsetsToRemove" json:"offsets_to_remove,omitempty"`
}

func (x *UpdateAccountClusterPriceOffsets) Reset() {
	*x = UpdateAccountClusterPriceOffsets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAccountClusterPriceOffsets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountClusterPriceOffsets) ProtoMessage() {}

func (x *UpdateAccountClusterPriceOffsets) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountClusterPriceOffsets.ProtoReflect.Descriptor instead.
func (*UpdateAccountClusterPriceOffsets) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateAccountClusterPriceOffsets) GetAccountClusterId() string {
	if x != nil && x.AccountClusterId != nil {
		return *x.AccountClusterId
	}
	return ""
}

func (x *UpdateAccountClusterPriceOffsets) GetOffsetsToSet() []*AccountClusterPriceOffset {
	if x != nil {
		return x.OffsetsToSet
	}
	return nil
}

func (x *UpdateAccountClusterPriceOffsets) GetOffsetsToRemove() []*AccountClusterPriceOffset {
	if x != nil {
		return x.OffsetsToRemove
	}
	return nil
}

type UpdateAccountSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account settings to update.
	Settings *AccountSettings `protobuf:"bytes,1,req,name=settings" json:"settings,omitempty"`
	// Original account settings.
	// When provided, only fields that are different from the original account settings are changed
	// otherwise account settings is applied as provided in settings field.
	OriginalSettings *AccountSettings `protobuf:"bytes,2,opt,name=original_settings,json=originalSettings" json:"original_settings,omitempty"`
}

func (x *UpdateAccountSettings) Reset() {
	*x = UpdateAccountSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAccountSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountSettings) ProtoMessage() {}

func (x *UpdateAccountSettings) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountSettings.ProtoReflect.Descriptor instead.
func (*UpdateAccountSettings) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{34}
}

func (x *UpdateAccountSettings) GetSettings() *AccountSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *UpdateAccountSettings) GetOriginalSettings() *AccountSettings {
	if x != nil {
		return x.OriginalSettings
	}
	return nil
}

type AccountGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account id to get group information for, if it is related to any.
	// Mutually exclusive with account_group_id field.
	AccountId *string `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Account group id.
	// Mutually exclusive with account_id field.
	AccountGroupId *string `protobuf:"bytes,2,opt,name=account_group_id,json=accountGroupId" json:"account_group_id,omitempty"`
}

func (x *AccountGroupRequest) Reset() {
	*x = AccountGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountGroupRequest) ProtoMessage() {}

func (x *AccountGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountGroupRequest.ProtoReflect.Descriptor instead.
func (*AccountGroupRequest) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{35}
}

func (x *AccountGroupRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *AccountGroupRequest) GetAccountGroupId() string {
	if x != nil && x.AccountGroupId != nil {
		return *x.AccountGroupId
	}
	return ""
}

// Update risk parameters.
type UpdateAccountRiskParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Risk parameters to update.
	RiskParameters *AccountRiskParameters `protobuf:"bytes,1,req,name=risk_parameters,json=riskParameters" json:"risk_parameters,omitempty"`
	// Optional original risk parameters information.
	// When provided, only fields that are different from the original risk parameters are changed
	// otherwise risk parameters information is applied as provided in risk_parameters field.
	OriginalRiskParameters *AccountRiskParameters `protobuf:"bytes,2,opt,name=original_risk_parameters,json=originalRiskParameters" json:"original_risk_parameters,omitempty"`
}

func (x *UpdateAccountRiskParameters) Reset() {
	*x = UpdateAccountRiskParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAccountRiskParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountRiskParameters) ProtoMessage() {}

func (x *UpdateAccountRiskParameters) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountRiskParameters.ProtoReflect.Descriptor instead.
func (*UpdateAccountRiskParameters) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{36}
}

func (x *UpdateAccountRiskParameters) GetRiskParameters() *AccountRiskParameters {
	if x != nil {
		return x.RiskParameters
	}
	return nil
}

func (x *UpdateAccountRiskParameters) GetOriginalRiskParameters() *AccountRiskParameters {
	if x != nil {
		return x.OriginalRiskParameters
	}
	return nil
}

// Update account route list.
type UpdateAccountRouteList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Account id to update routes.
	AccountId *string `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Routes to add or change.
	RoutesToSet []*AccountRouteRecord `protobuf:"bytes,2,rep,name=routes_to_set,json=routesToSet" json:"routes_to_set,omitempty"`
	// Route codes to remove from account.
	RouteCodesToRemove []string `protobuf:"bytes,3,rep,name=route_codes_to_remove,json=routeCodesToRemove" json:"route_codes_to_remove,omitempty"`
}

func (x *UpdateAccountRouteList) Reset() {
	*x = UpdateAccountRouteList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAccountRouteList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountRouteList) ProtoMessage() {}

func (x *UpdateAccountRouteList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountRouteList.ProtoReflect.Descriptor instead.
func (*UpdateAccountRouteList) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{37}
}

func (x *UpdateAccountRouteList) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *UpdateAccountRouteList) GetRoutesToSet() []*AccountRouteRecord {
	if x != nil {
		return x.RoutesToSet
	}
	return nil
}

func (x *UpdateAccountRouteList) GetRouteCodesToRemove() []string {
	if x != nil {
		return x.RouteCodesToRemove
	}
	return nil
}

// Update account market limits.
// How to use this message:
// - only provided data is updated - records/levels (like exchange, commodity..)
//   and limits inside of them are not changed if not provided explicitly;
// - if you want to clear (set to default) group of limits (entire level, exchange, commodity..),
//   including trading authority (allowed_trade) you can use cleared_fields of corresponding message.
type UpdateAccountMarketLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] account id to update market limits.
	AccountId *string `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// [required] market limits to update.
	MarketLimits *MarketLimits `protobuf:"bytes,2,opt,name=market_limits,json=marketLimits" json:"market_limits,omitempty"`
	// [optional] original market limits.
	// When provided, only fields that are different from the original market limits are changed
	// otherwise market limits are applied as provided in market_limits field.
	OriginalMarketLimits *MarketLimits `protobuf:"bytes,3,opt,name=original_market_limits,json=originalMarketLimits" json:"original_market_limits,omitempty"`
}

func (x *UpdateAccountMarketLimits) Reset() {
	*x = UpdateAccountMarketLimits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAccountMarketLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountMarketLimits) ProtoMessage() {}

func (x *UpdateAccountMarketLimits) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountMarketLimits.ProtoReflect.Descriptor instead.
func (*UpdateAccountMarketLimits) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{38}
}

func (x *UpdateAccountMarketLimits) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *UpdateAccountMarketLimits) GetMarketLimits() *MarketLimits {
	if x != nil {
		return x.MarketLimits
	}
	return nil
}

func (x *UpdateAccountMarketLimits) GetOriginalMarketLimits() *MarketLimits {
	if x != nil {
		return x.OriginalMarketLimits
	}
	return nil
}

// Request of all routes available for the account.
type RouteListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Account identifier.
	AccountId *string `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *RouteListRequest) Reset() {
	*x = RouteListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteListRequest) ProtoMessage() {}

func (x *RouteListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteListRequest.ProtoReflect.Descriptor instead.
func (*RouteListRequest) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{39}
}

func (x *RouteListRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

// Creates a new GW Account.
type CreateAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Account to create.
	Account *Account `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
}

func (x *CreateAccount) Reset() {
	*x = CreateAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccount) ProtoMessage() {}

func (x *CreateAccount) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccount.ProtoReflect.Descriptor instead.
func (*CreateAccount) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{40}
}

func (x *CreateAccount) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

// Result of TradeRoutingRequest.
type TradeRoutingResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of a corresponding request.
	RequestId *uint32 `protobuf:"varint,1,req,name=request_id,json=requestId" json:"request_id,omitempty"`
	// Operation status.
	// This field is associated with OperationStatus enum.
	OperationStatus *uint32 `protobuf:"varint,2,req,name=operation_status,json=operationStatus" json:"operation_status,omitempty"`
	// Error details if operation failed.
	ErrorMessage *Text `protobuf:"bytes,3,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// Result of accounts related request.
	AccountScopeResult *AccountScopeResult `protobuf:"bytes,4,opt,name=account_scope_result,json=accountScopeResult" json:"account_scope_result,omitempty"`
	// Result of orders related request.
	OrderScopeResult *OrderScopeResult `protobuf:"bytes,5,opt,name=order_scope_result,json=orderScopeResult" json:"order_scope_result,omitempty"`
	// Result of lookup_property_list_request.
	LookupPropertyListResult *LookupPropertyListResult `protobuf:"bytes,6,opt,name=lookup_property_list_result,json=lookupPropertyListResult" json:"lookup_property_list_result,omitempty"`
}

func (x *TradeRoutingResult) Reset() {
	*x = TradeRoutingResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeRoutingResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeRoutingResult) ProtoMessage() {}

func (x *TradeRoutingResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeRoutingResult.ProtoReflect.Descriptor instead.
func (*TradeRoutingResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{41}
}

func (x *TradeRoutingResult) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *TradeRoutingResult) GetOperationStatus() uint32 {
	if x != nil && x.OperationStatus != nil {
		return *x.OperationStatus
	}
	return 0
}

func (x *TradeRoutingResult) GetErrorMessage() *Text {
	if x != nil {
		return x.ErrorMessage
	}
	return nil
}

func (x *TradeRoutingResult) GetAccountScopeResult() *AccountScopeResult {
	if x != nil {
		return x.AccountScopeResult
	}
	return nil
}

func (x *TradeRoutingResult) GetOrderScopeResult() *OrderScopeResult {
	if x != nil {
		return x.OrderScopeResult
	}
	return nil
}

func (x *TradeRoutingResult) GetLookupPropertyListResult() *LookupPropertyListResult {
	if x != nil {
		return x.LookupPropertyListResult
	}
	return nil
}

// Result of accounts related request.
type AccountScopeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result of account information request.
	AccountInfoResult *AccountInfoResult `protobuf:"bytes,1,opt,name=account_info_result,json=accountInfoResult" json:"account_info_result,omitempty"`
	// Result of balance records request.
	BalanceRecordsResult *BalanceRecordsResult `protobuf:"bytes,2,opt,name=balance_records_result,json=balanceRecordsResult" json:"balance_records_result,omitempty"`
	// Result of balance record creation.
	CreateBalanceRecordResult *CreateBalanceRecordResult `protobuf:"bytes,3,opt,name=create_balance_record_result,json=createBalanceRecordResult" json:"create_balance_record_result,omitempty"`
	// Result of balance record update.
	UpdateBalanceRecordResult *UpdateBalanceRecordResult `protobuf:"bytes,4,opt,name=update_balance_record_result,json=updateBalanceRecordResult" json:"update_balance_record_result,omitempty"`
	// Result of account risk parameters request.
	AccountRiskParametersResult *AccountRiskParametersResult `protobuf:"bytes,5,opt,name=account_risk_parameters_result,json=accountRiskParametersResult" json:"account_risk_parameters_result,omitempty"`
	// Result of account's risk parameters update.
	UpdateRiskParametersResult *UpdateRiskParametersResult `protobuf:"bytes,6,opt,name=update_risk_parameters_result,json=updateRiskParametersResult" json:"update_risk_parameters_result,omitempty"`
	// Result of account search request.
	AccountSearchResult *AccountSearchResult `protobuf:"bytes,7,opt,name=account_search_result,json=accountSearchResult" json:"account_search_result,omitempty"`
	// Result of account routes list request.
	AccountRouteListResult *AccountRouteListResult `protobuf:"bytes,8,opt,name=account_route_list_result,json=accountRouteListResult" json:"account_route_list_result,omitempty"`
	// Result of account to user authorization list request.
	AccountUserAuthorizationListResult *AccountUserAuthorizationListResult `protobuf:"bytes,9,opt,name=account_user_authorization_list_result,json=accountUserAuthorizationListResult" json:"account_user_authorization_list_result,omitempty"`
	// Result of account settings request.
	AccountSettingsResult *AccountSettingsResult `protobuf:"bytes,10,opt,name=account_settings_result,json=accountSettingsResult" json:"account_settings_result,omitempty"`
	// Result of account exchange groups request.
	AccountExchangeGroupsResult *AccountExchangeGroupsResult `protobuf:"bytes,11,opt,name=account_exchange_groups_result,json=accountExchangeGroupsResult" json:"account_exchange_groups_result,omitempty"`
	// Result of account market limits request.
	AccountMarketLimitsResult *AccountMarketLimitsResult `protobuf:"bytes,12,opt,name=account_market_limits_result,json=accountMarketLimitsResult" json:"account_market_limits_result,omitempty"`
	// Result of positions request.
	AccountPositionsResult *AccountPositionsResult `protobuf:"bytes,13,opt,name=account_positions_result,json=accountPositionsResult" json:"account_positions_result,omitempty"`
	// Result of equity request.
	AccountEquityResult *AccountEquityResult `protobuf:"bytes,14,opt,name=account_equity_result,json=accountEquityResult" json:"account_equity_result,omitempty"`
	// Result of collateral request.
	AccountCollateralResult *AccountCollateralResult `protobuf:"bytes,15,opt,name=account_collateral_result,json=accountCollateralResult" json:"account_collateral_result,omitempty"`
	// Result of clone account request.
	CloneAccountResult *CloneAccountResult `protobuf:"bytes,16,opt,name=clone_account_result,json=cloneAccountResult" json:"clone_account_result,omitempty"`
	// Result of UpdateAccount.
	UpdateAccountResult *UpdateAccountResult `protobuf:"bytes,17,opt,name=update_account_result,json=updateAccountResult" json:"update_account_result,omitempty"`
	// Result of UpdateAccountSettings.
	UpdateAccountSettingsResult *UpdateAccountSettingsResult `protobuf:"bytes,18,opt,name=update_account_settings_result,json=updateAccountSettingsResult" json:"update_account_settings_result,omitempty"`
	// Result of AccountGroupRequest.
	AccountGroupResult *AccountGroupResult `protobuf:"bytes,19,opt,name=account_group_result,json=accountGroupResult" json:"account_group_result,omitempty"`
	// Result of UpdateAccountRiskParameters.
	UpdateAccountRiskParametersResult *UpdateAccountRiskParametersResult `protobuf:"bytes,20,opt,name=update_account_risk_parameters_result,json=updateAccountRiskParametersResult" json:"update_account_risk_parameters_result,omitempty"`
	// Result of RouteListRequest.
	RouteListResult *RouteListResult `protobuf:"bytes,21,opt,name=route_list_result,json=routeListResult" json:"route_list_result,omitempty"`
	// Result of UpdateAccountRouteList.
	UpdateAccountRouteListResult *UpdateAccountRouteListResult `protobuf:"bytes,22,opt,name=update_account_route_list_result,json=updateAccountRouteListResult" json:"update_account_route_list_result,omitempty"`
	// Result of UpdateAccountMarketLimits.
	UpdateAccountMarketLimitsResult *UpdateAccountMarketLimitsResult `protobuf:"bytes,23,opt,name=update_account_market_limits_result,json=updateAccountMarketLimitsResult" json:"update_account_market_limits_result,omitempty"`
	// Result of CreateAccount.
	CreateAccountResult *CreateAccountResult `protobuf:"bytes,24,opt,name=create_account_result,json=createAccountResult" json:"create_account_result,omitempty"`
	// [obsolete] This operation is no longer supported.
	//
	// Deprecated: Do not use.
	ObsoleteAccountClusterResult *AccountClusterResult `protobuf:"bytes,25,opt,name=obsolete_account_cluster_result,json=obsoleteAccountClusterResult" json:"obsolete_account_cluster_result,omitempty"`
	// [obsolete] This operation is no longer supported.
	//
	// Deprecated: Do not use.
	ObsoleteCreateAccountClusterResult *CreateAccountClusterResult `protobuf:"bytes,26,opt,name=obsolete_create_account_cluster_result,json=obsoleteCreateAccountClusterResult" json:"obsolete_create_account_cluster_result,omitempty"`
	// [obsolete] This operation is no longer supported.
	//
	// Deprecated: Do not use.
	ObsoleteUpdateAccountClusterResult *UpdateAccountClusterResult `protobuf:"bytes,27,opt,name=obsolete_update_account_cluster_result,json=obsoleteUpdateAccountClusterResult" json:"obsolete_update_account_cluster_result,omitempty"`
	// [obsolete] This operation is no longer supported.
	//
	// Deprecated: Do not use.
	ObsoleteUpdateAccountClusterPriceOffsetsResult *UpdateAccountClusterPriceOffsetsResult `protobuf:"bytes,28,opt,name=obsolete_update_account_cluster_price_offsets_result,json=obsoleteUpdateAccountClusterPriceOffsetsResult" json:"obsolete_update_account_cluster_price_offsets_result,omitempty"`
	// Result of RestoreAccount.
	RestoreAccountResult *RestoreAccountResult `protobuf:"bytes,29,opt,name=restore_account_result,json=restoreAccountResult" json:"restore_account_result,omitempty"`
	// Result of AccountTypeOverrideListRequest.
	AccountTypeOverrideListResult *AccountTypeOverrideListResult `protobuf:"bytes,30,opt,name=account_type_override_list_result,json=accountTypeOverrideListResult" json:"account_type_override_list_result,omitempty"`
	// Result of UpdateAccountTypeOverrideList.
	UpdateAccountTypeOverrideListResult *UpdateAccountTypeOverrideListResult `protobuf:"bytes,31,opt,name=update_account_type_override_list_result,json=updateAccountTypeOverrideListResult" json:"update_account_type_override_list_result,omitempty"`
	// Result of UpdateAccountUserAuthorizationList.
	UpdateAccountUserAuthorizationListResult *UpdateAccountUserAuthorizationListResult `protobuf:"bytes,32,opt,name=update_account_user_authorization_list_result,json=updateAccountUserAuthorizationListResult" json:"update_account_user_authorization_list_result,omitempty"`
	// Result of RemoveAccount.
	RemoveAccountResult *RemoveAccountResult `protobuf:"bytes,33,opt,name=remove_account_result,json=removeAccountResult" json:"remove_account_result,omitempty"`
	// Result of AccountAvailableServiceGroupListRequest.
	AccountAvailableServiceGroupListResult *AccountAvailableServiceGroupListResult `protobuf:"bytes,34,opt,name=account_available_service_group_list_result,json=accountAvailableServiceGroupListResult" json:"account_available_service_group_list_result,omitempty"`
	// Result of AccountServiceGroupListRequest.
	AccountServiceGroupListResult *AccountServiceGroupListResult `protobuf:"bytes,35,opt,name=account_service_group_list_result,json=accountServiceGroupListResult" json:"account_service_group_list_result,omitempty"`
	// Result of UpdateAccountServiceGroupList.
	UpdateAccountServiceGroupListResult *UpdateAccountServiceGroupListResult `protobuf:"bytes,36,opt,name=update_account_service_group_list_result,json=updateAccountServiceGroupListResult" json:"update_account_service_group_list_result,omitempty"`
	// Result of BillableExchangeListRequest.
	BillableExchangeListResult *BillableExchangeListResult `protobuf:"bytes,37,opt,name=billable_exchange_list_result,json=billableExchangeListResult" json:"billable_exchange_list_result,omitempty"`
	// Result of CreateAccountGroup.
	CreateAccountGroupResult *CreateAccountGroupResult `protobuf:"bytes,38,opt,name=create_account_group_result,json=createAccountGroupResult" json:"create_account_group_result,omitempty"`
}

func (x *AccountScopeResult) Reset() {
	*x = AccountScopeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountScopeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountScopeResult) ProtoMessage() {}

func (x *AccountScopeResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountScopeResult.ProtoReflect.Descriptor instead.
func (*AccountScopeResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{42}
}

func (x *AccountScopeResult) GetAccountInfoResult() *AccountInfoResult {
	if x != nil {
		return x.AccountInfoResult
	}
	return nil
}

func (x *AccountScopeResult) GetBalanceRecordsResult() *BalanceRecordsResult {
	if x != nil {
		return x.BalanceRecordsResult
	}
	return nil
}

func (x *AccountScopeResult) GetCreateBalanceRecordResult() *CreateBalanceRecordResult {
	if x != nil {
		return x.CreateBalanceRecordResult
	}
	return nil
}

func (x *AccountScopeResult) GetUpdateBalanceRecordResult() *UpdateBalanceRecordResult {
	if x != nil {
		return x.UpdateBalanceRecordResult
	}
	return nil
}

func (x *AccountScopeResult) GetAccountRiskParametersResult() *AccountRiskParametersResult {
	if x != nil {
		return x.AccountRiskParametersResult
	}
	return nil
}

func (x *AccountScopeResult) GetUpdateRiskParametersResult() *UpdateRiskParametersResult {
	if x != nil {
		return x.UpdateRiskParametersResult
	}
	return nil
}

func (x *AccountScopeResult) GetAccountSearchResult() *AccountSearchResult {
	if x != nil {
		return x.AccountSearchResult
	}
	return nil
}

func (x *AccountScopeResult) GetAccountRouteListResult() *AccountRouteListResult {
	if x != nil {
		return x.AccountRouteListResult
	}
	return nil
}

func (x *AccountScopeResult) GetAccountUserAuthorizationListResult() *AccountUserAuthorizationListResult {
	if x != nil {
		return x.AccountUserAuthorizationListResult
	}
	return nil
}

func (x *AccountScopeResult) GetAccountSettingsResult() *AccountSettingsResult {
	if x != nil {
		return x.AccountSettingsResult
	}
	return nil
}

func (x *AccountScopeResult) GetAccountExchangeGroupsResult() *AccountExchangeGroupsResult {
	if x != nil {
		return x.AccountExchangeGroupsResult
	}
	return nil
}

func (x *AccountScopeResult) GetAccountMarketLimitsResult() *AccountMarketLimitsResult {
	if x != nil {
		return x.AccountMarketLimitsResult
	}
	return nil
}

func (x *AccountScopeResult) GetAccountPositionsResult() *AccountPositionsResult {
	if x != nil {
		return x.AccountPositionsResult
	}
	return nil
}

func (x *AccountScopeResult) GetAccountEquityResult() *AccountEquityResult {
	if x != nil {
		return x.AccountEquityResult
	}
	return nil
}

func (x *AccountScopeResult) GetAccountCollateralResult() *AccountCollateralResult {
	if x != nil {
		return x.AccountCollateralResult
	}
	return nil
}

func (x *AccountScopeResult) GetCloneAccountResult() *CloneAccountResult {
	if x != nil {
		return x.CloneAccountResult
	}
	return nil
}

func (x *AccountScopeResult) GetUpdateAccountResult() *UpdateAccountResult {
	if x != nil {
		return x.UpdateAccountResult
	}
	return nil
}

func (x *AccountScopeResult) GetUpdateAccountSettingsResult() *UpdateAccountSettingsResult {
	if x != nil {
		return x.UpdateAccountSettingsResult
	}
	return nil
}

func (x *AccountScopeResult) GetAccountGroupResult() *AccountGroupResult {
	if x != nil {
		return x.AccountGroupResult
	}
	return nil
}

func (x *AccountScopeResult) GetUpdateAccountRiskParametersResult() *UpdateAccountRiskParametersResult {
	if x != nil {
		return x.UpdateAccountRiskParametersResult
	}
	return nil
}

func (x *AccountScopeResult) GetRouteListResult() *RouteListResult {
	if x != nil {
		return x.RouteListResult
	}
	return nil
}

func (x *AccountScopeResult) GetUpdateAccountRouteListResult() *UpdateAccountRouteListResult {
	if x != nil {
		return x.UpdateAccountRouteListResult
	}
	return nil
}

func (x *AccountScopeResult) GetUpdateAccountMarketLimitsResult() *UpdateAccountMarketLimitsResult {
	if x != nil {
		return x.UpdateAccountMarketLimitsResult
	}
	return nil
}

func (x *AccountScopeResult) GetCreateAccountResult() *CreateAccountResult {
	if x != nil {
		return x.CreateAccountResult
	}
	return nil
}

// Deprecated: Do not use.
func (x *AccountScopeResult) GetObsoleteAccountClusterResult() *AccountClusterResult {
	if x != nil {
		return x.ObsoleteAccountClusterResult
	}
	return nil
}

// Deprecated: Do not use.
func (x *AccountScopeResult) GetObsoleteCreateAccountClusterResult() *CreateAccountClusterResult {
	if x != nil {
		return x.ObsoleteCreateAccountClusterResult
	}
	return nil
}

// Deprecated: Do not use.
func (x *AccountScopeResult) GetObsoleteUpdateAccountClusterResult() *UpdateAccountClusterResult {
	if x != nil {
		return x.ObsoleteUpdateAccountClusterResult
	}
	return nil
}

// Deprecated: Do not use.
func (x *AccountScopeResult) GetObsoleteUpdateAccountClusterPriceOffsetsResult() *UpdateAccountClusterPriceOffsetsResult {
	if x != nil {
		return x.ObsoleteUpdateAccountClusterPriceOffsetsResult
	}
	return nil
}

func (x *AccountScopeResult) GetRestoreAccountResult() *RestoreAccountResult {
	if x != nil {
		return x.RestoreAccountResult
	}
	return nil
}

func (x *AccountScopeResult) GetAccountTypeOverrideListResult() *AccountTypeOverrideListResult {
	if x != nil {
		return x.AccountTypeOverrideListResult
	}
	return nil
}

func (x *AccountScopeResult) GetUpdateAccountTypeOverrideListResult() *UpdateAccountTypeOverrideListResult {
	if x != nil {
		return x.UpdateAccountTypeOverrideListResult
	}
	return nil
}

func (x *AccountScopeResult) GetUpdateAccountUserAuthorizationListResult() *UpdateAccountUserAuthorizationListResult {
	if x != nil {
		return x.UpdateAccountUserAuthorizationListResult
	}
	return nil
}

func (x *AccountScopeResult) GetRemoveAccountResult() *RemoveAccountResult {
	if x != nil {
		return x.RemoveAccountResult
	}
	return nil
}

func (x *AccountScopeResult) GetAccountAvailableServiceGroupListResult() *AccountAvailableServiceGroupListResult {
	if x != nil {
		return x.AccountAvailableServiceGroupListResult
	}
	return nil
}

func (x *AccountScopeResult) GetAccountServiceGroupListResult() *AccountServiceGroupListResult {
	if x != nil {
		return x.AccountServiceGroupListResult
	}
	return nil
}

func (x *AccountScopeResult) GetUpdateAccountServiceGroupListResult() *UpdateAccountServiceGroupListResult {
	if x != nil {
		return x.UpdateAccountServiceGroupListResult
	}
	return nil
}

func (x *AccountScopeResult) GetBillableExchangeListResult() *BillableExchangeListResult {
	if x != nil {
		return x.BillableExchangeListResult
	}
	return nil
}

func (x *AccountScopeResult) GetCreateAccountGroupResult() *CreateAccountGroupResult {
	if x != nil {
		return x.CreateAccountGroupResult
	}
	return nil
}

// Result of orders related request.
type OrderScopeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result of order details request.
	OrderDetailsResult *OrderDetailsResult `protobuf:"bytes,1,opt,name=order_details_result,json=orderDetailsResult" json:"order_details_result,omitempty"`
	// Result of fill adding.
	AddFillResult *AddFillResult `protobuf:"bytes,2,opt,name=add_fill_result,json=addFillResult" json:"add_fill_result,omitempty"`
	// Result of external order creation.
	CreateExternalOrderResult *CreateExternalOrderResult `protobuf:"bytes,3,opt,name=create_external_order_result,json=createExternalOrderResult" json:"create_external_order_result,omitempty"`
	// Result of order search request.
	OrderSearchResult *OrderSearchResult `protobuf:"bytes,4,opt,name=order_search_result,json=orderSearchResult" json:"order_search_result,omitempty"`
	// Result of RelatedOrderTreeRequest.
	RelatedOrderTreeResult *RelatedOrderTreeResult `protobuf:"bytes,5,opt,name=related_order_tree_result,json=relatedOrderTreeResult" json:"related_order_tree_result,omitempty"`
	// Result of CompoundOrderTreeRequest.
	CompoundOrderTreeResult *CompoundOrderTreeResult `protobuf:"bytes,6,opt,name=compound_order_tree_result,json=compoundOrderTreeResult" json:"compound_order_tree_result,omitempty"`
	// Result of SyntheticStrategyTreeRequest.
	SyntheticStrategyTreeResult *SyntheticStrategyTreeResult `protobuf:"bytes,7,opt,name=synthetic_strategy_tree_result,json=syntheticStrategyTreeResult" json:"synthetic_strategy_tree_result,omitempty"`
	// Result of CancelOrder.
	CancelOrderResult *CancelOrderResult `protobuf:"bytes,8,opt,name=cancel_order_result,json=cancelOrderResult" json:"cancel_order_result,omitempty"`
	// Result of ReflectAsCanceledOrder.
	ReflectAsCanceledOrderResult *ReflectAsCanceledOrderResult `protobuf:"bytes,9,opt,name=reflect_as_canceled_order_result,json=reflectAsCanceledOrderResult" json:"reflect_as_canceled_order_result,omitempty"`
	// Result of CancelCompoundOrderTreeRequest.
	CancelCompoundOrderTreeResult *CancelCompoundOrderTreeResult `protobuf:"bytes,10,opt,name=cancel_compound_order_tree_result,json=cancelCompoundOrderTreeResult" json:"cancel_compound_order_tree_result,omitempty"`
}

func (x *OrderScopeResult) Reset() {
	*x = OrderScopeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderScopeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderScopeResult) ProtoMessage() {}

func (x *OrderScopeResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderScopeResult.ProtoReflect.Descriptor instead.
func (*OrderScopeResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{43}
}

func (x *OrderScopeResult) GetOrderDetailsResult() *OrderDetailsResult {
	if x != nil {
		return x.OrderDetailsResult
	}
	return nil
}

func (x *OrderScopeResult) GetAddFillResult() *AddFillResult {
	if x != nil {
		return x.AddFillResult
	}
	return nil
}

func (x *OrderScopeResult) GetCreateExternalOrderResult() *CreateExternalOrderResult {
	if x != nil {
		return x.CreateExternalOrderResult
	}
	return nil
}

func (x *OrderScopeResult) GetOrderSearchResult() *OrderSearchResult {
	if x != nil {
		return x.OrderSearchResult
	}
	return nil
}

func (x *OrderScopeResult) GetRelatedOrderTreeResult() *RelatedOrderTreeResult {
	if x != nil {
		return x.RelatedOrderTreeResult
	}
	return nil
}

func (x *OrderScopeResult) GetCompoundOrderTreeResult() *CompoundOrderTreeResult {
	if x != nil {
		return x.CompoundOrderTreeResult
	}
	return nil
}

func (x *OrderScopeResult) GetSyntheticStrategyTreeResult() *SyntheticStrategyTreeResult {
	if x != nil {
		return x.SyntheticStrategyTreeResult
	}
	return nil
}

func (x *OrderScopeResult) GetCancelOrderResult() *CancelOrderResult {
	if x != nil {
		return x.CancelOrderResult
	}
	return nil
}

func (x *OrderScopeResult) GetReflectAsCanceledOrderResult() *ReflectAsCanceledOrderResult {
	if x != nil {
		return x.ReflectAsCanceledOrderResult
	}
	return nil
}

func (x *OrderScopeResult) GetCancelCompoundOrderTreeResult() *CancelCompoundOrderTreeResult {
	if x != nil {
		return x.CancelCompoundOrderTreeResult
	}
	return nil
}

// Order details request result message.
type OrderDetailsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trade routing order chain.
	OrderChain *OrderChain `protobuf:"bytes,1,req,name=order_chain,json=orderChain" json:"order_chain,omitempty"`
	// This flag is set to true if all order requests in the chain are sent.
	IsComplete *bool `protobuf:"varint,2,opt,name=is_complete,json=isComplete,def=1" json:"is_complete,omitempty"`
}

// Default values for OrderDetailsResult fields.
const (
	Default_OrderDetailsResult_IsComplete = bool(true)
)

func (x *OrderDetailsResult) Reset() {
	*x = OrderDetailsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderDetailsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderDetailsResult) ProtoMessage() {}

func (x *OrderDetailsResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderDetailsResult.ProtoReflect.Descriptor instead.
func (*OrderDetailsResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{44}
}

func (x *OrderDetailsResult) GetOrderChain() *OrderChain {
	if x != nil {
		return x.OrderChain
	}
	return nil
}

func (x *OrderDetailsResult) GetIsComplete() bool {
	if x != nil && x.IsComplete != nil {
		return *x.IsComplete
	}
	return Default_OrderDetailsResult_IsComplete
}

// Add fill result message.
type AddFillResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddFillResult) Reset() {
	*x = AddFillResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFillResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFillResult) ProtoMessage() {}

func (x *AddFillResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFillResult.ProtoReflect.Descriptor instead.
func (*AddFillResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{45}
}

// Create order result message.
type CreateExternalOrderResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Chain order ID of created order.
	OrderId *string `protobuf:"bytes,3,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	// [required] Trade location of newly created order.
	TradeLocationId *string `protobuf:"bytes,4,opt,name=trade_location_id,json=tradeLocationId" json:"trade_location_id,omitempty"`
}

func (x *CreateExternalOrderResult) Reset() {
	*x = CreateExternalOrderResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateExternalOrderResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExternalOrderResult) ProtoMessage() {}

func (x *CreateExternalOrderResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExternalOrderResult.ProtoReflect.Descriptor instead.
func (*CreateExternalOrderResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{46}
}

func (x *CreateExternalOrderResult) GetOrderId() string {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return ""
}

func (x *CreateExternalOrderResult) GetTradeLocationId() string {
	if x != nil && x.TradeLocationId != nil {
		return *x.TradeLocationId
	}
	return ""
}

// Order search request message.
type OrderSearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of found orders.
	OrderRecord []*OrderSearchResultRecord `protobuf:"bytes,1,rep,name=order_record,json=orderRecord" json:"order_record,omitempty"`
	// This flag is set to true if all search results are sent
	// and nothing was filtered out by 'top' parameter.
	IsComplete *bool `protobuf:"varint,2,opt,name=is_complete,json=isComplete,def=1" json:"is_complete,omitempty"`
}

// Default values for OrderSearchResult fields.
const (
	Default_OrderSearchResult_IsComplete = bool(true)
)

func (x *OrderSearchResult) Reset() {
	*x = OrderSearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderSearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderSearchResult) ProtoMessage() {}

func (x *OrderSearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderSearchResult.ProtoReflect.Descriptor instead.
func (*OrderSearchResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{47}
}

func (x *OrderSearchResult) GetOrderRecord() []*OrderSearchResultRecord {
	if x != nil {
		return x.OrderRecord
	}
	return nil
}

func (x *OrderSearchResult) GetIsComplete() bool {
	if x != nil && x.IsComplete != nil {
		return *x.IsComplete
	}
	return Default_OrderSearchResult_IsComplete
}

// Result of RelatedOrderTreeRequest.
type RelatedOrderTreeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Root order with children.
	RelatedOrder *RelatedOrder `protobuf:"bytes,1,opt,name=related_order,json=relatedOrder" json:"related_order,omitempty"`
	// This flag is set to true if all orders in the tree are sent.
	IsComplete *bool `protobuf:"varint,2,opt,name=is_complete,json=isComplete,def=1" json:"is_complete,omitempty"`
}

// Default values for RelatedOrderTreeResult fields.
const (
	Default_RelatedOrderTreeResult_IsComplete = bool(true)
)

func (x *RelatedOrderTreeResult) Reset() {
	*x = RelatedOrderTreeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelatedOrderTreeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedOrderTreeResult) ProtoMessage() {}

func (x *RelatedOrderTreeResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedOrderTreeResult.ProtoReflect.Descriptor instead.
func (*RelatedOrderTreeResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{48}
}

func (x *RelatedOrderTreeResult) GetRelatedOrder() *RelatedOrder {
	if x != nil {
		return x.RelatedOrder
	}
	return nil
}

func (x *RelatedOrderTreeResult) GetIsComplete() bool {
	if x != nil && x.IsComplete != nil {
		return *x.IsComplete
	}
	return Default_RelatedOrderTreeResult_IsComplete
}

// Result of CompoundOrderTreeRequest.
type CompoundOrderTreeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Root compound order with children.
	CompoundOrder *CompoundOrder `protobuf:"bytes,1,opt,name=compound_order,json=compoundOrder" json:"compound_order,omitempty"`
	// This flag is set to true if all orders in the tree are sent.
	IsComplete *bool `protobuf:"varint,2,opt,name=is_complete,json=isComplete,def=1" json:"is_complete,omitempty"`
}

// Default values for CompoundOrderTreeResult fields.
const (
	Default_CompoundOrderTreeResult_IsComplete = bool(true)
)

func (x *CompoundOrderTreeResult) Reset() {
	*x = CompoundOrderTreeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompoundOrderTreeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompoundOrderTreeResult) ProtoMessage() {}

func (x *CompoundOrderTreeResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompoundOrderTreeResult.ProtoReflect.Descriptor instead.
func (*CompoundOrderTreeResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{49}
}

func (x *CompoundOrderTreeResult) GetCompoundOrder() *CompoundOrder {
	if x != nil {
		return x.CompoundOrder
	}
	return nil
}

func (x *CompoundOrderTreeResult) GetIsComplete() bool {
	if x != nil && x.IsComplete != nil {
		return *x.IsComplete
	}
	return Default_CompoundOrderTreeResult_IsComplete
}

// Result of SyntheticStrategyTreeRequest.
type SyntheticStrategyTreeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// First level strategy order legs.
	Legs []*StrategyLeg `protobuf:"bytes,1,rep,name=legs" json:"legs,omitempty"`
	// Strategy contract name.
	StrategyName *string `protobuf:"bytes,2,opt,name=strategy_name,json=strategyName" json:"strategy_name,omitempty"`
}

func (x *SyntheticStrategyTreeResult) Reset() {
	*x = SyntheticStrategyTreeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyntheticStrategyTreeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyntheticStrategyTreeResult) ProtoMessage() {}

func (x *SyntheticStrategyTreeResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyntheticStrategyTreeResult.ProtoReflect.Descriptor instead.
func (*SyntheticStrategyTreeResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{50}
}

func (x *SyntheticStrategyTreeResult) GetLegs() []*StrategyLeg {
	if x != nil {
		return x.Legs
	}
	return nil
}

func (x *SyntheticStrategyTreeResult) GetStrategyName() string {
	if x != nil && x.StrategyName != nil {
		return *x.StrategyName
	}
	return ""
}

// Result of CancelOrder.
type CancelOrderResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelOrderResult) Reset() {
	*x = CancelOrderResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelOrderResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOrderResult) ProtoMessage() {}

func (x *CancelOrderResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOrderResult.ProtoReflect.Descriptor instead.
func (*CancelOrderResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{51}
}

// Result of ReflectAsCanceledOrder
type ReflectAsCanceledOrderResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReflectAsCanceledOrderResult) Reset() {
	*x = ReflectAsCanceledOrderResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReflectAsCanceledOrderResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReflectAsCanceledOrderResult) ProtoMessage() {}

func (x *ReflectAsCanceledOrderResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReflectAsCanceledOrderResult.ProtoReflect.Descriptor instead.
func (*ReflectAsCanceledOrderResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{52}
}

// Result of CancelCompoundOrderTreeRequest.
type CancelCompoundOrderTreeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelCompoundOrderTreeResult) Reset() {
	*x = CancelCompoundOrderTreeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelCompoundOrderTreeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelCompoundOrderTreeResult) ProtoMessage() {}

func (x *CancelCompoundOrderTreeResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelCompoundOrderTreeResult.ProtoReflect.Descriptor instead.
func (*CancelCompoundOrderTreeResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{53}
}

// Account information request result message.
type AccountInfoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trade routing account.
	Account *Account `protobuf:"bytes,1,req,name=account" json:"account,omitempty"`
}

func (x *AccountInfoResult) Reset() {
	*x = AccountInfoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountInfoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountInfoResult) ProtoMessage() {}

func (x *AccountInfoResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountInfoResult.ProtoReflect.Descriptor instead.
func (*AccountInfoResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{54}
}

func (x *AccountInfoResult) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

// Balance records request result message.
type BalanceRecordsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Balance records.
	BalanceRecord []*BalanceRecord `protobuf:"bytes,1,rep,name=balance_record,json=balanceRecord" json:"balance_record,omitempty"`
}

func (x *BalanceRecordsResult) Reset() {
	*x = BalanceRecordsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceRecordsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceRecordsResult) ProtoMessage() {}

func (x *BalanceRecordsResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceRecordsResult.ProtoReflect.Descriptor instead.
func (*BalanceRecordsResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{55}
}

func (x *BalanceRecordsResult) GetBalanceRecord() []*BalanceRecord {
	if x != nil {
		return x.BalanceRecord
	}
	return nil
}

// Create balance record result message.
type CreateBalanceRecordResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Created account balance record id.
	BalanceRecordId *int32 `protobuf:"zigzag32,3,req,name=balance_record_id,json=balanceRecordId" json:"balance_record_id,omitempty"`
}

func (x *CreateBalanceRecordResult) Reset() {
	*x = CreateBalanceRecordResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBalanceRecordResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBalanceRecordResult) ProtoMessage() {}

func (x *CreateBalanceRecordResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBalanceRecordResult.ProtoReflect.Descriptor instead.
func (*CreateBalanceRecordResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{56}
}

func (x *CreateBalanceRecordResult) GetBalanceRecordId() int32 {
	if x != nil && x.BalanceRecordId != nil {
		return *x.BalanceRecordId
	}
	return 0
}

// Update balance record result message.
type UpdateBalanceRecordResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateBalanceRecordResult) Reset() {
	*x = UpdateBalanceRecordResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBalanceRecordResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBalanceRecordResult) ProtoMessage() {}

func (x *UpdateBalanceRecordResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBalanceRecordResult.ProtoReflect.Descriptor instead.
func (*UpdateBalanceRecordResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{57}
}

// Account search result message.
type AccountSearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of found accounts.
	AccountRecord []*AccountSearchResultRecord `protobuf:"bytes,1,rep,name=account_record,json=accountRecord" json:"account_record,omitempty"`
	// This flag is set to true if all results are sent
	// and nothing was filtered out by 'top' parameter.
	IsComplete *bool `protobuf:"varint,2,opt,name=is_complete,json=isComplete,def=1" json:"is_complete,omitempty"`
}

// Default values for AccountSearchResult fields.
const (
	Default_AccountSearchResult_IsComplete = bool(true)
)

func (x *AccountSearchResult) Reset() {
	*x = AccountSearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountSearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountSearchResult) ProtoMessage() {}

func (x *AccountSearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountSearchResult.ProtoReflect.Descriptor instead.
func (*AccountSearchResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{58}
}

func (x *AccountSearchResult) GetAccountRecord() []*AccountSearchResultRecord {
	if x != nil {
		return x.AccountRecord
	}
	return nil
}

func (x *AccountSearchResult) GetIsComplete() bool {
	if x != nil && x.IsComplete != nil {
		return *x.IsComplete
	}
	return Default_AccountSearchResult_IsComplete
}

// Account routes result message.
type AccountRouteListResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of enabled account routes.
	AccountRouteRecord []*AccountRouteRecord `protobuf:"bytes,1,rep,name=account_route_record,json=accountRouteRecord" json:"account_route_record,omitempty"`
}

func (x *AccountRouteListResult) Reset() {
	*x = AccountRouteListResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountRouteListResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountRouteListResult) ProtoMessage() {}

func (x *AccountRouteListResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountRouteListResult.ProtoReflect.Descriptor instead.
func (*AccountRouteListResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{59}
}

func (x *AccountRouteListResult) GetAccountRouteRecord() []*AccountRouteRecord {
	if x != nil {
		return x.AccountRouteRecord
	}
	return nil
}

// Account to user authorization list result message.
type AccountUserAuthorizationListResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of account to user authorization links.
	AccountUserLink []*AccountUserLink `protobuf:"bytes,1,rep,name=account_user_link,json=accountUserLink" json:"account_user_link,omitempty"`
	// This flag is set to true if all results are sent
	// and nothing was filtered out by 'top' parameter.
	IsComplete *bool `protobuf:"varint,2,opt,name=is_complete,json=isComplete,def=1" json:"is_complete,omitempty"`
}

// Default values for AccountUserAuthorizationListResult fields.
const (
	Default_AccountUserAuthorizationListResult_IsComplete = bool(true)
)

func (x *AccountUserAuthorizationListResult) Reset() {
	*x = AccountUserAuthorizationListResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountUserAuthorizationListResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountUserAuthorizationListResult) ProtoMessage() {}

func (x *AccountUserAuthorizationListResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountUserAuthorizationListResult.ProtoReflect.Descriptor instead.
func (*AccountUserAuthorizationListResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{60}
}

func (x *AccountUserAuthorizationListResult) GetAccountUserLink() []*AccountUserLink {
	if x != nil {
		return x.AccountUserLink
	}
	return nil
}

func (x *AccountUserAuthorizationListResult) GetIsComplete() bool {
	if x != nil && x.IsComplete != nil {
		return *x.IsComplete
	}
	return Default_AccountUserAuthorizationListResult_IsComplete
}

// Account settings result message.
type AccountSettingsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account settings.
	AccountSettings *AccountSettings `protobuf:"bytes,1,req,name=account_settings,json=accountSettings" json:"account_settings,omitempty"`
}

func (x *AccountSettingsResult) Reset() {
	*x = AccountSettingsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountSettingsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountSettingsResult) ProtoMessage() {}

func (x *AccountSettingsResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountSettingsResult.ProtoReflect.Descriptor instead.
func (*AccountSettingsResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{61}
}

func (x *AccountSettingsResult) GetAccountSettings() *AccountSettings {
	if x != nil {
		return x.AccountSettings
	}
	return nil
}

// Account risk parameters result message.
type AccountRiskParametersResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account risk parameters.
	AccountRiskParameters *AccountRiskParameters `protobuf:"bytes,1,req,name=account_risk_parameters,json=accountRiskParameters" json:"account_risk_parameters,omitempty"`
}

func (x *AccountRiskParametersResult) Reset() {
	*x = AccountRiskParametersResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountRiskParametersResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountRiskParametersResult) ProtoMessage() {}

func (x *AccountRiskParametersResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountRiskParametersResult.ProtoReflect.Descriptor instead.
func (*AccountRiskParametersResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{62}
}

func (x *AccountRiskParametersResult) GetAccountRiskParameters() *AccountRiskParameters {
	if x != nil {
		return x.AccountRiskParameters
	}
	return nil
}

// Update account's risk parameters result message.
type UpdateRiskParametersResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateRiskParametersResult) Reset() {
	*x = UpdateRiskParametersResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRiskParametersResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRiskParametersResult) ProtoMessage() {}

func (x *UpdateRiskParametersResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRiskParametersResult.ProtoReflect.Descriptor instead.
func (*UpdateRiskParametersResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{63}
}

// Account exchange groups result message.
type AccountExchangeGroupsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of exchange groups available for the account.
	ExchangeGroup []*ExchangeGroup `protobuf:"bytes,1,rep,name=exchange_group,json=exchangeGroup" json:"exchange_group,omitempty"`
	// Dictionary of instrument types that are used in the exchange group's commodities above.
	InstrumentType []*InstrumentType `protobuf:"bytes,2,rep,name=instrument_type,json=instrumentType" json:"instrument_type,omitempty"`
}

func (x *AccountExchangeGroupsResult) Reset() {
	*x = AccountExchangeGroupsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountExchangeGroupsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountExchangeGroupsResult) ProtoMessage() {}

func (x *AccountExchangeGroupsResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountExchangeGroupsResult.ProtoReflect.Descriptor instead.
func (*AccountExchangeGroupsResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{64}
}

func (x *AccountExchangeGroupsResult) GetExchangeGroup() []*ExchangeGroup {
	if x != nil {
		return x.ExchangeGroup
	}
	return nil
}

func (x *AccountExchangeGroupsResult) GetInstrumentType() []*InstrumentType {
	if x != nil {
		return x.InstrumentType
	}
	return nil
}

// Account market limits result message.
type AccountMarketLimitsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account market limits.
	AccountMarketLimits *MarketLimits `protobuf:"bytes,1,req,name=account_market_limits,json=accountMarketLimits" json:"account_market_limits,omitempty"`
}

func (x *AccountMarketLimitsResult) Reset() {
	*x = AccountMarketLimitsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountMarketLimitsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountMarketLimitsResult) ProtoMessage() {}

func (x *AccountMarketLimitsResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountMarketLimitsResult.ProtoReflect.Descriptor instead.
func (*AccountMarketLimitsResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{65}
}

func (x *AccountMarketLimitsResult) GetAccountMarketLimits() *MarketLimits {
	if x != nil {
		return x.AccountMarketLimits
	}
	return nil
}

// Account positions result message.
type AccountPositionsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account per contract positions.
	// If some contract has both long and short positions then there are two separate records for
	// this contract.
	ContractPosition []*ContractPosition `protobuf:"bytes,1,rep,name=contract_position,json=contractPosition" json:"contract_position,omitempty"`
}

func (x *AccountPositionsResult) Reset() {
	*x = AccountPositionsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountPositionsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountPositionsResult) ProtoMessage() {}

func (x *AccountPositionsResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountPositionsResult.ProtoReflect.Descriptor instead.
func (*AccountPositionsResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{66}
}

func (x *AccountPositionsResult) GetContractPosition() []*ContractPosition {
	if x != nil {
		return x.ContractPosition
	}
	return nil
}

// Account equity result message.
type AccountEquityResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account equity.
	Equity *Equity `protobuf:"bytes,1,req,name=equity" json:"equity,omitempty"`
}

func (x *AccountEquityResult) Reset() {
	*x = AccountEquityResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountEquityResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountEquityResult) ProtoMessage() {}

func (x *AccountEquityResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountEquityResult.ProtoReflect.Descriptor instead.
func (*AccountEquityResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{67}
}

func (x *AccountEquityResult) GetEquity() *Equity {
	if x != nil {
		return x.Equity
	}
	return nil
}

// Account collateral result message.
type AccountCollateralResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account collateral.
	Collateral *Collateral `protobuf:"bytes,1,req,name=collateral" json:"collateral,omitempty"`
}

func (x *AccountCollateralResult) Reset() {
	*x = AccountCollateralResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountCollateralResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountCollateralResult) ProtoMessage() {}

func (x *AccountCollateralResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountCollateralResult.ProtoReflect.Descriptor instead.
func (*AccountCollateralResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{68}
}

func (x *AccountCollateralResult) GetCollateral() *Collateral {
	if x != nil {
		return x.Collateral
	}
	return nil
}

// Clone account result message.
type CloneAccountResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the newly created account.
	NewAccountId *int32 `protobuf:"zigzag32,1,req,name=new_account_id,json=newAccountId" json:"new_account_id,omitempty"`
}

func (x *CloneAccountResult) Reset() {
	*x = CloneAccountResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloneAccountResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneAccountResult) ProtoMessage() {}

func (x *CloneAccountResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneAccountResult.ProtoReflect.Descriptor instead.
func (*CloneAccountResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{69}
}

func (x *CloneAccountResult) GetNewAccountId() int32 {
	if x != nil && x.NewAccountId != nil {
		return *x.NewAccountId
	}
	return 0
}

// Result of account general information update.
type UpdateAccountResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAccountResult) Reset() {
	*x = UpdateAccountResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAccountResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountResult) ProtoMessage() {}

func (x *UpdateAccountResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountResult.ProtoReflect.Descriptor instead.
func (*UpdateAccountResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{70}
}

// Result of account settings update.
type UpdateAccountSettingsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAccountSettingsResult) Reset() {
	*x = UpdateAccountSettingsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAccountSettingsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountSettingsResult) ProtoMessage() {}

func (x *UpdateAccountSettingsResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountSettingsResult.ProtoReflect.Descriptor instead.
func (*UpdateAccountSettingsResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{71}
}

// Result of AccountGroupRequest.
type AccountGroupResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If provided account is not related to any group then empty.
	AcountGroup *AccountGroup `protobuf:"bytes,1,opt,name=acount_group,json=acountGroup" json:"acount_group,omitempty"`
}

func (x *AccountGroupResult) Reset() {
	*x = AccountGroupResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountGroupResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountGroupResult) ProtoMessage() {}

func (x *AccountGroupResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountGroupResult.ProtoReflect.Descriptor instead.
func (*AccountGroupResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{72}
}

func (x *AccountGroupResult) GetAcountGroup() *AccountGroup {
	if x != nil {
		return x.AcountGroup
	}
	return nil
}

// Result of UpdateAccountRiskParameters.
type UpdateAccountRiskParametersResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAccountRiskParametersResult) Reset() {
	*x = UpdateAccountRiskParametersResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAccountRiskParametersResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountRiskParametersResult) ProtoMessage() {}

func (x *UpdateAccountRiskParametersResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountRiskParametersResult.ProtoReflect.Descriptor instead.
func (*UpdateAccountRiskParametersResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{73}
}

// Result of RouteListRequest
type RouteListResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of available routes.
	Routes []*Route `protobuf:"bytes,1,rep,name=routes" json:"routes,omitempty"`
}

func (x *RouteListResult) Reset() {
	*x = RouteListResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteListResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteListResult) ProtoMessage() {}

func (x *RouteListResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteListResult.ProtoReflect.Descriptor instead.
func (*RouteListResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{74}
}

func (x *RouteListResult) GetRoutes() []*Route {
	if x != nil {
		return x.Routes
	}
	return nil
}

// Result of UpdateAccountRouteList.
type UpdateAccountRouteListResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAccountRouteListResult) Reset() {
	*x = UpdateAccountRouteListResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAccountRouteListResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountRouteListResult) ProtoMessage() {}

func (x *UpdateAccountRouteListResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountRouteListResult.ProtoReflect.Descriptor instead.
func (*UpdateAccountRouteListResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{75}
}

// Result of UpdateAccountMarketLimits.
type UpdateAccountMarketLimitsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAccountMarketLimitsResult) Reset() {
	*x = UpdateAccountMarketLimitsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAccountMarketLimitsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountMarketLimitsResult) ProtoMessage() {}

func (x *UpdateAccountMarketLimitsResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountMarketLimitsResult.ProtoReflect.Descriptor instead.
func (*UpdateAccountMarketLimitsResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{76}
}

// Result of CreateAccount.
type CreateAccountResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of newly created account, if succeeded.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (x *CreateAccountResult) Reset() {
	*x = CreateAccountResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccountResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountResult) ProtoMessage() {}

func (x *CreateAccountResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountResult.ProtoReflect.Descriptor instead.
func (*CreateAccountResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{77}
}

func (x *CreateAccountResult) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

// [obsolete] Result of account cluster request.
type AccountClusterResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account cluster.
	//
	// Deprecated: Do not use.
	ObsoleteAccountCluster *AccountCluster `protobuf:"bytes,1,opt,name=obsolete_account_cluster,json=obsoleteAccountCluster" json:"obsolete_account_cluster,omitempty"`
	// Account cluster price offsets.
	//
	// Deprecated: Do not use.
	ObsoleteAccountClusterPriceOffsets []*AccountClusterPriceOffset `protobuf:"bytes,2,rep,name=obsolete_account_cluster_price_offsets,json=obsoleteAccountClusterPriceOffsets" json:"obsolete_account_cluster_price_offsets,omitempty"`
}

func (x *AccountClusterResult) Reset() {
	*x = AccountClusterResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountClusterResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountClusterResult) ProtoMessage() {}

func (x *AccountClusterResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountClusterResult.ProtoReflect.Descriptor instead.
func (*AccountClusterResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{78}
}

// Deprecated: Do not use.
func (x *AccountClusterResult) GetObsoleteAccountCluster() *AccountCluster {
	if x != nil {
		return x.ObsoleteAccountCluster
	}
	return nil
}

// Deprecated: Do not use.
func (x *AccountClusterResult) GetObsoleteAccountClusterPriceOffsets() []*AccountClusterPriceOffset {
	if x != nil {
		return x.ObsoleteAccountClusterPriceOffsets
	}
	return nil
}

// [obsolete] Result of account cluster creation.
type CreateAccountClusterResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of newly created account cluster if succeeded.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (x *CreateAccountClusterResult) Reset() {
	*x = CreateAccountClusterResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccountClusterResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountClusterResult) ProtoMessage() {}

func (x *CreateAccountClusterResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountClusterResult.ProtoReflect.Descriptor instead.
func (*CreateAccountClusterResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{79}
}

func (x *CreateAccountClusterResult) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

// [obsolete] Result of account cluster update.
type UpdateAccountClusterResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAccountClusterResult) Reset() {
	*x = UpdateAccountClusterResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAccountClusterResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountClusterResult) ProtoMessage() {}

func (x *UpdateAccountClusterResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountClusterResult.ProtoReflect.Descriptor instead.
func (*UpdateAccountClusterResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{80}
}

// [obsolete] Result of account cluster price offsets update.
type UpdateAccountClusterPriceOffsetsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAccountClusterPriceOffsetsResult) Reset() {
	*x = UpdateAccountClusterPriceOffsetsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAccountClusterPriceOffsetsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountClusterPriceOffsetsResult) ProtoMessage() {}

func (x *UpdateAccountClusterPriceOffsetsResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountClusterPriceOffsetsResult.ProtoReflect.Descriptor instead.
func (*UpdateAccountClusterPriceOffsetsResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{81}
}

// Trade routing order chain.
// Order chain attributes reflect current order chain status.
type OrderChain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of an order chain (it is equal to the order_id of the first request in the chain).
	ChainOrderId *string `protobuf:"bytes,1,req,name=chain_order_id,json=chainOrderId" json:"chain_order_id,omitempty"`
	// Order identifier of the last not rejected order request (except rejected initial place request)
	// which defines the current status of the chain.
	OrderId *string `protobuf:"bytes,2,req,name=order_id,json=orderId" json:"order_id,omitempty"`
	// Account ID that was used to create the chain.
	ChainOrigAccountId *int32 `protobuf:"zigzag32,4,req,name=chain_orig_account_id,json=chainOrigAccountId" json:"chain_orig_account_id,omitempty"`
	// Time when order was submitted to execution system (UTC).
	SubmittedUtcTime *int64 `protobuf:"zigzag64,5,req,name=submitted_utc_time,json=submittedUtcTime" json:"submitted_utc_time,omitempty"`
	// Full contract symbol.
	ContractSymbol *string `protobuf:"bytes,6,req,name=contract_symbol,json=contractSymbol" json:"contract_symbol,omitempty"`
	// Order side.
	// This field is associated with OrderChain.Side enum type.
	Side *uint32 `protobuf:"varint,7,req,name=side" json:"side,omitempty"`
	// Total positive size of the order.
	Size *uint32 `protobuf:"varint,8,req,name=size" json:"size,omitempty"`
	// Order limit price.
	// Correct price format.
	LimitPrice *float64 `protobuf:"fixed64,9,opt,name=limit_price,json=limitPrice" json:"limit_price,omitempty"`
	// Order stop price.
	// Correct price format.
	StopPrice *float64 `protobuf:"fixed64,10,opt,name=stop_price,json=stopPrice" json:"stop_price,omitempty"`
	// List of execution instructions.
	// This field is associated with OrderChain.ExecInstruction enum type.
	ExecInstruction []uint32 `protobuf:"varint,11,rep,name=exec_instruction,json=execInstruction" json:"exec_instruction,omitempty"`
	// Order duration.
	// This field is associated with OrderChain.Duration enum type.
	Duration *uint32 `protobuf:"varint,12,req,name=duration" json:"duration,omitempty"`
	// Date for GTD (local to exchange, date only value in time format) when the order should expire.
	GoodThruDate *int64 `protobuf:"zigzag64,13,opt,name=good_thru_date,json=goodThruDate" json:"good_thru_date,omitempty"`
	// Date and time for GTT order (UTC) when the order should expire.
	GoodThruUtcTime *int64 `protobuf:"zigzag64,14,opt,name=good_thru_utc_time,json=goodThruUtcTime" json:"good_thru_utc_time,omitempty"`
	// Order status.
	// This field is associated with OrderChain.Status enum type.
	Status *uint32 `protobuf:"varint,15,req,name=status" json:"status,omitempty"`
	// Order type.
	// This field is associated with OrderChain.OrderType enum type.
	OrderType *uint32 `protobuf:"varint,16,req,name=order_type,json=orderType" json:"order_type,omitempty"`
	// List of order requests in the chain.
	OrderRequest []*OrderRequest `protobuf:"bytes,17,rep,name=order_request,json=orderRequest" json:"order_request,omitempty"`
	// Order fills.
	OrderFill []*OrderFill `protobuf:"bytes,18,rep,name=order_fill,json=orderFill" json:"order_fill,omitempty"`
	// The values are associated with a lookup property with ORDER_CLASS type.
	OrderClasses []string `protobuf:"bytes,19,rep,name=order_classes,json=orderClasses" json:"order_classes,omitempty"`
	// Order limit price.
	// Display price format.
	DisplayLimitPrice *int64 `protobuf:"zigzag64,20,opt,name=display_limit_price,json=displayLimitPrice" json:"display_limit_price,omitempty"`
	// Order stop price.
	// Display price format.
	DisplayStopPrice *int64 `protobuf:"zigzag64,21,opt,name=display_stop_price,json=displayStopPrice" json:"display_stop_price,omitempty"`
	// Account name provided to exchange.
	ExecutionAccountName *string `protobuf:"bytes,22,opt,name=execution_account_name,json=executionAccountName" json:"execution_account_name,omitempty"`
	// Trailing specific information.
	Trailing *OrderTrailing `protobuf:"bytes,23,opt,name=trailing" json:"trailing,omitempty"`
	// Specific order sizes.
	Sizes *OrderSizes `protobuf:"bytes,24,opt,name=sizes" json:"sizes,omitempty"`
	// Full list of accounts towards exchange.
	Accounts []*ChainAccount `protobuf:"bytes,25,rep,name=accounts" json:"accounts,omitempty"`
	// Associated compound orders tree identifier.
	CompoundTreeId *string `protobuf:"bytes,26,opt,name=compound_tree_id,json=compoundTreeId" json:"compound_tree_id,omitempty"`
	// In case of some synthetics.
	RootChainOrderId *string `protobuf:"bytes,27,opt,name=root_chain_order_id,json=rootChainOrderId" json:"root_chain_order_id,omitempty"`
	// Order can be checked for any reason.
	Checked *bool `protobuf:"varint,28,opt,name=checked" json:"checked,omitempty"`
	// Strategy trading expression.
	TradingExpression *string `protobuf:"bytes,29,opt,name=trading_expression,json=tradingExpression" json:"trading_expression,omitempty"`
	// Order's contract legs
	Legs []*OrderContractLeg `protobuf:"bytes,30,rep,name=legs" json:"legs,omitempty"`
	// Full contract description.
	// Formula in case of strategy.
	ContractDescription *string `protobuf:"bytes,31,opt,name=contract_description,json=contractDescription" json:"contract_description,omitempty"`
	// Additional user defined attributes.
	// First - name, second - value.
	UserAttributes []*Tuple `protobuf:"bytes,32,rep,name=user_attributes,json=userAttributes" json:"user_attributes,omitempty"`
	// Client-side determined algo strategy.
	ClientAlgoStrategy *string `protobuf:"bytes,33,opt,name=client_algo_strategy,json=clientAlgoStrategy" json:"client_algo_strategy,omitempty"`
	// Gateway-side algo strategy.
	AlgoStrategy *string `protobuf:"bytes,34,opt,name=algo_strategy,json=algoStrategy" json:"algo_strategy,omitempty"`
	// Actual order route.
	Route *OrderRoute `protobuf:"bytes,35,opt,name=route" json:"route,omitempty"`
	// Order chain expiration time.
	ExpirationTime *int64 `protobuf:"zigzag64,36,opt,name=expiration_time,json=expirationTime" json:"expiration_time,omitempty"`
	// Order open/close type.
	// This field is associated with OrderChain.OpenCloseType enum type.
	OpenCloseType *uint32 `protobuf:"varint,37,opt,name=open_close_type,json=openCloseType" json:"open_close_type,omitempty"`
	// Order speculation type.
	// This field is associated with OrderChain.SpeculationType enum type.
	SpeculationType *uint32 `protobuf:"varint,38,opt,name=speculation_type,json=speculationType" json:"speculation_type,omitempty"`
	// Archived order.
	Archived *bool `protobuf:"varint,39,opt,name=archived" json:"archived,omitempty"`
	// Current order request at exchange.
	OrderIdAtExchange *string `protobuf:"bytes,40,opt,name=order_id_at_exchange,json=orderIdAtExchange" json:"order_id_at_exchange,omitempty"`
	// Discretionary offset, in the number of ticks.
	DiscretionaryOffset *uint32 `protobuf:"varint,41,opt,name=discretionary_offset,json=discretionaryOffset" json:"discretionary_offset,omitempty"`
}

func (x *OrderChain) Reset() {
	*x = OrderChain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderChain) ProtoMessage() {}

func (x *OrderChain) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderChain.ProtoReflect.Descriptor instead.
func (*OrderChain) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{82}
}

func (x *OrderChain) GetChainOrderId() string {
	if x != nil && x.ChainOrderId != nil {
		return *x.ChainOrderId
	}
	return ""
}

func (x *OrderChain) GetOrderId() string {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return ""
}

func (x *OrderChain) GetChainOrigAccountId() int32 {
	if x != nil && x.ChainOrigAccountId != nil {
		return *x.ChainOrigAccountId
	}
	return 0
}

func (x *OrderChain) GetSubmittedUtcTime() int64 {
	if x != nil && x.SubmittedUtcTime != nil {
		return *x.SubmittedUtcTime
	}
	return 0
}

func (x *OrderChain) GetContractSymbol() string {
	if x != nil && x.ContractSymbol != nil {
		return *x.ContractSymbol
	}
	return ""
}

func (x *OrderChain) GetSide() uint32 {
	if x != nil && x.Side != nil {
		return *x.Side
	}
	return 0
}

func (x *OrderChain) GetSize() uint32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *OrderChain) GetLimitPrice() float64 {
	if x != nil && x.LimitPrice != nil {
		return *x.LimitPrice
	}
	return 0
}

func (x *OrderChain) GetStopPrice() float64 {
	if x != nil && x.StopPrice != nil {
		return *x.StopPrice
	}
	return 0
}

func (x *OrderChain) GetExecInstruction() []uint32 {
	if x != nil {
		return x.ExecInstruction
	}
	return nil
}

func (x *OrderChain) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *OrderChain) GetGoodThruDate() int64 {
	if x != nil && x.GoodThruDate != nil {
		return *x.GoodThruDate
	}
	return 0
}

func (x *OrderChain) GetGoodThruUtcTime() int64 {
	if x != nil && x.GoodThruUtcTime != nil {
		return *x.GoodThruUtcTime
	}
	return 0
}

func (x *OrderChain) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *OrderChain) GetOrderType() uint32 {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return 0
}

func (x *OrderChain) GetOrderRequest() []*OrderRequest {
	if x != nil {
		return x.OrderRequest
	}
	return nil
}

func (x *OrderChain) GetOrderFill() []*OrderFill {
	if x != nil {
		return x.OrderFill
	}
	return nil
}

func (x *OrderChain) GetOrderClasses() []string {
	if x != nil {
		return x.OrderClasses
	}
	return nil
}

func (x *OrderChain) GetDisplayLimitPrice() int64 {
	if x != nil && x.DisplayLimitPrice != nil {
		return *x.DisplayLimitPrice
	}
	return 0
}

func (x *OrderChain) GetDisplayStopPrice() int64 {
	if x != nil && x.DisplayStopPrice != nil {
		return *x.DisplayStopPrice
	}
	return 0
}

func (x *OrderChain) GetExecutionAccountName() string {
	if x != nil && x.ExecutionAccountName != nil {
		return *x.ExecutionAccountName
	}
	return ""
}

func (x *OrderChain) GetTrailing() *OrderTrailing {
	if x != nil {
		return x.Trailing
	}
	return nil
}

func (x *OrderChain) GetSizes() *OrderSizes {
	if x != nil {
		return x.Sizes
	}
	return nil
}

func (x *OrderChain) GetAccounts() []*ChainAccount {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *OrderChain) GetCompoundTreeId() string {
	if x != nil && x.CompoundTreeId != nil {
		return *x.CompoundTreeId
	}
	return ""
}

func (x *OrderChain) GetRootChainOrderId() string {
	if x != nil && x.RootChainOrderId != nil {
		return *x.RootChainOrderId
	}
	return ""
}

func (x *OrderChain) GetChecked() bool {
	if x != nil && x.Checked != nil {
		return *x.Checked
	}
	return false
}

func (x *OrderChain) GetTradingExpression() string {
	if x != nil && x.TradingExpression != nil {
		return *x.TradingExpression
	}
	return ""
}

func (x *OrderChain) GetLegs() []*OrderContractLeg {
	if x != nil {
		return x.Legs
	}
	return nil
}

func (x *OrderChain) GetContractDescription() string {
	if x != nil && x.ContractDescription != nil {
		return *x.ContractDescription
	}
	return ""
}

func (x *OrderChain) GetUserAttributes() []*Tuple {
	if x != nil {
		return x.UserAttributes
	}
	return nil
}

func (x *OrderChain) GetClientAlgoStrategy() string {
	if x != nil && x.ClientAlgoStrategy != nil {
		return *x.ClientAlgoStrategy
	}
	return ""
}

func (x *OrderChain) GetAlgoStrategy() string {
	if x != nil && x.AlgoStrategy != nil {
		return *x.AlgoStrategy
	}
	return ""
}

func (x *OrderChain) GetRoute() *OrderRoute {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *OrderChain) GetExpirationTime() int64 {
	if x != nil && x.ExpirationTime != nil {
		return *x.ExpirationTime
	}
	return 0
}

func (x *OrderChain) GetOpenCloseType() uint32 {
	if x != nil && x.OpenCloseType != nil {
		return *x.OpenCloseType
	}
	return 0
}

func (x *OrderChain) GetSpeculationType() uint32 {
	if x != nil && x.SpeculationType != nil {
		return *x.SpeculationType
	}
	return 0
}

func (x *OrderChain) GetArchived() bool {
	if x != nil && x.Archived != nil {
		return *x.Archived
	}
	return false
}

func (x *OrderChain) GetOrderIdAtExchange() string {
	if x != nil && x.OrderIdAtExchange != nil {
		return *x.OrderIdAtExchange
	}
	return ""
}

func (x *OrderChain) GetDiscretionaryOffset() uint32 {
	if x != nil && x.DiscretionaryOffset != nil {
		return *x.DiscretionaryOffset
	}
	return 0
}

// Represents account in the chain of accounts.
type ChainAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account identifier.
	AccountId *string `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Account name.
	AccountName *string `protobuf:"bytes,2,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// Brokerage account number.
	BrokerageAccountNumber *string `protobuf:"bytes,3,opt,name=brokerage_account_number,json=brokerageAccountNumber" json:"brokerage_account_number,omitempty"`
}

func (x *ChainAccount) Reset() {
	*x = ChainAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainAccount) ProtoMessage() {}

func (x *ChainAccount) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainAccount.ProtoReflect.Descriptor instead.
func (*ChainAccount) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{83}
}

func (x *ChainAccount) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *ChainAccount) GetAccountName() string {
	if x != nil && x.AccountName != nil {
		return *x.AccountName
	}
	return ""
}

func (x *ChainAccount) GetBrokerageAccountNumber() string {
	if x != nil && x.BrokerageAccountNumber != nil {
		return *x.BrokerageAccountNumber
	}
	return ""
}

// Represents route through which order is executed.
type OrderRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Route unique code.
	Code *string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	// Route name.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Route order id.
	OrderId *string `protobuf:"bytes,3,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
}

func (x *OrderRoute) Reset() {
	*x = OrderRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderRoute) ProtoMessage() {}

func (x *OrderRoute) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderRoute.ProtoReflect.Descriptor instead.
func (*OrderRoute) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{84}
}

func (x *OrderRoute) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *OrderRoute) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *OrderRoute) GetOrderId() string {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return ""
}

// Represents order's contract leg.
type OrderContractLeg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Leg number.
	Number *uint32 `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
	// Total positive size of the leg.
	Size *uint32 `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	// Order side.
	// This field is associated with OrderChain.Side enum type.
	Side *uint32 `protobuf:"varint,3,opt,name=side" json:"side,omitempty"`
	// Full contract symbol.
	ContractSymbol *string `protobuf:"bytes,4,opt,name=contract_symbol,json=contractSymbol" json:"contract_symbol,omitempty"`
}

func (x *OrderContractLeg) Reset() {
	*x = OrderContractLeg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderContractLeg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderContractLeg) ProtoMessage() {}

func (x *OrderContractLeg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderContractLeg.ProtoReflect.Descriptor instead.
func (*OrderContractLeg) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{85}
}

func (x *OrderContractLeg) GetNumber() uint32 {
	if x != nil && x.Number != nil {
		return *x.Number
	}
	return 0
}

func (x *OrderContractLeg) GetSize() uint32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *OrderContractLeg) GetSide() uint32 {
	if x != nil && x.Side != nil {
		return *x.Side
	}
	return 0
}

func (x *OrderContractLeg) GetContractSymbol() string {
	if x != nil && x.ContractSymbol != nil {
		return *x.ContractSymbol
	}
	return ""
}

// Account and user information associated with an order request.
type AccountAndUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trade routing account identifier.
	AccountId *int32 `protobuf:"zigzag32,1,req,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Associated user information. Contains either user_name that initiated the order request on
	// this account or Brokerage name of the next omnibus account in the chain.
	UserInfo *string `protobuf:"bytes,2,req,name=user_info,json=userInfo" json:"user_info,omitempty"`
	// Reject details for rejected order request.
	RejectDetails *string `protobuf:"bytes,3,opt,name=reject_details,json=rejectDetails" json:"reject_details,omitempty"`
	// Additional internal reject details for rejected order request.
	RejectDetailsInternal *string `protobuf:"bytes,4,opt,name=reject_details_internal,json=rejectDetailsInternal" json:"reject_details_internal,omitempty"`
	// ID of a user who placed the order.
	UserId *string `protobuf:"bytes,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// User name.
	UserName *string `protobuf:"bytes,6,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	// Account name.
	AccountName *string `protobuf:"bytes,7,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// Brokerage account number.
	BrokerageAccountNumber *string `protobuf:"bytes,8,opt,name=brokerage_account_number,json=brokerageAccountNumber" json:"brokerage_account_number,omitempty"`
}

func (x *AccountAndUserInfo) Reset() {
	*x = AccountAndUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountAndUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountAndUserInfo) ProtoMessage() {}

func (x *AccountAndUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountAndUserInfo.ProtoReflect.Descriptor instead.
func (*AccountAndUserInfo) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{86}
}

func (x *AccountAndUserInfo) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *AccountAndUserInfo) GetUserInfo() string {
	if x != nil && x.UserInfo != nil {
		return *x.UserInfo
	}
	return ""
}

func (x *AccountAndUserInfo) GetRejectDetails() string {
	if x != nil && x.RejectDetails != nil {
		return *x.RejectDetails
	}
	return ""
}

func (x *AccountAndUserInfo) GetRejectDetailsInternal() string {
	if x != nil && x.RejectDetailsInternal != nil {
		return *x.RejectDetailsInternal
	}
	return ""
}

func (x *AccountAndUserInfo) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *AccountAndUserInfo) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *AccountAndUserInfo) GetAccountName() string {
	if x != nil && x.AccountName != nil {
		return *x.AccountName
	}
	return ""
}

func (x *AccountAndUserInfo) GetBrokerageAccountNumber() string {
	if x != nil && x.BrokerageAccountNumber != nil {
		return *x.BrokerageAccountNumber
	}
	return ""
}

// Trade routing order request.
// Attributes of the order request (place, replace or cancel) allow to track order changes during the its lifetime.
type OrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order request identifier assigned by server.
	OrderId *string `protobuf:"bytes,1,req,name=order_id,json=orderId" json:"order_id,omitempty"`
	// Time when order request was submitted to execution system (UTC).
	SubmittedUtcTime *int64 `protobuf:"zigzag64,2,req,name=submitted_utc_time,json=submittedUtcTime" json:"submitted_utc_time,omitempty"`
	// Type of the request.
	// This field is associated with OrderRequest.RequestType enum type.
	RequestType *uint32 `protobuf:"varint,3,req,name=request_type,json=requestType" json:"request_type,omitempty"`
	// Order type.
	// This field is associated with OrderChain.OrderType enum type.
	OrderType *uint32 `protobuf:"varint,4,opt,name=order_type,json=orderType" json:"order_type,omitempty"`
	// Positive size of the order request.
	Size *uint32 `protobuf:"varint,6,opt,name=size" json:"size,omitempty"`
	// Order limit price.
	// Correct price format.
	LimitPrice *float64 `protobuf:"fixed64,7,opt,name=limit_price,json=limitPrice" json:"limit_price,omitempty"`
	// Order stop price.
	// Correct price format.
	StopPrice *float64 `protobuf:"fixed64,8,opt,name=stop_price,json=stopPrice" json:"stop_price,omitempty"`
	// Order duration.
	// This field is associated with OrderChain.Duration enum type.
	Duration *uint32 `protobuf:"varint,9,opt,name=duration" json:"duration,omitempty"`
	// Date for GTD (local to exchange, date only value in time format) when the order should expire.
	GoodThruDate *int64 `protobuf:"zigzag64,10,opt,name=good_thru_date,json=goodThruDate" json:"good_thru_date,omitempty"`
	// Date and time for GTT order (UTC) when the order should expire.
	GoodThruUtcTime *int64 `protobuf:"zigzag64,11,opt,name=good_thru_utc_time,json=goodThruUtcTime" json:"good_thru_utc_time,omitempty"`
	// Current order request state.
	// This field is associated with OrderRequest.State enum type.
	State *uint32 `protobuf:"varint,12,req,name=state" json:"state,omitempty"`
	// ID of order request that this request was applied to (for cancel and replace requests only).
	LinkOrderId *string `protobuf:"bytes,13,opt,name=link_order_id,json=linkOrderId" json:"link_order_id,omitempty"`
	// List of [last] transactions.
	// All available transactions are sent.
	TransactionStatus []*TransactionStatus `protobuf:"bytes,14,rep,name=transaction_status,json=transactionStatus" json:"transaction_status,omitempty"`
	// List of accounts associated with an order request with user information.
	AccountAndUserInfo []*AccountAndUserInfo `protobuf:"bytes,15,rep,name=account_and_user_info,json=accountAndUserInfo" json:"account_and_user_info,omitempty"`
	// Order limit price.
	// Display price format.
	DisplayLimitPrice *int64 `protobuf:"zigzag64,16,opt,name=display_limit_price,json=displayLimitPrice" json:"display_limit_price,omitempty"`
	// Order stop price.
	// Display price format.
	DisplayStopPrice *int64 `protobuf:"zigzag64,17,opt,name=display_stop_price,json=displayStopPrice" json:"display_stop_price,omitempty"`
	// Trailing specific information.
	Trailing *OrderTrailing `protobuf:"bytes,19,opt,name=trailing" json:"trailing,omitempty"`
	// Specific order sizes.
	Sizes *OrderSizes `protobuf:"bytes,20,opt,name=sizes" json:"sizes,omitempty"`
	// Ticket number.
	TicketNumber *string `protobuf:"bytes,21,opt,name=ticket_number,json=ticketNumber" json:"ticket_number,omitempty"`
	// Request comments.
	Comments *string `protobuf:"bytes,22,opt,name=comments" json:"comments,omitempty"`
	// The values are associated with a lookup property with ORDER_CLASS type.
	OrderClasses []string `protobuf:"bytes,23,rep,name=order_classes,json=orderClasses" json:"order_classes,omitempty"`
	// Native order type.
	NativeOrderType *uint32 `protobuf:"varint,24,opt,name=native_order_type,json=nativeOrderType" json:"native_order_type,omitempty"`
	// Activation time.
	ActivationTime *int64 `protobuf:"zigzag64,25,opt,name=activation_time,json=activationTime" json:"activation_time,omitempty"`
	// Park time.
	SuspensionTime *int64 `protobuf:"zigzag64,26,opt,name=suspension_time,json=suspensionTime" json:"suspension_time,omitempty"`
	// Expiration time.
	ExpirationTime *int64 `protobuf:"zigzag64,27,opt,name=expiration_time,json=expirationTime" json:"expiration_time,omitempty"`
	// Routes.
	Routes []*OrderRoute `protobuf:"bytes,28,rep,name=routes" json:"routes,omitempty"`
	// Client regulation algorithm.
	ClientRegulatoryAlgorithmId *string `protobuf:"bytes,29,opt,name=client_regulatory_algorithm_id,json=clientRegulatoryAlgorithmId" json:"client_regulatory_algorithm_id,omitempty"`
	// Effective regulation algorithm.
	EffectiveRegulatoryAlgorithmId *string `protobuf:"bytes,30,opt,name=effective_regulatory_algorithm_id,json=effectiveRegulatoryAlgorithmId" json:"effective_regulatory_algorithm_id,omitempty"`
	// Operational details.
	OperationalDetails *OperationalDetails `protobuf:"bytes,34,opt,name=operational_details,json=operationalDetails" json:"operational_details,omitempty"`
	// Specific instructions.
	Instructions *string `protobuf:"bytes,35,opt,name=instructions" json:"instructions,omitempty"`
	// Client extra values.
	// First - name, second - value.
	ClientExtraValues []*Tuple `protobuf:"bytes,36,rep,name=client_extra_values,json=clientExtraValues" json:"client_extra_values,omitempty"`
	// Route client order ID.
	RouteClientOrderId *string `protobuf:"bytes,37,opt,name=route_client_order_id,json=routeClientOrderId" json:"route_client_order_id,omitempty"`
	// Discretionary offset, in the number of ticks.
	DiscretionaryOffset *uint32 `protobuf:"varint,38,opt,name=discretionary_offset,json=discretionaryOffset" json:"discretionary_offset,omitempty"`
	// List of execution instructions.
	// This field is associated with OrderChain.ExecInstruction enum type.
	ExecInstruction []uint32 `protobuf:"varint,39,rep,name=exec_instruction,json=execInstruction" json:"exec_instruction,omitempty"`
}

func (x *OrderRequest) Reset() {
	*x = OrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderRequest) ProtoMessage() {}

func (x *OrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderRequest.ProtoReflect.Descriptor instead.
func (*OrderRequest) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{87}
}

func (x *OrderRequest) GetOrderId() string {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return ""
}

func (x *OrderRequest) GetSubmittedUtcTime() int64 {
	if x != nil && x.SubmittedUtcTime != nil {
		return *x.SubmittedUtcTime
	}
	return 0
}

func (x *OrderRequest) GetRequestType() uint32 {
	if x != nil && x.RequestType != nil {
		return *x.RequestType
	}
	return 0
}

func (x *OrderRequest) GetOrderType() uint32 {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return 0
}

func (x *OrderRequest) GetSize() uint32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *OrderRequest) GetLimitPrice() float64 {
	if x != nil && x.LimitPrice != nil {
		return *x.LimitPrice
	}
	return 0
}

func (x *OrderRequest) GetStopPrice() float64 {
	if x != nil && x.StopPrice != nil {
		return *x.StopPrice
	}
	return 0
}

func (x *OrderRequest) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *OrderRequest) GetGoodThruDate() int64 {
	if x != nil && x.GoodThruDate != nil {
		return *x.GoodThruDate
	}
	return 0
}

func (x *OrderRequest) GetGoodThruUtcTime() int64 {
	if x != nil && x.GoodThruUtcTime != nil {
		return *x.GoodThruUtcTime
	}
	return 0
}

func (x *OrderRequest) GetState() uint32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *OrderRequest) GetLinkOrderId() string {
	if x != nil && x.LinkOrderId != nil {
		return *x.LinkOrderId
	}
	return ""
}

func (x *OrderRequest) GetTransactionStatus() []*TransactionStatus {
	if x != nil {
		return x.TransactionStatus
	}
	return nil
}

func (x *OrderRequest) GetAccountAndUserInfo() []*AccountAndUserInfo {
	if x != nil {
		return x.AccountAndUserInfo
	}
	return nil
}

func (x *OrderRequest) GetDisplayLimitPrice() int64 {
	if x != nil && x.DisplayLimitPrice != nil {
		return *x.DisplayLimitPrice
	}
	return 0
}

func (x *OrderRequest) GetDisplayStopPrice() int64 {
	if x != nil && x.DisplayStopPrice != nil {
		return *x.DisplayStopPrice
	}
	return 0
}

func (x *OrderRequest) GetTrailing() *OrderTrailing {
	if x != nil {
		return x.Trailing
	}
	return nil
}

func (x *OrderRequest) GetSizes() *OrderSizes {
	if x != nil {
		return x.Sizes
	}
	return nil
}

func (x *OrderRequest) GetTicketNumber() string {
	if x != nil && x.TicketNumber != nil {
		return *x.TicketNumber
	}
	return ""
}

func (x *OrderRequest) GetComments() string {
	if x != nil && x.Comments != nil {
		return *x.Comments
	}
	return ""
}

func (x *OrderRequest) GetOrderClasses() []string {
	if x != nil {
		return x.OrderClasses
	}
	return nil
}

func (x *OrderRequest) GetNativeOrderType() uint32 {
	if x != nil && x.NativeOrderType != nil {
		return *x.NativeOrderType
	}
	return 0
}

func (x *OrderRequest) GetActivationTime() int64 {
	if x != nil && x.ActivationTime != nil {
		return *x.ActivationTime
	}
	return 0
}

func (x *OrderRequest) GetSuspensionTime() int64 {
	if x != nil && x.SuspensionTime != nil {
		return *x.SuspensionTime
	}
	return 0
}

func (x *OrderRequest) GetExpirationTime() int64 {
	if x != nil && x.ExpirationTime != nil {
		return *x.ExpirationTime
	}
	return 0
}

func (x *OrderRequest) GetRoutes() []*OrderRoute {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *OrderRequest) GetClientRegulatoryAlgorithmId() string {
	if x != nil && x.ClientRegulatoryAlgorithmId != nil {
		return *x.ClientRegulatoryAlgorithmId
	}
	return ""
}

func (x *OrderRequest) GetEffectiveRegulatoryAlgorithmId() string {
	if x != nil && x.EffectiveRegulatoryAlgorithmId != nil {
		return *x.EffectiveRegulatoryAlgorithmId
	}
	return ""
}

func (x *OrderRequest) GetOperationalDetails() *OperationalDetails {
	if x != nil {
		return x.OperationalDetails
	}
	return nil
}

func (x *OrderRequest) GetInstructions() string {
	if x != nil && x.Instructions != nil {
		return *x.Instructions
	}
	return ""
}

func (x *OrderRequest) GetClientExtraValues() []*Tuple {
	if x != nil {
		return x.ClientExtraValues
	}
	return nil
}

func (x *OrderRequest) GetRouteClientOrderId() string {
	if x != nil && x.RouteClientOrderId != nil {
		return *x.RouteClientOrderId
	}
	return ""
}

func (x *OrderRequest) GetDiscretionaryOffset() uint32 {
	if x != nil && x.DiscretionaryOffset != nil {
		return *x.DiscretionaryOffset
	}
	return 0
}

func (x *OrderRequest) GetExecInstruction() []uint32 {
	if x != nil {
		return x.ExecInstruction
	}
	return nil
}

// Represents order sizes.
type OrderSizes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trigger size. (DOM Threshold).
	TriggerSize *uint32 `protobuf:"varint,1,opt,name=trigger_size,json=triggerSize" json:"trigger_size,omitempty"`
	// Visible size. Iceberg.
	VisibleSize *uint32 `protobuf:"varint,2,opt,name=visible_size,json=visibleSize" json:"visible_size,omitempty"`
	// Minimum visible size. Iceberg.
	MinVisibleSize *uint32 `protobuf:"varint,3,opt,name=min_visible_size,json=minVisibleSize" json:"min_visible_size,omitempty"`
	// Remaining size of chain (set only for chain).
	RemainingSize *uint32 `protobuf:"varint,4,opt,name=remaining_size,json=remainingSize" json:"remaining_size,omitempty"`
}

func (x *OrderSizes) Reset() {
	*x = OrderSizes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderSizes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderSizes) ProtoMessage() {}

func (x *OrderSizes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderSizes.ProtoReflect.Descriptor instead.
func (*OrderSizes) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{88}
}

func (x *OrderSizes) GetTriggerSize() uint32 {
	if x != nil && x.TriggerSize != nil {
		return *x.TriggerSize
	}
	return 0
}

func (x *OrderSizes) GetVisibleSize() uint32 {
	if x != nil && x.VisibleSize != nil {
		return *x.VisibleSize
	}
	return 0
}

func (x *OrderSizes) GetMinVisibleSize() uint32 {
	if x != nil && x.MinVisibleSize != nil {
		return *x.MinVisibleSize
	}
	return 0
}

func (x *OrderSizes) GetRemainingSize() uint32 {
	if x != nil && x.RemainingSize != nil {
		return *x.RemainingSize
	}
	return 0
}

// Represents order trailing information.
type OrderTrailing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field is associated with TrailType enum type.
	TrailType *uint32 `protobuf:"varint,1,opt,name=trail_type,json=trailType" json:"trail_type,omitempty"`
	// Trail offset.
	// Correct format.
	Offset *float64 `protobuf:"fixed64,2,opt,name=offset" json:"offset,omitempty"`
	// Trail stop price.
	// Correct format.
	StopPrice *float64 `protobuf:"fixed64,3,opt,name=stop_price,json=stopPrice" json:"stop_price,omitempty"`
	// Trail limit price.
	// Correct format.
	LimitPrice *float64 `protobuf:"fixed64,4,opt,name=limit_price,json=limitPrice" json:"limit_price,omitempty"`
	// Trail offset.
	// Display format.
	DisplayOffset *int64 `protobuf:"zigzag64,5,opt,name=display_offset,json=displayOffset" json:"display_offset,omitempty"`
	// Trail stop price.
	// Display format.
	DisplayStopPrice *int64 `protobuf:"zigzag64,6,opt,name=display_stop_price,json=displayStopPrice" json:"display_stop_price,omitempty"`
	// Trail limit price.
	// Display format.
	DisplayLimitPrice *int64 `protobuf:"zigzag64,7,opt,name=display_limit_price,json=displayLimitPrice" json:"display_limit_price,omitempty"`
	// Prices update time.
	UpdateTime *int64 `protobuf:"zigzag64,8,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
}

func (x *OrderTrailing) Reset() {
	*x = OrderTrailing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderTrailing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderTrailing) ProtoMessage() {}

func (x *OrderTrailing) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderTrailing.ProtoReflect.Descriptor instead.
func (*OrderTrailing) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{89}
}

func (x *OrderTrailing) GetTrailType() uint32 {
	if x != nil && x.TrailType != nil {
		return *x.TrailType
	}
	return 0
}

func (x *OrderTrailing) GetOffset() float64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *OrderTrailing) GetStopPrice() float64 {
	if x != nil && x.StopPrice != nil {
		return *x.StopPrice
	}
	return 0
}

func (x *OrderTrailing) GetLimitPrice() float64 {
	if x != nil && x.LimitPrice != nil {
		return *x.LimitPrice
	}
	return 0
}

func (x *OrderTrailing) GetDisplayOffset() int64 {
	if x != nil && x.DisplayOffset != nil {
		return *x.DisplayOffset
	}
	return 0
}

func (x *OrderTrailing) GetDisplayStopPrice() int64 {
	if x != nil && x.DisplayStopPrice != nil {
		return *x.DisplayStopPrice
	}
	return 0
}

func (x *OrderTrailing) GetDisplayLimitPrice() int64 {
	if x != nil && x.DisplayLimitPrice != nil {
		return *x.DisplayLimitPrice
	}
	return 0
}

func (x *OrderTrailing) GetUpdateTime() int64 {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return 0
}

// Operational details.
type OperationalDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Client-side order id.
	ClientOrderId *string `protobuf:"bytes,1,opt,name=client_order_id,json=clientOrderId" json:"client_order_id,omitempty"`
	// Unique client guid.
	ClientGuid *string `protobuf:"bytes,2,opt,name=client_guid,json=clientGuid" json:"client_guid,omitempty"`
	// Client unqiue system id.
	// Hidden for Sale Series scope.
	ClientSystemId *string `protobuf:"bytes,3,opt,name=client_system_id,json=clientSystemId" json:"client_system_id,omitempty"`
	// Client ip address.
	ClientIp *string `protobuf:"bytes,4,opt,name=client_ip,json=clientIp" json:"client_ip,omitempty"`
	// Client application version.
	ClientVersion *string `protobuf:"bytes,5,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	// Trade location.
	TradeLocationId *string `protobuf:"bytes,6,opt,name=trade_location_id,json=tradeLocationId" json:"trade_location_id,omitempty"`
}

func (x *OperationalDetails) Reset() {
	*x = OperationalDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationalDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationalDetails) ProtoMessage() {}

func (x *OperationalDetails) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationalDetails.ProtoReflect.Descriptor instead.
func (*OperationalDetails) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{90}
}

func (x *OperationalDetails) GetClientOrderId() string {
	if x != nil && x.ClientOrderId != nil {
		return *x.ClientOrderId
	}
	return ""
}

func (x *OperationalDetails) GetClientGuid() string {
	if x != nil && x.ClientGuid != nil {
		return *x.ClientGuid
	}
	return ""
}

func (x *OperationalDetails) GetClientSystemId() string {
	if x != nil && x.ClientSystemId != nil {
		return *x.ClientSystemId
	}
	return ""
}

func (x *OperationalDetails) GetClientIp() string {
	if x != nil && x.ClientIp != nil {
		return *x.ClientIp
	}
	return ""
}

func (x *OperationalDetails) GetClientVersion() string {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return ""
}

func (x *OperationalDetails) GetTradeLocationId() string {
	if x != nil && x.TradeLocationId != nil {
		return *x.TradeLocationId
	}
	return ""
}

// Status of a specific transaction.
// All attributes are at the transaction moment.
type TransactionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field is associated with Status enum type.
	Status *uint32 `protobuf:"varint,1,req,name=status" json:"status,omitempty"`
	// Order transaction identifier, unique within order chain.
	TransId *uint64 `protobuf:"varint,2,req,name=trans_id,json=transId" json:"trans_id,omitempty"`
	// Transaction time assigned by server (UTC).
	TransUtcTime *int64 `protobuf:"zigzag64,3,req,name=trans_utc_time,json=transUtcTime" json:"trans_utc_time,omitempty"`
	// Order request state at the transaction moment.
	// This field is associated with OrderRequest.State enum type.
	OrderState *uint32 `protobuf:"varint,4,req,name=order_state,json=orderState" json:"order_state,omitempty"`
	// Order chain status at the transaction moment.
	// This field is associated with OrderChain.Status enum type.
	OrderChainStatus *uint32 `protobuf:"varint,5,req,name=order_chain_status,json=orderChainStatus" json:"order_chain_status,omitempty"`
	// Additional transaction comments.
	TextMessage *string `protobuf:"bytes,6,opt,name=text_message,json=textMessage" json:"text_message,omitempty"`
	// Updated discretionary offset in the number of ticks.
	NewDiscretionaryOffset *uint32 `protobuf:"varint,7,opt,name=new_discretionary_offset,json=newDiscretionaryOffset" json:"new_discretionary_offset,omitempty"`
	// Discretionary offset before the change.
	PrevDiscretionaryOffset *uint32 `protobuf:"varint,8,opt,name=prev_discretionary_offset,json=prevDiscretionaryOffset" json:"prev_discretionary_offset,omitempty"`
}

func (x *TransactionStatus) Reset() {
	*x = TransactionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionStatus) ProtoMessage() {}

func (x *TransactionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionStatus.ProtoReflect.Descriptor instead.
func (*TransactionStatus) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{91}
}

func (x *TransactionStatus) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *TransactionStatus) GetTransId() uint64 {
	if x != nil && x.TransId != nil {
		return *x.TransId
	}
	return 0
}

func (x *TransactionStatus) GetTransUtcTime() int64 {
	if x != nil && x.TransUtcTime != nil {
		return *x.TransUtcTime
	}
	return 0
}

func (x *TransactionStatus) GetOrderState() uint32 {
	if x != nil && x.OrderState != nil {
		return *x.OrderState
	}
	return 0
}

func (x *TransactionStatus) GetOrderChainStatus() uint32 {
	if x != nil && x.OrderChainStatus != nil {
		return *x.OrderChainStatus
	}
	return 0
}

func (x *TransactionStatus) GetTextMessage() string {
	if x != nil && x.TextMessage != nil {
		return *x.TextMessage
	}
	return ""
}

func (x *TransactionStatus) GetNewDiscretionaryOffset() uint32 {
	if x != nil && x.NewDiscretionaryOffset != nil {
		return *x.NewDiscretionaryOffset
	}
	return 0
}

func (x *TransactionStatus) GetPrevDiscretionaryOffset() uint32 {
	if x != nil && x.PrevDiscretionaryOffset != nil {
		return *x.PrevDiscretionaryOffset
	}
	return 0
}

// Gateway order fill.
type OrderFill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trade routing order fill unique identifier.
	Id *int64 `protobuf:"zigzag64,1,opt,name=id" json:"id,omitempty"`
	// Trade routing order fill execution identifier.
	ExecId *string `protobuf:"bytes,2,opt,name=exec_id,json=execId" json:"exec_id,omitempty"`
	// Quantity of bought or sold lots depending on order side.
	Quantity *uint32 `protobuf:"varint,3,opt,name=quantity" json:"quantity,omitempty"`
	// Price at which the lots were bought or sold.
	// Correct price.
	Price *float64 `protobuf:"fixed64,4,opt,name=price" json:"price,omitempty"`
	// UTC time the fill happened (offset in milliseconds from 01.01.1970).
	FillUtcTime *int64 `protobuf:"zigzag64,5,opt,name=fill_utc_time,json=fillUtcTime" json:"fill_utc_time,omitempty"`
	// Flag that trade was aggressive (Fixed Income specific order modifier).
	IsAggressive *bool `protobuf:"varint,6,opt,name=is_aggressive,json=isAggressive" json:"is_aggressive,omitempty"`
	// Leg fills associated with this order fill.
	LegFills []*LegFill `protobuf:"bytes,7,rep,name=leg_fills,json=legFills" json:"leg_fills,omitempty"`
	// Interesting to show.
	// Order request ID associated with the fill.
	OrderId *string `protobuf:"bytes,8,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	// Status of the fill.
	// The value is associated with FillStatus enum.
	FillStatus *uint32 `protobuf:"varint,9,opt,name=fill_status,json=fillStatus" json:"fill_status,omitempty"`
	// Associated fill care order request id.
	FillCareOrderRequestId *string `protobuf:"bytes,10,opt,name=fill_care_order_request_id,json=fillCareOrderRequestId" json:"fill_care_order_request_id,omitempty"`
	// Price at which the lots were bought or sold.
	// Display price.
	DisplayPrice *int64 `protobuf:"zigzag64,11,opt,name=display_price,json=displayPrice" json:"display_price,omitempty"`
	// Fill open/close type.
	// This field is associated with OrderChain.OpenCloseType enum type.
	OpenCloseType *uint32 `protobuf:"varint,12,opt,name=open_close_type,json=openCloseType" json:"open_close_type,omitempty"`
	// Fill speculation type.
	// This field is associated with OrderChain.SpeculationType enum type.
	SpeculationType *uint32 `protobuf:"varint,13,opt,name=speculation_type,json=speculationType" json:"speculation_type,omitempty"`
	// Commission value of the fill.
	Commission *float64 `protobuf:"fixed64,14,opt,name=commission" json:"commission,omitempty"`
	// Commission currency code (ISO 4217 based) of the fill.
	CommissionCurrency *string `protobuf:"bytes,15,opt,name=commission_currency,json=commissionCurrency" json:"commission_currency,omitempty"`
}

func (x *OrderFill) Reset() {
	*x = OrderFill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderFill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderFill) ProtoMessage() {}

func (x *OrderFill) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderFill.ProtoReflect.Descriptor instead.
func (*OrderFill) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{92}
}

func (x *OrderFill) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *OrderFill) GetExecId() string {
	if x != nil && x.ExecId != nil {
		return *x.ExecId
	}
	return ""
}

func (x *OrderFill) GetQuantity() uint32 {
	if x != nil && x.Quantity != nil {
		return *x.Quantity
	}
	return 0
}

func (x *OrderFill) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *OrderFill) GetFillUtcTime() int64 {
	if x != nil && x.FillUtcTime != nil {
		return *x.FillUtcTime
	}
	return 0
}

func (x *OrderFill) GetIsAggressive() bool {
	if x != nil && x.IsAggressive != nil {
		return *x.IsAggressive
	}
	return false
}

func (x *OrderFill) GetLegFills() []*LegFill {
	if x != nil {
		return x.LegFills
	}
	return nil
}

func (x *OrderFill) GetOrderId() string {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return ""
}

func (x *OrderFill) GetFillStatus() uint32 {
	if x != nil && x.FillStatus != nil {
		return *x.FillStatus
	}
	return 0
}

func (x *OrderFill) GetFillCareOrderRequestId() string {
	if x != nil && x.FillCareOrderRequestId != nil {
		return *x.FillCareOrderRequestId
	}
	return ""
}

func (x *OrderFill) GetDisplayPrice() int64 {
	if x != nil && x.DisplayPrice != nil {
		return *x.DisplayPrice
	}
	return 0
}

func (x *OrderFill) GetOpenCloseType() uint32 {
	if x != nil && x.OpenCloseType != nil {
		return *x.OpenCloseType
	}
	return 0
}

func (x *OrderFill) GetSpeculationType() uint32 {
	if x != nil && x.SpeculationType != nil {
		return *x.SpeculationType
	}
	return 0
}

func (x *OrderFill) GetCommission() float64 {
	if x != nil && x.Commission != nil {
		return *x.Commission
	}
	return 0
}

func (x *OrderFill) GetCommissionCurrency() string {
	if x != nil && x.CommissionCurrency != nil {
		return *x.CommissionCurrency
	}
	return ""
}

// Trade routing fill leg.
type LegFill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trade routing leg fill unique identifier.
	Id *int64 `protobuf:"zigzag64,1,opt,name=id" json:"id,omitempty"`
	// Trade routing leg fill execution identifier.
	ExecId *string `protobuf:"bytes,2,opt,name=exec_id,json=execId" json:"exec_id,omitempty"`
	// Full contract symbol for this leg.
	ContractSymbol *string `protobuf:"bytes,3,opt,name=contract_symbol,json=contractSymbol" json:"contract_symbol,omitempty"`
	// Quantity of bought or sold lots depending on leg side.
	Quantity *uint32 `protobuf:"varint,4,opt,name=quantity" json:"quantity,omitempty"`
	// Leg side.
	// This field is associated with OrderChain.Side enum type.
	Side *uint32 `protobuf:"varint,5,opt,name=side" json:"side,omitempty"`
	// Price at which the lots were bought or sold.
	// Correct price.
	Price *float64 `protobuf:"fixed64,6,opt,name=price" json:"price,omitempty"`
	// UTC time the fill happened (offset in milliseconds from 01.01.1970).
	FillUtcTime *int64 `protobuf:"zigzag64,7,opt,name=fill_utc_time,json=fillUtcTime" json:"fill_utc_time,omitempty"`
	// Status of the leg fill.
	// The value is associated with OrderFill.FillStatus enum.
	FillStatus *uint32 `protobuf:"varint,8,opt,name=fill_status,json=fillStatus" json:"fill_status,omitempty"`
	// Price at which the lots were bought or sold.
	// Display price.
	DisplayPrice *int64 `protobuf:"zigzag64,9,opt,name=display_price,json=displayPrice" json:"display_price,omitempty"`
	// Leg fill open/close type.
	// This field is associated with OrderChain.OpenCloseType enum type.
	OpenCloseType *uint32 `protobuf:"varint,10,opt,name=open_close_type,json=openCloseType" json:"open_close_type,omitempty"`
	// Leg fill speculation type.
	// This field is associated with OrderChain.SpeculationType enum type.
	SpeculationType *uint32 `protobuf:"varint,11,opt,name=speculation_type,json=speculationType" json:"speculation_type,omitempty"`
	// Flag that trade was aggressive (Fixed Income specific order modifier).
	IsAggressive *bool `protobuf:"varint,12,opt,name=is_aggressive,json=isAggressive" json:"is_aggressive,omitempty"`
}

func (x *LegFill) Reset() {
	*x = LegFill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LegFill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegFill) ProtoMessage() {}

func (x *LegFill) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegFill.ProtoReflect.Descriptor instead.
func (*LegFill) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{93}
}

func (x *LegFill) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *LegFill) GetExecId() string {
	if x != nil && x.ExecId != nil {
		return *x.ExecId
	}
	return ""
}

func (x *LegFill) GetContractSymbol() string {
	if x != nil && x.ContractSymbol != nil {
		return *x.ContractSymbol
	}
	return ""
}

func (x *LegFill) GetQuantity() uint32 {
	if x != nil && x.Quantity != nil {
		return *x.Quantity
	}
	return 0
}

func (x *LegFill) GetSide() uint32 {
	if x != nil && x.Side != nil {
		return *x.Side
	}
	return 0
}

func (x *LegFill) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *LegFill) GetFillUtcTime() int64 {
	if x != nil && x.FillUtcTime != nil {
		return *x.FillUtcTime
	}
	return 0
}

func (x *LegFill) GetFillStatus() uint32 {
	if x != nil && x.FillStatus != nil {
		return *x.FillStatus
	}
	return 0
}

func (x *LegFill) GetDisplayPrice() int64 {
	if x != nil && x.DisplayPrice != nil {
		return *x.DisplayPrice
	}
	return 0
}

func (x *LegFill) GetOpenCloseType() uint32 {
	if x != nil && x.OpenCloseType != nil {
		return *x.OpenCloseType
	}
	return 0
}

func (x *LegFill) GetSpeculationType() uint32 {
	if x != nil && x.SpeculationType != nil {
		return *x.SpeculationType
	}
	return 0
}

func (x *LegFill) GetIsAggressive() bool {
	if x != nil && x.IsAggressive != nil {
		return *x.IsAggressive
	}
	return false
}

// Represents order with related child orders.
type RelatedOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Associated Order chain.
	OrderChain *OrderChain `protobuf:"bytes,1,opt,name=order_chain,json=orderChain" json:"order_chain,omitempty"`
	// Child order chains.
	Children []*RelatedOrder `protobuf:"bytes,2,rep,name=children" json:"children,omitempty"`
	// [required] Leg path.
	// Example: '1/2/'.
	LegPath *string `protobuf:"bytes,3,opt,name=leg_path,json=legPath" json:"leg_path,omitempty"`
}

func (x *RelatedOrder) Reset() {
	*x = RelatedOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelatedOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedOrder) ProtoMessage() {}

func (x *RelatedOrder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedOrder.ProtoReflect.Descriptor instead.
func (*RelatedOrder) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{94}
}

func (x *RelatedOrder) GetOrderChain() *OrderChain {
	if x != nil {
		return x.OrderChain
	}
	return nil
}

func (x *RelatedOrder) GetChildren() []*RelatedOrder {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *RelatedOrder) GetLegPath() string {
	if x != nil && x.LegPath != nil {
		return *x.LegPath
	}
	return ""
}

// Represents compound order with child orders.
type CompoundOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Compound order id.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// [required] Compound role.
	// This field is associated with CompoundOrder.CompoundOrderNodeRole enum type.
	NodeRole *uint32 `protobuf:"varint,2,opt,name=node_role,json=nodeRole" json:"node_role,omitempty"`
	// [required] Compound type.
	// This field is associated with CompoundOrder.CompoundOrderType enum type.
	Type *uint32 `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	// [required] Unique compound client guid.
	ClientGuid *string `protobuf:"bytes,5,opt,name=client_guid,json=clientGuid" json:"client_guid,omitempty"`
	// [required] Trigger on market type.
	// This field is associated with CompoundOrder.CompoundOrderTriggerType enum type.
	TriggerType *uint32 `protobuf:"varint,6,opt,name=trigger_type,json=triggerType" json:"trigger_type,omitempty"`
	// Associated order chain.
	// Required when compound order type is ORDER.
	OrderChain *OrderChain `protobuf:"bytes,7,opt,name=order_chain,json=orderChain" json:"order_chain,omitempty"`
	// Child compounds.
	Children []*CompoundOrder `protobuf:"bytes,8,rep,name=children" json:"children,omitempty"`
}

func (x *CompoundOrder) Reset() {
	*x = CompoundOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompoundOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompoundOrder) ProtoMessage() {}

func (x *CompoundOrder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompoundOrder.ProtoReflect.Descriptor instead.
func (*CompoundOrder) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{95}
}

func (x *CompoundOrder) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *CompoundOrder) GetNodeRole() uint32 {
	if x != nil && x.NodeRole != nil {
		return *x.NodeRole
	}
	return 0
}

func (x *CompoundOrder) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CompoundOrder) GetClientGuid() string {
	if x != nil && x.ClientGuid != nil {
		return *x.ClientGuid
	}
	return ""
}

func (x *CompoundOrder) GetTriggerType() uint32 {
	if x != nil && x.TriggerType != nil {
		return *x.TriggerType
	}
	return 0
}

func (x *CompoundOrder) GetOrderChain() *OrderChain {
	if x != nil {
		return x.OrderChain
	}
	return nil
}

func (x *CompoundOrder) GetChildren() []*CompoundOrder {
	if x != nil {
		return x.Children
	}
	return nil
}

// Represents strategy leg with child legs.
type StrategyLeg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Leg path.
	LegPath *string `protobuf:"bytes,1,opt,name=leg_path,json=legPath" json:"leg_path,omitempty"`
	// [required] Strategy contract.
	ContractSymbol *string `protobuf:"bytes,2,opt,name=contract_symbol,json=contractSymbol" json:"contract_symbol,omitempty"`
	// [required] Quantity ratio.
	QuantityRatio *float64 `protobuf:"fixed64,3,opt,name=quantity_ratio,json=quantityRatio" json:"quantity_ratio,omitempty"`
	// [required] Price ratio.
	PriceRatio *float64 `protobuf:"fixed64,4,opt,name=price_ratio,json=priceRatio" json:"price_ratio,omitempty"`
	// [required] Associated with StrategyMode enum.
	Mode *uint32 `protobuf:"varint,5,opt,name=mode" json:"mode,omitempty"`
	// [required] Account.
	Account *ChainAccount `protobuf:"bytes,6,opt,name=account" json:"account,omitempty"`
	// Yield model.
	// First - key, second - value.
	YieldModel []*Tuple `protobuf:"bytes,7,rep,name=yield_model,json=yieldModel" json:"yield_model,omitempty"`
	// Child legs.
	Legs []*StrategyLeg `protobuf:"bytes,8,rep,name=legs" json:"legs,omitempty"`
	// Strategy leg open/close type.
	// This field is associated with OrderChain.OpenCloseType enum type.
	OpenCloseType *uint32 `protobuf:"varint,9,opt,name=open_close_type,json=openCloseType" json:"open_close_type,omitempty"`
	// Strategy leg speculation type.
	// This field is associated with OrderChain.SpeculationType enum type.
	SpeculationType *uint32 `protobuf:"varint,10,opt,name=speculation_type,json=speculationType" json:"speculation_type,omitempty"`
}

func (x *StrategyLeg) Reset() {
	*x = StrategyLeg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrategyLeg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrategyLeg) ProtoMessage() {}

func (x *StrategyLeg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrategyLeg.ProtoReflect.Descriptor instead.
func (*StrategyLeg) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{96}
}

func (x *StrategyLeg) GetLegPath() string {
	if x != nil && x.LegPath != nil {
		return *x.LegPath
	}
	return ""
}

func (x *StrategyLeg) GetContractSymbol() string {
	if x != nil && x.ContractSymbol != nil {
		return *x.ContractSymbol
	}
	return ""
}

func (x *StrategyLeg) GetQuantityRatio() float64 {
	if x != nil && x.QuantityRatio != nil {
		return *x.QuantityRatio
	}
	return 0
}

func (x *StrategyLeg) GetPriceRatio() float64 {
	if x != nil && x.PriceRatio != nil {
		return *x.PriceRatio
	}
	return 0
}

func (x *StrategyLeg) GetMode() uint32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

func (x *StrategyLeg) GetAccount() *ChainAccount {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *StrategyLeg) GetYieldModel() []*Tuple {
	if x != nil {
		return x.YieldModel
	}
	return nil
}

func (x *StrategyLeg) GetLegs() []*StrategyLeg {
	if x != nil {
		return x.Legs
	}
	return nil
}

func (x *StrategyLeg) GetOpenCloseType() uint32 {
	if x != nil && x.OpenCloseType != nil {
		return *x.OpenCloseType
	}
	return 0
}

func (x *StrategyLeg) GetSpeculationType() uint32 {
	if x != nil && x.SpeculationType != nil {
		return *x.SpeculationType
	}
	return 0
}

// Represents general information about CQG Gateway account.
type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required-update] Trade routing account identifier.
	// Omit the value during account creation.
	Id *int32 `protobuf:"zigzag32,1,opt,name=id" json:"id,omitempty"`
	// [required-create] Account name (max length = 64).
	// Can contain prefix (like SIM for simalation account) which cannot be changed.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// [required-create] Brokerage account number (max length = 12).
	// Can contain prefix (like PS for permanent simulation) which cannot be changed.
	BrokerageAccountNumber *string `protobuf:"bytes,3,opt,name=brokerage_account_number,json=brokerageAccountNumber" json:"brokerage_account_number,omitempty"`
	// [immutable][obsolete] Use sales_series_id field instead.
	// Sales series number.
	// Cannot be changed directly with UpdateAccount message, but can be changed by changing sales_series_id.
	//
	// Deprecated: Do not use.
	ObsoleteSalesSeriesNumber *string `protobuf:"bytes,4,opt,name=obsolete_sales_series_number,json=obsoleteSalesSeriesNumber" json:"obsolete_sales_series_number,omitempty"`
	// [immutable][obsolete] Use sales_series_id field instead.
	// Sales series name.
	// Cannot be changed directly with UpdateAccount message, but can be changed by changing sales_series_id.
	//
	// Deprecated: Do not use.
	ObsoleteSalesSeriesName *string `protobuf:"bytes,5,opt,name=obsolete_sales_series_name,json=obsoleteSalesSeriesName" json:"obsolete_sales_series_name,omitempty"`
	// [immutable][obsolete] Use brokerage_id field instead.
	// Brokerage name.
	//
	// Deprecated: Do not use.
	ObsoleteBrokerageName *string `protobuf:"bytes,6,opt,name=obsolete_brokerage_name,json=obsoleteBrokerageName" json:"obsolete_brokerage_name,omitempty"`
	// [immutable-update][required-create] This field is associated with Class enum.
	Class *uint32 `protobuf:"varint,8,opt,name=class" json:"class,omitempty"`
	// [required-create] Id of customer - owner of the account.
	// If changed then new customer must belong to the same brokerage.
	CustomerId *string `protobuf:"bytes,9,opt,name=customer_id,json=customerId" json:"customer_id,omitempty"`
	// [immutable] Risk server instance which calculates risks for this account (includes related Gateway location).
	RiskServerInstance *string `protobuf:"bytes,10,opt,name=risk_server_instance,json=riskServerInstance" json:"risk_server_instance,omitempty"`
	// [required-create] Type of the account (e.g. 'Customer Account', 'House Account', etc.)
	// List of available account types can be obtained with:
	// LookupPropertyListRequest { property_type = TradeRoutingLookupPropertyType.ACCOUNT_TYPE }
	AccountTypeId *string `protobuf:"bytes,11,opt,name=account_type_id,json=accountTypeId" json:"account_type_id,omitempty"`
	// [required-create] ID of related sales series.
	// If changed then new sales series must belong to the same brokerage.
	SalesSeriesId *string `protobuf:"bytes,12,opt,name=sales_series_id,json=salesSeriesId" json:"sales_series_id,omitempty"`
	// [immutable] ID of related brokerage.
	BrokerageId *string `protobuf:"bytes,13,opt,name=brokerage_id,json=brokerageId" json:"brokerage_id,omitempty"`
	// [immutable] Default account currency code (ISO 4217).
	Currency *string `protobuf:"bytes,14,opt,name=currency" json:"currency,omitempty"`
	// This field is associated with SubClass enum.
	// Can be set/changed only for account with class = 3 (omnibus).
	SubClass *uint32 `protobuf:"varint,15,opt,name=sub_class,json=subClass" json:"sub_class,omitempty"`
	// [immutable-update] Risk server instance id.
	// If not set during CreateAccount message, default brokerage one is used.
	RiskServerInstanceId *string `protobuf:"bytes,16,opt,name=risk_server_instance_id,json=riskServerInstanceId" json:"risk_server_instance_id,omitempty"`
	// [obsolete] ID of account cluster the account points to.
	//
	// Deprecated: Do not use.
	ObsoleteAccountClusterId *string `protobuf:"bytes,17,opt,name=obsolete_account_cluster_id,json=obsoleteAccountClusterId" json:"obsolete_account_cluster_id,omitempty"`
	// [immutable] Determines, whether account is removed.
	Removed *bool `protobuf:"varint,18,opt,name=removed" json:"removed,omitempty"`
	// [immutable] Determines group role (master/sub-account)
	// in case when account belongs to a group.
	IsMaster *bool `protobuf:"varint,19,opt,name=is_master,json=isMaster" json:"is_master,omitempty"`
	// [immutable] This field is associated with AccountGroup.RelationType enum.
	// Specifies group relation type in case when account belongs to a group.
	GroupRelationType *uint32 `protobuf:"varint,20,opt,name=group_relation_type,json=groupRelationType" json:"group_relation_type,omitempty"`
	// [immutable] Determines if account is collection.
	IsCollection *bool `protobuf:"varint,21,opt,name=is_collection,json=isCollection" json:"is_collection,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{97}
}

func (x *Account) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Account) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Account) GetBrokerageAccountNumber() string {
	if x != nil && x.BrokerageAccountNumber != nil {
		return *x.BrokerageAccountNumber
	}
	return ""
}

// Deprecated: Do not use.
func (x *Account) GetObsoleteSalesSeriesNumber() string {
	if x != nil && x.ObsoleteSalesSeriesNumber != nil {
		return *x.ObsoleteSalesSeriesNumber
	}
	return ""
}

// Deprecated: Do not use.
func (x *Account) GetObsoleteSalesSeriesName() string {
	if x != nil && x.ObsoleteSalesSeriesName != nil {
		return *x.ObsoleteSalesSeriesName
	}
	return ""
}

// Deprecated: Do not use.
func (x *Account) GetObsoleteBrokerageName() string {
	if x != nil && x.ObsoleteBrokerageName != nil {
		return *x.ObsoleteBrokerageName
	}
	return ""
}

func (x *Account) GetClass() uint32 {
	if x != nil && x.Class != nil {
		return *x.Class
	}
	return 0
}

func (x *Account) GetCustomerId() string {
	if x != nil && x.CustomerId != nil {
		return *x.CustomerId
	}
	return ""
}

func (x *Account) GetRiskServerInstance() string {
	if x != nil && x.RiskServerInstance != nil {
		return *x.RiskServerInstance
	}
	return ""
}

func (x *Account) GetAccountTypeId() string {
	if x != nil && x.AccountTypeId != nil {
		return *x.AccountTypeId
	}
	return ""
}

func (x *Account) GetSalesSeriesId() string {
	if x != nil && x.SalesSeriesId != nil {
		return *x.SalesSeriesId
	}
	return ""
}

func (x *Account) GetBrokerageId() string {
	if x != nil && x.BrokerageId != nil {
		return *x.BrokerageId
	}
	return ""
}

func (x *Account) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *Account) GetSubClass() uint32 {
	if x != nil && x.SubClass != nil {
		return *x.SubClass
	}
	return 0
}

func (x *Account) GetRiskServerInstanceId() string {
	if x != nil && x.RiskServerInstanceId != nil {
		return *x.RiskServerInstanceId
	}
	return ""
}

// Deprecated: Do not use.
func (x *Account) GetObsoleteAccountClusterId() string {
	if x != nil && x.ObsoleteAccountClusterId != nil {
		return *x.ObsoleteAccountClusterId
	}
	return ""
}

func (x *Account) GetRemoved() bool {
	if x != nil && x.Removed != nil {
		return *x.Removed
	}
	return false
}

func (x *Account) GetIsMaster() bool {
	if x != nil && x.IsMaster != nil {
		return *x.IsMaster
	}
	return false
}

func (x *Account) GetGroupRelationType() uint32 {
	if x != nil && x.GroupRelationType != nil {
		return *x.GroupRelationType
	}
	return 0
}

func (x *Account) GetIsCollection() bool {
	if x != nil && x.IsCollection != nil {
		return *x.IsCollection
	}
	return false
}

// Gateway balance record.
type BalanceRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trade routing account identifier.
	AccountId *int32 `protobuf:"zigzag32,1,req,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Balance record identifier.
	BalanceRecordId *int32 `protobuf:"zigzag32,2,req,name=balance_record_id,json=balanceRecordId" json:"balance_record_id,omitempty"`
	// Currency code (real currency code is ISO 4217 based;
	// for crypto currency code, please contact continuum@cqg.com).
	Currency *string `protobuf:"bytes,3,req,name=currency" json:"currency,omitempty"`
	// End cash balance.
	EndCashBalance *float64 `protobuf:"fixed64,4,opt,name=end_cash_balance,json=endCashBalance" json:"end_cash_balance,omitempty"`
	// Collateral.
	Collateral *float64 `protobuf:"fixed64,5,opt,name=collateral" json:"collateral,omitempty"`
	// Previous close date (date value only) (UTC).
	AsOfDate *int64 `protobuf:"zigzag64,6,opt,name=as_of_date,json=asOfDate" json:"as_of_date,omitempty"`
	// [immutable] Balance origin.
	// This field is associated with BalanceOrigin enum type.
	Origin *uint32 `protobuf:"varint,7,opt,name=origin" json:"origin,omitempty"`
	// Regulated.
	Regulated *bool `protobuf:"varint,8,opt,name=regulated" json:"regulated,omitempty"`
}

func (x *BalanceRecord) Reset() {
	*x = BalanceRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceRecord) ProtoMessage() {}

func (x *BalanceRecord) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceRecord.ProtoReflect.Descriptor instead.
func (*BalanceRecord) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{98}
}

func (x *BalanceRecord) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *BalanceRecord) GetBalanceRecordId() int32 {
	if x != nil && x.BalanceRecordId != nil {
		return *x.BalanceRecordId
	}
	return 0
}

func (x *BalanceRecord) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *BalanceRecord) GetEndCashBalance() float64 {
	if x != nil && x.EndCashBalance != nil {
		return *x.EndCashBalance
	}
	return 0
}

func (x *BalanceRecord) GetCollateral() float64 {
	if x != nil && x.Collateral != nil {
		return *x.Collateral
	}
	return 0
}

func (x *BalanceRecord) GetAsOfDate() int64 {
	if x != nil && x.AsOfDate != nil {
		return *x.AsOfDate
	}
	return 0
}

func (x *BalanceRecord) GetOrigin() uint32 {
	if x != nil && x.Origin != nil {
		return *x.Origin
	}
	return 0
}

func (x *BalanceRecord) GetRegulated() bool {
	if x != nil && x.Regulated != nil {
		return *x.Regulated
	}
	return false
}

// Information about one of the found accounts.
type AccountSearchResultRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trade routing account identifier.
	AccountId *int32 `protobuf:"zigzag32,1,req,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Account name.
	Name *string `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	// Brokerage account number.
	BrokerageAccountNumber *string `protobuf:"bytes,3,req,name=brokerage_account_number,json=brokerageAccountNumber" json:"brokerage_account_number,omitempty"`
	// Sales series number.
	SalesSeriesNumber *string `protobuf:"bytes,4,req,name=sales_series_number,json=salesSeriesNumber" json:"sales_series_number,omitempty"`
	// Sales series name.
	SalesSeriesName *string `protobuf:"bytes,5,req,name=sales_series_name,json=salesSeriesName" json:"sales_series_name,omitempty"`
	// Brokerage name.
	BrokerageName *string `protobuf:"bytes,6,req,name=brokerage_name,json=brokerageName" json:"brokerage_name,omitempty"`
	// Id of customer - owner of the account.
	CustomerId *string `protobuf:"bytes,7,opt,name=customer_id,json=customerId" json:"customer_id,omitempty"`
	// Name of customer - owner of the account.
	CustomerName *string `protobuf:"bytes,8,opt,name=customer_name,json=customerName" json:"customer_name,omitempty"`
	// Removed flag.
	Removed *bool `protobuf:"varint,9,opt,name=removed" json:"removed,omitempty"`
	// Id of sales series.
	SalesSeriesId        *string `protobuf:"bytes,10,opt,name=sales_series_id,json=salesSeriesId" json:"sales_series_id,omitempty"`
	BrokerageId          *string `protobuf:"bytes,11,opt,name=brokerage_id,json=brokerageId" json:"brokerage_id,omitempty"`
	RiskServerInstanceId *string `protobuf:"bytes,12,opt,name=risk_server_instance_id,json=riskServerInstanceId" json:"risk_server_instance_id,omitempty"`
	GroupId              *string `protobuf:"bytes,13,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	// This field is associated with Class enum.
	Class *uint32 `protobuf:"varint,14,opt,name=class" json:"class,omitempty"`
}

func (x *AccountSearchResultRecord) Reset() {
	*x = AccountSearchResultRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountSearchResultRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountSearchResultRecord) ProtoMessage() {}

func (x *AccountSearchResultRecord) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountSearchResultRecord.ProtoReflect.Descriptor instead.
func (*AccountSearchResultRecord) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{99}
}

func (x *AccountSearchResultRecord) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *AccountSearchResultRecord) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AccountSearchResultRecord) GetBrokerageAccountNumber() string {
	if x != nil && x.BrokerageAccountNumber != nil {
		return *x.BrokerageAccountNumber
	}
	return ""
}

func (x *AccountSearchResultRecord) GetSalesSeriesNumber() string {
	if x != nil && x.SalesSeriesNumber != nil {
		return *x.SalesSeriesNumber
	}
	return ""
}

func (x *AccountSearchResultRecord) GetSalesSeriesName() string {
	if x != nil && x.SalesSeriesName != nil {
		return *x.SalesSeriesName
	}
	return ""
}

func (x *AccountSearchResultRecord) GetBrokerageName() string {
	if x != nil && x.BrokerageName != nil {
		return *x.BrokerageName
	}
	return ""
}

func (x *AccountSearchResultRecord) GetCustomerId() string {
	if x != nil && x.CustomerId != nil {
		return *x.CustomerId
	}
	return ""
}

func (x *AccountSearchResultRecord) GetCustomerName() string {
	if x != nil && x.CustomerName != nil {
		return *x.CustomerName
	}
	return ""
}

func (x *AccountSearchResultRecord) GetRemoved() bool {
	if x != nil && x.Removed != nil {
		return *x.Removed
	}
	return false
}

func (x *AccountSearchResultRecord) GetSalesSeriesId() string {
	if x != nil && x.SalesSeriesId != nil {
		return *x.SalesSeriesId
	}
	return ""
}

func (x *AccountSearchResultRecord) GetBrokerageId() string {
	if x != nil && x.BrokerageId != nil {
		return *x.BrokerageId
	}
	return ""
}

func (x *AccountSearchResultRecord) GetRiskServerInstanceId() string {
	if x != nil && x.RiskServerInstanceId != nil {
		return *x.RiskServerInstanceId
	}
	return ""
}

func (x *AccountSearchResultRecord) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *AccountSearchResultRecord) GetClass() uint32 {
	if x != nil && x.Class != nil {
		return *x.Class
	}
	return 0
}

// Information about enabled account route.
type AccountRouteRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Code number of the route.
	RouteCode *int32 `protobuf:"zigzag32,1,opt,name=route_code,json=routeCode" json:"route_code,omitempty"`
	// [obsolete] Route name.
	// See RouteInformation.name field.
	//
	// Deprecated: Do not use.
	ObsoleteRouteName *string `protobuf:"bytes,2,opt,name=obsolete_route_name,json=obsoleteRouteName" json:"obsolete_route_name,omitempty"`
	// [required] Account priority of the route.
	Priority *int32 `protobuf:"zigzag32,3,opt,name=priority" json:"priority,omitempty"`
	// Omnibus account ID if it is used for this route.
	OmnibusAccountId *int32 `protobuf:"zigzag32,4,opt,name=omnibus_account_id,json=omnibusAccountId" json:"omnibus_account_id,omitempty"`
	// [obsolete] Omnibus account name if it is used for this route.
	// See Route.omnibus_accounts field.
	//
	// Deprecated: Do not use.
	ObsoleteOmnibusAccountName *string `protobuf:"bytes,5,opt,name=obsolete_omnibus_account_name,json=obsoleteOmnibusAccountName" json:"obsolete_omnibus_account_name,omitempty"`
	// List of route attributes with values.
	Attributes []*AccountRouteAttribute `protobuf:"bytes,6,rep,name=attributes" json:"attributes,omitempty"`
	// [immutable] If set, route is in use by some other account using this configured route.
	IsInUse *bool `protobuf:"varint,7,opt,name=is_in_use,json=isInUse" json:"is_in_use,omitempty"`
	// Indicates whether synthetic orders are allowed on this route for this account.
	// Can be 'true' only if route allows synthetic orders (RouteInformation.allow_synthetic_order_types).
	AllowSyntheticOrderTypes *bool `protobuf:"varint,8,opt,name=allow_synthetic_order_types,json=allowSyntheticOrderTypes" json:"allow_synthetic_order_types,omitempty"`
}

func (x *AccountRouteRecord) Reset() {
	*x = AccountRouteRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountRouteRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountRouteRecord) ProtoMessage() {}

func (x *AccountRouteRecord) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountRouteRecord.ProtoReflect.Descriptor instead.
func (*AccountRouteRecord) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{100}
}

func (x *AccountRouteRecord) GetRouteCode() int32 {
	if x != nil && x.RouteCode != nil {
		return *x.RouteCode
	}
	return 0
}

// Deprecated: Do not use.
func (x *AccountRouteRecord) GetObsoleteRouteName() string {
	if x != nil && x.ObsoleteRouteName != nil {
		return *x.ObsoleteRouteName
	}
	return ""
}

func (x *AccountRouteRecord) GetPriority() int32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *AccountRouteRecord) GetOmnibusAccountId() int32 {
	if x != nil && x.OmnibusAccountId != nil {
		return *x.OmnibusAccountId
	}
	return 0
}

// Deprecated: Do not use.
func (x *AccountRouteRecord) GetObsoleteOmnibusAccountName() string {
	if x != nil && x.ObsoleteOmnibusAccountName != nil {
		return *x.ObsoleteOmnibusAccountName
	}
	return ""
}

func (x *AccountRouteRecord) GetAttributes() []*AccountRouteAttribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *AccountRouteRecord) GetIsInUse() bool {
	if x != nil && x.IsInUse != nil {
		return *x.IsInUse
	}
	return false
}

func (x *AccountRouteRecord) GetAllowSyntheticOrderTypes() bool {
	if x != nil && x.AllowSyntheticOrderTypes != nil {
		return *x.AllowSyntheticOrderTypes
	}
	return false
}

// Route attributes.
type AccountRouteAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [immutable] Route attribute name.
	Name *string `protobuf:"bytes,1,req,name=Name" json:"Name,omitempty"`
	// Route attribute value.
	Value *string `protobuf:"bytes,2,opt,name=Value" json:"Value,omitempty"`
	// [required][immutable] attribute id.
	Id *string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
}

func (x *AccountRouteAttribute) Reset() {
	*x = AccountRouteAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountRouteAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountRouteAttribute) ProtoMessage() {}

func (x *AccountRouteAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountRouteAttribute.ProtoReflect.Descriptor instead.
func (*AccountRouteAttribute) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{101}
}

func (x *AccountRouteAttribute) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AccountRouteAttribute) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *AccountRouteAttribute) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

// Account to user authorization link.
type AccountUserLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Account ID.
	AccountId *int32 `protobuf:"zigzag32,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// [required] User ID.
	UserId *string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// True means the trader can only view account activity.
	IsViewOnly *bool `protobuf:"varint,3,opt,name=is_view_only,json=isViewOnly" json:"is_view_only,omitempty"`
	// Determines if Gateway will automatically park trader's orders as Care Orders.
	IsForceCare *bool `protobuf:"varint,4,opt,name=is_force_care,json=isForceCare" json:"is_force_care,omitempty"`
	// [immutable] User name.
	UserName *string `protobuf:"bytes,5,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	// [immutable] Account name.
	AccountName *string `protobuf:"bytes,6,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// [immutable] Brokerage account number.
	BrokerageAccountNumber *string `protobuf:"bytes,7,opt,name=brokerage_account_number,json=brokerageAccountNumber" json:"brokerage_account_number,omitempty"`
	// [immutable] Account's brokerage name.
	BrokerageName *string `protobuf:"bytes,8,opt,name=brokerage_name,json=brokerageName" json:"brokerage_name,omitempty"`
	// Enables trader to place orders into external FCM account number.
	AllowExternalAccounts *bool `protobuf:"varint,9,opt,name=allow_external_accounts,json=allowExternalAccounts" json:"allow_external_accounts,omitempty"`
	// [immutable] Authorization via brokerage or sales series.
	ImplicitAuthorization *bool `protobuf:"varint,10,opt,name=implicit_authorization,json=implicitAuthorization" json:"implicit_authorization,omitempty"`
}

func (x *AccountUserLink) Reset() {
	*x = AccountUserLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountUserLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountUserLink) ProtoMessage() {}

func (x *AccountUserLink) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountUserLink.ProtoReflect.Descriptor instead.
func (*AccountUserLink) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{102}
}

func (x *AccountUserLink) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *AccountUserLink) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *AccountUserLink) GetIsViewOnly() bool {
	if x != nil && x.IsViewOnly != nil {
		return *x.IsViewOnly
	}
	return false
}

func (x *AccountUserLink) GetIsForceCare() bool {
	if x != nil && x.IsForceCare != nil {
		return *x.IsForceCare
	}
	return false
}

func (x *AccountUserLink) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *AccountUserLink) GetAccountName() string {
	if x != nil && x.AccountName != nil {
		return *x.AccountName
	}
	return ""
}

func (x *AccountUserLink) GetBrokerageAccountNumber() string {
	if x != nil && x.BrokerageAccountNumber != nil {
		return *x.BrokerageAccountNumber
	}
	return ""
}

func (x *AccountUserLink) GetBrokerageName() string {
	if x != nil && x.BrokerageName != nil {
		return *x.BrokerageName
	}
	return ""
}

func (x *AccountUserLink) GetAllowExternalAccounts() bool {
	if x != nil && x.AllowExternalAccounts != nil {
		return *x.AllowExternalAccounts
	}
	return false
}

func (x *AccountUserLink) GetImplicitAuthorization() bool {
	if x != nil && x.ImplicitAuthorization != nil {
		return *x.ImplicitAuthorization
	}
	return false
}

// Account settings.
type AccountSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Trade routing account identifier.
	AccountId *int32 `protobuf:"zigzag32,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// [obsolete] Block account indicator. The field is obsolete and always has False value.
	//
	// Deprecated: Do not use.
	ObsoleteIsBlock *bool `protobuf:"varint,2,opt,name=obsolete_is_block,json=obsoleteIsBlock" json:"obsolete_is_block,omitempty"`
	// [obsolete] Block size if this is a block account.
	//
	// Deprecated: Do not use.
	ObsoleteBlockSize *int32 `protobuf:"zigzag32,3,opt,name=obsolete_block_size,json=obsoleteBlockSize" json:"obsolete_block_size,omitempty"`
	// Give up account indicator.
	IsGiveup *bool `protobuf:"varint,4,opt,name=is_giveup,json=isGiveup" json:"is_giveup,omitempty"`
	// [obsolete] Use giveup_brokerage_id field instead.
	// Give up brokerage name if this is a give up account.
	//
	// Deprecated: Do not use.
	ObsoleteGiveupBrokerageName *string `protobuf:"bytes,5,opt,name=obsolete_giveup_brokerage_name,json=obsoleteGiveupBrokerageName" json:"obsolete_giveup_brokerage_name,omitempty"`
	// This field is associated with StatementOption enum.
	StatementOption *uint32 `protobuf:"varint,6,opt,name=statement_option,json=statementOption" json:"statement_option,omitempty"`
	// If statement processing option is RESET this field indicates if balances are reset to zero along with positions.
	ZeroBalance *bool `protobuf:"varint,7,opt,name=zero_balance,json=zeroBalance" json:"zero_balance,omitempty"`
	// Reconciliation indicator. Account follows brokerage reconciliation setting if the filed is omitted.
	// Provide original message during update operation to clear this field.
	Reconciliation *bool `protobuf:"varint,8,opt,name=reconciliation" json:"reconciliation,omitempty"`
	// Give up brokerage id if this is a give up account.
	GiveupBrokerageId *string `protobuf:"bytes,9,opt,name=giveup_brokerage_id,json=giveupBrokerageId" json:"giveup_brokerage_id,omitempty"`
	// Start of account trading time in ISO 8601 format.
	// Only time must be provided.
	TradingTimeFrom *string `protobuf:"bytes,10,opt,name=trading_time_from,json=tradingTimeFrom" json:"trading_time_from,omitempty"`
	// End of account trading time in ISO 8601 format.
	// Only time must be provided.
	// Must be provided with the same time zone if start time is set.
	TradingTimeTo *string `protobuf:"bytes,11,opt,name=trading_time_to,json=tradingTimeTo" json:"trading_time_to,omitempty"`
	// Trading time zone.
	// The value are associated with a lookup property with TIME_ZONE type.
	TradingTimeZone *string `protobuf:"bytes,12,opt,name=trading_time_zone,json=tradingTimeZone" json:"trading_time_zone,omitempty"`
	// Allow to liquidate orders outside trading time, if trading time is set.
	LiquidationOrdersOutsideTradingTime *bool `protobuf:"varint,13,opt,name=liquidation_orders_outside_trading_time,json=liquidationOrdersOutsideTradingTime" json:"liquidation_orders_outside_trading_time,omitempty"`
	// Instruct account indicator.
	IsInstruct *bool `protobuf:"varint,14,opt,name=is_instruct,json=isInstruct" json:"is_instruct,omitempty"`
	// Allow externally provided execution of account.
	ExternallyProvidedExecution *bool `protobuf:"varint,15,opt,name=externally_provided_execution,json=externallyProvidedExecution" json:"externally_provided_execution,omitempty"`
	// Associated MODES account groups.
	// The values are associated with a lookup property with MODES_ACCOUNT_GROUP type.
	// Provide original message during update operation to clear this field.
	ModesAccountGroups []string `protobuf:"bytes,16,rep,name=modes_account_groups,json=modesAccountGroups" json:"modes_account_groups,omitempty"`
	// Determines whether Pre-trade middle market price for an order is required.
	RequirePreTradeMidMarketMark *bool `protobuf:"varint,17,opt,name=require_pre_trade_mid_market_mark,json=requirePreTradeMidMarketMark" json:"require_pre_trade_mid_market_mark,omitempty"`
}

func (x *AccountSettings) Reset() {
	*x = AccountSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountSettings) ProtoMessage() {}

func (x *AccountSettings) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountSettings.ProtoReflect.Descriptor instead.
func (*AccountSettings) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{103}
}

func (x *AccountSettings) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

// Deprecated: Do not use.
func (x *AccountSettings) GetObsoleteIsBlock() bool {
	if x != nil && x.ObsoleteIsBlock != nil {
		return *x.ObsoleteIsBlock
	}
	return false
}

// Deprecated: Do not use.
func (x *AccountSettings) GetObsoleteBlockSize() int32 {
	if x != nil && x.ObsoleteBlockSize != nil {
		return *x.ObsoleteBlockSize
	}
	return 0
}

func (x *AccountSettings) GetIsGiveup() bool {
	if x != nil && x.IsGiveup != nil {
		return *x.IsGiveup
	}
	return false
}

// Deprecated: Do not use.
func (x *AccountSettings) GetObsoleteGiveupBrokerageName() string {
	if x != nil && x.ObsoleteGiveupBrokerageName != nil {
		return *x.ObsoleteGiveupBrokerageName
	}
	return ""
}

func (x *AccountSettings) GetStatementOption() uint32 {
	if x != nil && x.StatementOption != nil {
		return *x.StatementOption
	}
	return 0
}

func (x *AccountSettings) GetZeroBalance() bool {
	if x != nil && x.ZeroBalance != nil {
		return *x.ZeroBalance
	}
	return false
}

func (x *AccountSettings) GetReconciliation() bool {
	if x != nil && x.Reconciliation != nil {
		return *x.Reconciliation
	}
	return false
}

func (x *AccountSettings) GetGiveupBrokerageId() string {
	if x != nil && x.GiveupBrokerageId != nil {
		return *x.GiveupBrokerageId
	}
	return ""
}

func (x *AccountSettings) GetTradingTimeFrom() string {
	if x != nil && x.TradingTimeFrom != nil {
		return *x.TradingTimeFrom
	}
	return ""
}

func (x *AccountSettings) GetTradingTimeTo() string {
	if x != nil && x.TradingTimeTo != nil {
		return *x.TradingTimeTo
	}
	return ""
}

func (x *AccountSettings) GetTradingTimeZone() string {
	if x != nil && x.TradingTimeZone != nil {
		return *x.TradingTimeZone
	}
	return ""
}

func (x *AccountSettings) GetLiquidationOrdersOutsideTradingTime() bool {
	if x != nil && x.LiquidationOrdersOutsideTradingTime != nil {
		return *x.LiquidationOrdersOutsideTradingTime
	}
	return false
}

func (x *AccountSettings) GetIsInstruct() bool {
	if x != nil && x.IsInstruct != nil {
		return *x.IsInstruct
	}
	return false
}

func (x *AccountSettings) GetExternallyProvidedExecution() bool {
	if x != nil && x.ExternallyProvidedExecution != nil {
		return *x.ExternallyProvidedExecution
	}
	return false
}

func (x *AccountSettings) GetModesAccountGroups() []string {
	if x != nil {
		return x.ModesAccountGroups
	}
	return nil
}

func (x *AccountSettings) GetRequirePreTradeMidMarketMark() bool {
	if x != nil && x.RequirePreTradeMidMarketMark != nil {
		return *x.RequirePreTradeMidMarketMark
	}
	return false
}

// Account risk parameters.
type AccountRiskParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required-update] Trade routing account identifier.
	AccountId *int32 `protobuf:"zigzag32,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// [required] Allow positions to be closed only.
	LiquidationOnly *bool `protobuf:"varint,2,opt,name=liquidation_only,json=liquidationOnly" json:"liquidation_only,omitempty"`
	// [required] Allow futures trading.
	AllowFutures *bool `protobuf:"varint,3,opt,name=allow_futures,json=allowFutures" json:"allow_futures,omitempty"`
	// [required] Allow options trading.
	// The value is associated with OptionsTrading enum.
	AllowOptions *uint32 `protobuf:"varint,4,opt,name=allow_options,json=allowOptions" json:"allow_options,omitempty"`
	// [required] True if trade size limit is enforced.
	EnforceTradeSizeLimit *bool `protobuf:"varint,5,opt,name=enforce_trade_size_limit,json=enforceTradeSizeLimit" json:"enforce_trade_size_limit,omitempty"`
	// Optional trade size limit for any single trade.
	TradeSizeLimit *int32 `protobuf:"zigzag32,6,opt,name=trade_size_limit,json=tradeSizeLimit" json:"trade_size_limit,omitempty"`
	// [required] True if trade margin limit is enforced.
	EnforceTradeMarginLimit *bool `protobuf:"varint,7,opt,name=enforce_trade_margin_limit,json=enforceTradeMarginLimit" json:"enforce_trade_margin_limit,omitempty"`
	// Optional trade margin limit which is maximum margin requirement for any single trade.
	TradeMarginLimit *float64 `protobuf:"fixed64,8,opt,name=trade_margin_limit,json=tradeMarginLimit" json:"trade_margin_limit,omitempty"`
	// [required] True if trade price limit in ticks is enforced.
	EnforceTradePriceLimitTicks *bool `protobuf:"varint,9,opt,name=enforce_trade_price_limit_ticks,json=enforceTradePriceLimitTicks" json:"enforce_trade_price_limit_ticks,omitempty"`
	// Optional trade price limit in ticks for any single trade.
	TradePriceLimitTicks *TradePriceLimit `protobuf:"bytes,10,opt,name=trade_price_limit_ticks,json=tradePriceLimitTicks" json:"trade_price_limit_ticks,omitempty"`
	// [required] True if commodity position limit is enforced.
	EnforceCommodityPositionLimit *bool `protobuf:"varint,11,opt,name=enforce_commodity_position_limit,json=enforceCommodityPositionLimit" json:"enforce_commodity_position_limit,omitempty"`
	// Optional commodity position limit.
	CommodityPositionLimit *LimitValue `protobuf:"bytes,12,opt,name=commodity_position_limit,json=commodityPositionLimit" json:"commodity_position_limit,omitempty"`
	// [required] True if contract position limit is enforced.
	EnforceContractPositionLimit *bool `protobuf:"varint,13,opt,name=enforce_contract_position_limit,json=enforceContractPositionLimit" json:"enforce_contract_position_limit,omitempty"`
	// Optional contract position limit.
	ContractPositionLimit *LimitValue `protobuf:"bytes,14,opt,name=contract_position_limit,json=contractPositionLimit" json:"contract_position_limit,omitempty"`
	// [required] True if margin sybsystem parameters are enforced.
	// When enforced, any trade that could cause margin requirements to exceed account's available funds is denied.
	EnforceMarginSubsystemParameters *bool `protobuf:"varint,15,opt,name=enforce_margin_subsystem_parameters,json=enforceMarginSubsystemParameters" json:"enforce_margin_subsystem_parameters,omitempty"`
	// Purchasing power parameters.
	PurchasingPowerParameters *PurchasingPowerParameters `protobuf:"bytes,16,opt,name=purchasing_power_parameters,json=purchasingPowerParameters" json:"purchasing_power_parameters,omitempty"`
	// [required] True if daily loss limit is enforced.
	EnforceDailyLossLimit *bool `protobuf:"varint,17,opt,name=enforce_daily_loss_limit,json=enforceDailyLossLimit" json:"enforce_daily_loss_limit,omitempty"`
	// Optional daily loss limit. Limits losses during a single day.
	// Account ending balance + collateral are considered as 'funds' for the limit.
	// Losses during a single day are considered as 'losses' for the limit.
	DailyLossLimit *LossLimit `protobuf:"bytes,18,opt,name=daily_loss_limit,json=dailyLossLimit" json:"daily_loss_limit,omitempty"`
	// [required] True if delta daily loss limit is enforced.
	EnforceDeltaDailyLossLimit *bool `protobuf:"varint,19,opt,name=enforce_delta_daily_loss_limit,json=enforceDeltaDailyLossLimit" json:"enforce_delta_daily_loss_limit,omitempty"`
	// Optional delta daily loss limit. Limits losses since yesterday.
	// Yesterday's purchasing power is considered as 'funds' for the limit.
	// Losses incurred since yesterday are considered as 'losses' for the limit.
	DeltaDailyLossLimit *LossLimit `protobuf:"bytes,20,opt,name=delta_daily_loss_limit,json=deltaDailyLossLimit" json:"delta_daily_loss_limit,omitempty"`
	// [required] Maximum number of order requests (new orders, modifications, cancellations) allowed per second.
	MaximumOrderRate *int32 `protobuf:"zigzag32,21,opt,name=maximum_order_rate,json=maximumOrderRate" json:"maximum_order_rate,omitempty"`
	// [required] Reject BUY MKT orders if ask price is not available and SELL MKT orders if bid price is not available.
	RejectRiskyMarketOrders *bool `protobuf:"varint,22,opt,name=reject_risky_market_orders,json=rejectRiskyMarketOrders" json:"reject_risky_market_orders,omitempty"`
	// [required] True if trade price limit in percent is enforced.
	EnforceTradePriceLimitPercent *bool `protobuf:"varint,23,opt,name=enforce_trade_price_limit_percent,json=enforceTradePriceLimitPercent" json:"enforce_trade_price_limit_percent,omitempty"`
	// Optional trade price limit in percent for any single trade.
	TradePriceLimitPercent *TradePriceLimitPercent `protobuf:"bytes,24,opt,name=trade_price_limit_percent,json=tradePriceLimitPercent" json:"trade_price_limit_percent,omitempty"`
}

func (x *AccountRiskParameters) Reset() {
	*x = AccountRiskParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountRiskParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountRiskParameters) ProtoMessage() {}

func (x *AccountRiskParameters) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountRiskParameters.ProtoReflect.Descriptor instead.
func (*AccountRiskParameters) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{104}
}

func (x *AccountRiskParameters) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *AccountRiskParameters) GetLiquidationOnly() bool {
	if x != nil && x.LiquidationOnly != nil {
		return *x.LiquidationOnly
	}
	return false
}

func (x *AccountRiskParameters) GetAllowFutures() bool {
	if x != nil && x.AllowFutures != nil {
		return *x.AllowFutures
	}
	return false
}

func (x *AccountRiskParameters) GetAllowOptions() uint32 {
	if x != nil && x.AllowOptions != nil {
		return *x.AllowOptions
	}
	return 0
}

func (x *AccountRiskParameters) GetEnforceTradeSizeLimit() bool {
	if x != nil && x.EnforceTradeSizeLimit != nil {
		return *x.EnforceTradeSizeLimit
	}
	return false
}

func (x *AccountRiskParameters) GetTradeSizeLimit() int32 {
	if x != nil && x.TradeSizeLimit != nil {
		return *x.TradeSizeLimit
	}
	return 0
}

func (x *AccountRiskParameters) GetEnforceTradeMarginLimit() bool {
	if x != nil && x.EnforceTradeMarginLimit != nil {
		return *x.EnforceTradeMarginLimit
	}
	return false
}

func (x *AccountRiskParameters) GetTradeMarginLimit() float64 {
	if x != nil && x.TradeMarginLimit != nil {
		return *x.TradeMarginLimit
	}
	return 0
}

func (x *AccountRiskParameters) GetEnforceTradePriceLimitTicks() bool {
	if x != nil && x.EnforceTradePriceLimitTicks != nil {
		return *x.EnforceTradePriceLimitTicks
	}
	return false
}

func (x *AccountRiskParameters) GetTradePriceLimitTicks() *TradePriceLimit {
	if x != nil {
		return x.TradePriceLimitTicks
	}
	return nil
}

func (x *AccountRiskParameters) GetEnforceCommodityPositionLimit() bool {
	if x != nil && x.EnforceCommodityPositionLimit != nil {
		return *x.EnforceCommodityPositionLimit
	}
	return false
}

func (x *AccountRiskParameters) GetCommodityPositionLimit() *LimitValue {
	if x != nil {
		return x.CommodityPositionLimit
	}
	return nil
}

func (x *AccountRiskParameters) GetEnforceContractPositionLimit() bool {
	if x != nil && x.EnforceContractPositionLimit != nil {
		return *x.EnforceContractPositionLimit
	}
	return false
}

func (x *AccountRiskParameters) GetContractPositionLimit() *LimitValue {
	if x != nil {
		return x.ContractPositionLimit
	}
	return nil
}

func (x *AccountRiskParameters) GetEnforceMarginSubsystemParameters() bool {
	if x != nil && x.EnforceMarginSubsystemParameters != nil {
		return *x.EnforceMarginSubsystemParameters
	}
	return false
}

func (x *AccountRiskParameters) GetPurchasingPowerParameters() *PurchasingPowerParameters {
	if x != nil {
		return x.PurchasingPowerParameters
	}
	return nil
}

func (x *AccountRiskParameters) GetEnforceDailyLossLimit() bool {
	if x != nil && x.EnforceDailyLossLimit != nil {
		return *x.EnforceDailyLossLimit
	}
	return false
}

func (x *AccountRiskParameters) GetDailyLossLimit() *LossLimit {
	if x != nil {
		return x.DailyLossLimit
	}
	return nil
}

func (x *AccountRiskParameters) GetEnforceDeltaDailyLossLimit() bool {
	if x != nil && x.EnforceDeltaDailyLossLimit != nil {
		return *x.EnforceDeltaDailyLossLimit
	}
	return false
}

func (x *AccountRiskParameters) GetDeltaDailyLossLimit() *LossLimit {
	if x != nil {
		return x.DeltaDailyLossLimit
	}
	return nil
}

func (x *AccountRiskParameters) GetMaximumOrderRate() int32 {
	if x != nil && x.MaximumOrderRate != nil {
		return *x.MaximumOrderRate
	}
	return 0
}

func (x *AccountRiskParameters) GetRejectRiskyMarketOrders() bool {
	if x != nil && x.RejectRiskyMarketOrders != nil {
		return *x.RejectRiskyMarketOrders
	}
	return false
}

func (x *AccountRiskParameters) GetEnforceTradePriceLimitPercent() bool {
	if x != nil && x.EnforceTradePriceLimitPercent != nil {
		return *x.EnforceTradePriceLimitPercent
	}
	return false
}

func (x *AccountRiskParameters) GetTradePriceLimitPercent() *TradePriceLimitPercent {
	if x != nil {
		return x.TradePriceLimitPercent
	}
	return nil
}

// Account group.
type AccountGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required-update] Group identifier.
	GroupId *string `protobuf:"bytes,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	// [required-create][immutable-update] Master of the group.
	MasterAccountId *string `protobuf:"bytes,2,opt,name=master_account_id,json=masterAccountId" json:"master_account_id,omitempty"`
	// [required-create] Relation type.
	// This field is associated with RelationType enum.
	RelationType *uint32 `protobuf:"varint,3,opt,name=relation_type,json=relationType" json:"relation_type,omitempty"`
	// [immutable-update] Sub account of the group.
	SubAccounts []*SubAccount `protobuf:"bytes,4,rep,name=sub_accounts,json=subAccounts" json:"sub_accounts,omitempty"`
}

func (x *AccountGroup) Reset() {
	*x = AccountGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountGroup) ProtoMessage() {}

func (x *AccountGroup) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountGroup.ProtoReflect.Descriptor instead.
func (*AccountGroup) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{105}
}

func (x *AccountGroup) GetGroupId() string {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return ""
}

func (x *AccountGroup) GetMasterAccountId() string {
	if x != nil && x.MasterAccountId != nil {
		return *x.MasterAccountId
	}
	return ""
}

func (x *AccountGroup) GetRelationType() uint32 {
	if x != nil && x.RelationType != nil {
		return *x.RelationType
	}
	return 0
}

func (x *AccountGroup) GetSubAccounts() []*SubAccount {
	if x != nil {
		return x.SubAccounts
	}
	return nil
}

// Sub account of group.
type SubAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Account identifier.
	AccountId *string `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// [immutable] Account name.
	AccountName *string `protobuf:"bytes,2,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// [immutable] Brokerage account number.
	BrokerageAccountNumber *string `protobuf:"bytes,3,opt,name=brokerage_account_number,json=brokerageAccountNumber" json:"brokerage_account_number,omitempty"`
	// [required-create] Purchasing power. Allowed values (0..1).
	PurchasingPowerFraction *float64 `protobuf:"fixed64,4,opt,name=purchasing_power_fraction,json=purchasingPowerFraction" json:"purchasing_power_fraction,omitempty"`
}

func (x *SubAccount) Reset() {
	*x = SubAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubAccount) ProtoMessage() {}

func (x *SubAccount) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubAccount.ProtoReflect.Descriptor instead.
func (*SubAccount) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{106}
}

func (x *SubAccount) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *SubAccount) GetAccountName() string {
	if x != nil && x.AccountName != nil {
		return *x.AccountName
	}
	return ""
}

func (x *SubAccount) GetBrokerageAccountNumber() string {
	if x != nil && x.BrokerageAccountNumber != nil {
		return *x.BrokerageAccountNumber
	}
	return ""
}

func (x *SubAccount) GetPurchasingPowerFraction() float64 {
	if x != nil && x.PurchasingPowerFraction != nil {
		return *x.PurchasingPowerFraction
	}
	return 0
}

// Trade price limit parameters.
type TradePriceLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field is associated with PriceLimitMode enum.
	Mode *uint32 `protobuf:"varint,1,opt,name=mode" json:"mode,omitempty"`
	// [obsolete] Number of ticks away from the current market price to enforce the price limit.
	//
	// Deprecated: Do not use.
	ObsoleteTicks *int32 `protobuf:"zigzag32,2,opt,name=obsolete_ticks,json=obsoleteTicks" json:"obsolete_ticks,omitempty"`
	// Number of ticks away from the current market price to enforce the price limit.
	Value *LimitValue `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (x *TradePriceLimit) Reset() {
	*x = TradePriceLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradePriceLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradePriceLimit) ProtoMessage() {}

func (x *TradePriceLimit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradePriceLimit.ProtoReflect.Descriptor instead.
func (*TradePriceLimit) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{107}
}

func (x *TradePriceLimit) GetMode() uint32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

// Deprecated: Do not use.
func (x *TradePriceLimit) GetObsoleteTicks() int32 {
	if x != nil && x.ObsoleteTicks != nil {
		return *x.ObsoleteTicks
	}
	return 0
}

func (x *TradePriceLimit) GetValue() *LimitValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// Trade price limit parameters.
type TradePriceLimitPercent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field is associated with PriceLimitMode enum.
	Mode *uint32 `protobuf:"varint,1,opt,name=mode" json:"mode,omitempty"`
	// Percent from the current market price to enforce the price limit.
	Value *LimitValueDouble `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *TradePriceLimitPercent) Reset() {
	*x = TradePriceLimitPercent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradePriceLimitPercent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradePriceLimitPercent) ProtoMessage() {}

func (x *TradePriceLimitPercent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradePriceLimitPercent.ProtoReflect.Descriptor instead.
func (*TradePriceLimitPercent) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{108}
}

func (x *TradePriceLimitPercent) GetMode() uint32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

func (x *TradePriceLimitPercent) GetValue() *LimitValueDouble {
	if x != nil {
		return x.Value
	}
	return nil
}

// Limit value in ticks (can be used for trade size of position limit).
type LimitValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field is associated with LimitMode enum.
	Mode *uint32 `protobuf:"varint,1,opt,name=mode" json:"mode,omitempty"`
	// Limit value when enforced.
	Value *int32 `protobuf:"zigzag32,2,opt,name=value" json:"value,omitempty"`
	// List of optional contract expiration based limits overrides.
	// This list is used only for contract level position limit at the moment.
	// Limits with lower number of days before expiration take over limits with bigger number of days before expiration
	// when contract expiration reaches corresponding limit period.
	ExpirationLimit []*ExpirationLimit `protobuf:"bytes,3,rep,name=expiration_limit,json=expirationLimit" json:"expiration_limit,omitempty"`
	// Enforce All brokerage accounts to use this setting.
	// Only applicable for Brokerage level configuration.
	// Supported by LTD Limit.
	Enforce *bool `protobuf:"varint,4,opt,name=enforce" json:"enforce,omitempty"`
}

func (x *LimitValue) Reset() {
	*x = LimitValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitValue) ProtoMessage() {}

func (x *LimitValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitValue.ProtoReflect.Descriptor instead.
func (*LimitValue) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{109}
}

func (x *LimitValue) GetMode() uint32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

func (x *LimitValue) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *LimitValue) GetExpirationLimit() []*ExpirationLimit {
	if x != nil {
		return x.ExpirationLimit
	}
	return nil
}

func (x *LimitValue) GetEnforce() bool {
	if x != nil && x.Enforce != nil {
		return *x.Enforce
	}
	return false
}

// Limit value in double.
type LimitValueDouble struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field is associated with LimitMode enum.
	Mode *uint32 `protobuf:"varint,1,opt,name=mode" json:"mode,omitempty"`
	// Limit value in double when enforced.
	Value *float64 `protobuf:"fixed64,2,opt,name=value" json:"value,omitempty"`
}

func (x *LimitValueDouble) Reset() {
	*x = LimitValueDouble{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitValueDouble) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitValueDouble) ProtoMessage() {}

func (x *LimitValueDouble) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitValueDouble.ProtoReflect.Descriptor instead.
func (*LimitValueDouble) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{110}
}

func (x *LimitValueDouble) GetMode() uint32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

func (x *LimitValueDouble) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

// Contract expiration based limit.
type ExpirationLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of days before contract expiration this limit is in effect.
	DaysBeforeExpiration *uint32 `protobuf:"varint,1,opt,name=days_before_expiration,json=daysBeforeExpiration" json:"days_before_expiration,omitempty"`
	// Limit value when enforced.
	Value *int32 `protobuf:"zigzag32,2,opt,name=value" json:"value,omitempty"`
}

func (x *ExpirationLimit) Reset() {
	*x = ExpirationLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpirationLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpirationLimit) ProtoMessage() {}

func (x *ExpirationLimit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpirationLimit.ProtoReflect.Descriptor instead.
func (*ExpirationLimit) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{111}
}

func (x *ExpirationLimit) GetDaysBeforeExpiration() uint32 {
	if x != nil && x.DaysBeforeExpiration != nil {
		return *x.DaysBeforeExpiration
	}
	return 0
}

func (x *ExpirationLimit) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

// Purchasing Power parameters.
// Parameters which have ms_ prefix are taken into account only when enforce_margin_subsystem_parameters is True.
type PurchasingPowerParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Additional credit available to satisfy margin requirements.
	MsAllowableMarginCredit *float64 `protobuf:"fixed64,1,opt,name=ms_allowable_margin_credit,json=msAllowableMarginCredit" json:"ms_allowable_margin_credit,omitempty"`
	// Cross margining indicator. If true then inter-month, inter-commodity and inter-exchange credits are considered in margin estimation.
	MsCrossMargining *bool `protobuf:"varint,2,opt,name=ms_cross_margining,json=msCrossMargining" json:"ms_cross_margining,omitempty"`
	// Include OTE (Open Trade Equity) in Purchasing Power (PP).
	// This field is associated with IncludeOption enum.
	MsIncludeOtePp *uint32 `protobuf:"varint,3,opt,name=ms_include_ote_pp,json=msIncludeOtePp" json:"ms_include_ote_pp,omitempty"`
	// Include NOV (Net Option Value) in Purchasing Power (PP).
	// This field is associated with IncludeOption enum.
	MsIncludeNovPp *uint32 `protobuf:"varint,4,opt,name=ms_include_nov_pp,json=msIncludeNovPp" json:"ms_include_nov_pp,omitempty"`
	// Include UPL (Unrealized Profit Loss) in DLL/DDLL (Daily Loss Limit and Delta Daily Loss Limit)
	// This field is associated with IncludeOption enum.
	IncludeUplLl *uint32 `protobuf:"varint,5,opt,name=include_upl_ll,json=includeUplLl" json:"include_upl_ll,omitempty"`
	// Include OTE (Open Trade Equity) in DLL/DDLL (Daily Loss Limit and Delta Daily Loss Limit)
	// This field is associated with IncludeOption enum.
	IncludeOteLl *uint32 `protobuf:"varint,6,opt,name=include_ote_ll,json=includeOteLl" json:"include_ote_ll,omitempty"`
	// Check for the negative balance.
	CheckNegativeBalance *bool `protobuf:"varint,7,opt,name=check_negative_balance,json=checkNegativeBalance" json:"check_negative_balance,omitempty"`
	// If true then OTE, NOV, and UPL can be calculated using theoretical values.
	UseTheoPrices *bool `protobuf:"varint,8,opt,name=use_theo_prices,json=useTheoPrices" json:"use_theo_prices,omitempty"`
	// Slippage for option theoretical price in ticks.
	TheoTicks *int32 `protobuf:"zigzag32,9,opt,name=theo_ticks,json=theoTicks" json:"theo_ticks,omitempty"`
	// If true then Best Bid and Ask can be used for OTE calculation, only trade and settlement are used otherwise.
	UseBbaOte *bool `protobuf:"varint,10,opt,name=use_bba_ote,json=useBbaOte" json:"use_bba_ote,omitempty"`
	// If true then Best Bid and Ask can be used for NOV and UPL calculation, only trade and settlement are used otherwise.
	UseBbaNovUpl *bool `protobuf:"varint,11,opt,name=use_bba_nov_upl,json=useBbaNovUpl" json:"use_bba_nov_upl,omitempty"`
	// Calculate current price as a settlement adjusted by net price change of reference contract, LME style.
	AdjustPriceByNetchange *bool `protobuf:"varint,12,opt,name=adjust_price_by_netchange,json=adjustPriceByNetchange" json:"adjust_price_by_netchange,omitempty"`
	// Use brokerage's configured margins instead of gateway's default ones.
	// Using this option you are disabling cross-margining, even if it is enabled.
	// Can be set if it is allowed on brokerage level only.
	UseBrokerageMarginsOnly *bool `protobuf:"varint,13,opt,name=use_brokerage_margins_only,json=useBrokerageMarginsOnly" json:"use_brokerage_margins_only,omitempty"`
	// Multiplier for calculated margin requirements. Allowed values (0.001..100).
	MarginMultiplier *float64 `protobuf:"fixed64,14,opt,name=margin_multiplier,json=marginMultiplier" json:"margin_multiplier,omitempty"`
	// If true then margin is calculated independently for options using instrument_group_margin_multiplier.
	MsUseInstrumentGroupMarginMultiplier *bool `protobuf:"varint,15,opt,name=ms_use_instrument_group_margin_multiplier,json=msUseInstrumentGroupMarginMultiplier" json:"ms_use_instrument_group_margin_multiplier,omitempty"`
	// Multiplier for calculated instrument group (options) margin requirements. Allowed values (0.001..100).
	MsInstrumentGroupMarginMultiplier *float64 `protobuf:"fixed64,16,opt,name=ms_instrument_group_margin_multiplier,json=msInstrumentGroupMarginMultiplier" json:"ms_instrument_group_margin_multiplier,omitempty"`
}

func (x *PurchasingPowerParameters) Reset() {
	*x = PurchasingPowerParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurchasingPowerParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchasingPowerParameters) ProtoMessage() {}

func (x *PurchasingPowerParameters) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchasingPowerParameters.ProtoReflect.Descriptor instead.
func (*PurchasingPowerParameters) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{112}
}

func (x *PurchasingPowerParameters) GetMsAllowableMarginCredit() float64 {
	if x != nil && x.MsAllowableMarginCredit != nil {
		return *x.MsAllowableMarginCredit
	}
	return 0
}

func (x *PurchasingPowerParameters) GetMsCrossMargining() bool {
	if x != nil && x.MsCrossMargining != nil {
		return *x.MsCrossMargining
	}
	return false
}

func (x *PurchasingPowerParameters) GetMsIncludeOtePp() uint32 {
	if x != nil && x.MsIncludeOtePp != nil {
		return *x.MsIncludeOtePp
	}
	return 0
}

func (x *PurchasingPowerParameters) GetMsIncludeNovPp() uint32 {
	if x != nil && x.MsIncludeNovPp != nil {
		return *x.MsIncludeNovPp
	}
	return 0
}

func (x *PurchasingPowerParameters) GetIncludeUplLl() uint32 {
	if x != nil && x.IncludeUplLl != nil {
		return *x.IncludeUplLl
	}
	return 0
}

func (x *PurchasingPowerParameters) GetIncludeOteLl() uint32 {
	if x != nil && x.IncludeOteLl != nil {
		return *x.IncludeOteLl
	}
	return 0
}

func (x *PurchasingPowerParameters) GetCheckNegativeBalance() bool {
	if x != nil && x.CheckNegativeBalance != nil {
		return *x.CheckNegativeBalance
	}
	return false
}

func (x *PurchasingPowerParameters) GetUseTheoPrices() bool {
	if x != nil && x.UseTheoPrices != nil {
		return *x.UseTheoPrices
	}
	return false
}

func (x *PurchasingPowerParameters) GetTheoTicks() int32 {
	if x != nil && x.TheoTicks != nil {
		return *x.TheoTicks
	}
	return 0
}

func (x *PurchasingPowerParameters) GetUseBbaOte() bool {
	if x != nil && x.UseBbaOte != nil {
		return *x.UseBbaOte
	}
	return false
}

func (x *PurchasingPowerParameters) GetUseBbaNovUpl() bool {
	if x != nil && x.UseBbaNovUpl != nil {
		return *x.UseBbaNovUpl
	}
	return false
}

func (x *PurchasingPowerParameters) GetAdjustPriceByNetchange() bool {
	if x != nil && x.AdjustPriceByNetchange != nil {
		return *x.AdjustPriceByNetchange
	}
	return false
}

func (x *PurchasingPowerParameters) GetUseBrokerageMarginsOnly() bool {
	if x != nil && x.UseBrokerageMarginsOnly != nil {
		return *x.UseBrokerageMarginsOnly
	}
	return false
}

func (x *PurchasingPowerParameters) GetMarginMultiplier() float64 {
	if x != nil && x.MarginMultiplier != nil {
		return *x.MarginMultiplier
	}
	return 0
}

func (x *PurchasingPowerParameters) GetMsUseInstrumentGroupMarginMultiplier() bool {
	if x != nil && x.MsUseInstrumentGroupMarginMultiplier != nil {
		return *x.MsUseInstrumentGroupMarginMultiplier
	}
	return false
}

func (x *PurchasingPowerParameters) GetMsInstrumentGroupMarginMultiplier() float64 {
	if x != nil && x.MsInstrumentGroupMarginMultiplier != nil {
		return *x.MsInstrumentGroupMarginMultiplier
	}
	return 0
}

// Loss limit.
type LossLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field is associated with Type enumeration.
	Type *uint32 `protobuf:"varint,1,req,name=type" json:"type,omitempty"`
	// Percent of funds allowed in losses, entered as a fractional between 0 and 1.
	Percent *float64 `protobuf:"fixed64,2,opt,name=percent" json:"percent,omitempty"`
	// Absolute amount in US dollars allowed in losses.
	Amount *float64 `protobuf:"fixed64,3,opt,name=amount" json:"amount,omitempty"`
}

func (x *LossLimit) Reset() {
	*x = LossLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LossLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LossLimit) ProtoMessage() {}

func (x *LossLimit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LossLimit.ProtoReflect.Descriptor instead.
func (*LossLimit) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{113}
}

func (x *LossLimit) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *LossLimit) GetPercent() float64 {
	if x != nil && x.Percent != nil {
		return *x.Percent
	}
	return 0
}

func (x *LossLimit) GetAmount() float64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

// Exchange group with a list of commodities.
type ExchangeGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trade routing system identifier of an exchange group.
	Id *int32 `protobuf:"zigzag32,1,req,name=id" json:"id,omitempty"`
	// Name of the exchange group.
	Name *Text `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	// List of exchange group fungible commodities.
	FungibleCommodity []*FungibleCommodity `protobuf:"bytes,3,rep,name=fungible_commodity,json=fungibleCommodity" json:"fungible_commodity,omitempty"`
}

func (x *ExchangeGroup) Reset() {
	*x = ExchangeGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeGroup) ProtoMessage() {}

func (x *ExchangeGroup) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeGroup.ProtoReflect.Descriptor instead.
func (*ExchangeGroup) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{114}
}

func (x *ExchangeGroup) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ExchangeGroup) GetName() *Text {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ExchangeGroup) GetFungibleCommodity() []*FungibleCommodity {
	if x != nil {
		return x.FungibleCommodity
	}
	return nil
}

// Fungible commodity.
type FungibleCommodity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trade routing system identifier of the fungible commodity.
	Id *int32 `protobuf:"zigzag32,1,req,name=id" json:"id,omitempty"`
	// Name of the fungible commodity.
	Name *Text `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	// List of tradable commoditie
	TradableCommodity []*TradableCommodity `protobuf:"bytes,3,rep,name=tradable_commodity,json=tradableCommodity" json:"tradable_commodity,omitempty"`
	// US commodity indicator.
	IsUs *bool `protobuf:"varint,4,req,name=is_us,json=isUs" json:"is_us,omitempty"`
	// List of instrument types defined for this fungible commodity.
	InstrumentTypeId []int32 `protobuf:"zigzag32,5,rep,name=instrument_type_id,json=instrumentTypeId" json:"instrument_type_id,omitempty"`
}

func (x *FungibleCommodity) Reset() {
	*x = FungibleCommodity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FungibleCommodity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FungibleCommodity) ProtoMessage() {}

func (x *FungibleCommodity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FungibleCommodity.ProtoReflect.Descriptor instead.
func (*FungibleCommodity) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{115}
}

func (x *FungibleCommodity) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *FungibleCommodity) GetName() *Text {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *FungibleCommodity) GetTradableCommodity() []*TradableCommodity {
	if x != nil {
		return x.TradableCommodity
	}
	return nil
}

func (x *FungibleCommodity) GetIsUs() bool {
	if x != nil && x.IsUs != nil {
		return *x.IsUs
	}
	return false
}

func (x *FungibleCommodity) GetInstrumentTypeId() []int32 {
	if x != nil {
		return x.InstrumentTypeId
	}
	return nil
}

// Tradable commodity.
type TradableCommodity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Commodity string id (aka Commodity Xbit).
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// Commodity symbol.
	Symbol *string `protobuf:"bytes,2,req,name=symbol" json:"symbol,omitempty"`
}

func (x *TradableCommodity) Reset() {
	*x = TradableCommodity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradableCommodity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradableCommodity) ProtoMessage() {}

func (x *TradableCommodity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradableCommodity.ProtoReflect.Descriptor instead.
func (*TradableCommodity) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{116}
}

func (x *TradableCommodity) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *TradableCommodity) GetSymbol() string {
	if x != nil && x.Symbol != nil {
		return *x.Symbol
	}
	return ""
}

// Instrument type.
type InstrumentType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trade routing system identifier of the instrument type.
	Id *int32 `protobuf:"zigzag32,1,req,name=id" json:"id,omitempty"`
	// Name of the instrument type.
	Name *Text `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	// List of limit types that are acceptable for this instrument type.
	// This filed is associated with MarketLimitType enum.
	AllowedLimits []uint32 `protobuf:"varint,3,rep,name=allowed_limits,json=allowedLimits" json:"allowed_limits,omitempty"`
}

func (x *InstrumentType) Reset() {
	*x = InstrumentType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentType) ProtoMessage() {}

func (x *InstrumentType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentType.ProtoReflect.Descriptor instead.
func (*InstrumentType) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{117}
}

func (x *InstrumentType) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *InstrumentType) GetName() *Text {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *InstrumentType) GetAllowedLimits() []uint32 {
	if x != nil {
		return x.AllowedLimits
	}
	return nil
}

// Market Limits set.
// The general rules for using this result are:
// - all fungible commodities with non-default limit(s) are returned (even those with no 'allowed to trade' tradable commodities);
// - to determine if a tradable commodity is enabled (allowed to trade), first check tradable_commodity_id field;
//   if the tradable commodity is not present there, use the next rule;
// - if something is not specified on a lower level, check defaults at applicable higher levels
//   (fungible commodity -> exchange group -> all US/non-US commodities -> all commodities).
type MarketLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Allows to clear (set to default) all market limits (including trading authority) for provided level except all_market_limits.
	ClearedFields []uint32 `protobuf:"varint,5,rep,name=cleared_fields,json=clearedFields" json:"cleared_fields,omitempty"`
	// Default market limits for all commodities.
	AllMarketLimits *MarketLimitsRecord `protobuf:"bytes,1,opt,name=all_market_limits,json=allMarketLimits" json:"all_market_limits,omitempty"`
	// Default market limits for US commodities.
	UsMarketLimits *MarketLimitsRecord `protobuf:"bytes,2,opt,name=us_market_limits,json=usMarketLimits" json:"us_market_limits,omitempty"`
	// Default market limits for non-US commodities.
	NonUsMarketLimits *MarketLimitsRecord `protobuf:"bytes,3,opt,name=non_us_market_limits,json=nonUsMarketLimits" json:"non_us_market_limits,omitempty"`
	// Default market limits for exchange groups.
	ExchangeMarketLimits []*ExchangeMarketLimits `protobuf:"bytes,4,rep,name=exchange_market_limits,json=exchangeMarketLimits" json:"exchange_market_limits,omitempty"`
}

func (x *MarketLimits) Reset() {
	*x = MarketLimits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketLimits) ProtoMessage() {}

func (x *MarketLimits) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketLimits.ProtoReflect.Descriptor instead.
func (*MarketLimits) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{118}
}

func (x *MarketLimits) GetClearedFields() []uint32 {
	if x != nil {
		return x.ClearedFields
	}
	return nil
}

func (x *MarketLimits) GetAllMarketLimits() *MarketLimitsRecord {
	if x != nil {
		return x.AllMarketLimits
	}
	return nil
}

func (x *MarketLimits) GetUsMarketLimits() *MarketLimitsRecord {
	if x != nil {
		return x.UsMarketLimits
	}
	return nil
}

func (x *MarketLimits) GetNonUsMarketLimits() *MarketLimitsRecord {
	if x != nil {
		return x.NonUsMarketLimits
	}
	return nil
}

func (x *MarketLimits) GetExchangeMarketLimits() []*ExchangeMarketLimits {
	if x != nil {
		return x.ExchangeMarketLimits
	}
	return nil
}

// Record of market limit setting for exchange group level or higher.
// Limit values are defaults for all included commodities and can be can be overridden on a lower level.
type MarketLimitsRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Allows to clear (set to default) all market limits for this record.
	ClearedFields []uint32 `protobuf:"varint,4,rep,name=cleared_fields,json=clearedFields" json:"cleared_fields,omitempty"`
	// Indicates if level is allowed to trade.
	// If null (not set) - default, actual value inherited from upper level.
	AllowedToTrade *EntityAllowedToTrade `protobuf:"bytes,1,opt,name=allowed_to_trade,json=allowedToTrade" json:"allowed_to_trade,omitempty"`
	// Default margin multiplier. Allowed values (0.001..100).
	MarginMultiplier *float64 `protobuf:"fixed64,2,opt,name=margin_multiplier,json=marginMultiplier" json:"margin_multiplier,omitempty"`
	// Default position and Trade limits.
	PositionAndTradeLimits *PositionAndTradeLimits `protobuf:"bytes,3,opt,name=position_and_trade_limits,json=positionAndTradeLimits" json:"position_and_trade_limits,omitempty"`
}

func (x *MarketLimitsRecord) Reset() {
	*x = MarketLimitsRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketLimitsRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketLimitsRecord) ProtoMessage() {}

func (x *MarketLimitsRecord) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketLimitsRecord.ProtoReflect.Descriptor instead.
func (*MarketLimitsRecord) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{119}
}

func (x *MarketLimitsRecord) GetClearedFields() []uint32 {
	if x != nil {
		return x.ClearedFields
	}
	return nil
}

func (x *MarketLimitsRecord) GetAllowedToTrade() *EntityAllowedToTrade {
	if x != nil {
		return x.AllowedToTrade
	}
	return nil
}

func (x *MarketLimitsRecord) GetMarginMultiplier() float64 {
	if x != nil && x.MarginMultiplier != nil {
		return *x.MarginMultiplier
	}
	return 0
}

func (x *MarketLimitsRecord) GetPositionAndTradeLimits() *PositionAndTradeLimits {
	if x != nil {
		return x.PositionAndTradeLimits
	}
	return nil
}

// Set of position and trade limits for all possible levels.
type PositionAndTradeLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Allows to clear (set to default) all position and trade limits.
	ClearedFields []uint32 `protobuf:"varint,12,rep,name=cleared_fields,json=clearedFields" json:"cleared_fields,omitempty"`
	// Optional commodity position limit.
	// It is not used (and does not make sense) on instrument type level of settings.
	CommodityPositionLimit *LimitValue `protobuf:"bytes,1,opt,name=commodity_position_limit,json=commodityPositionLimit" json:"commodity_position_limit,omitempty"`
	// Instrument position limit.
	// It is not applicable for some instrument types.
	InstrumentPositionLimit *LimitValue `protobuf:"bytes,2,opt,name=instrument_position_limit,json=instrumentPositionLimit" json:"instrument_position_limit,omitempty"`
	// Contract position limit.
	// It is not applicable for some instrument types.
	ContractPositionLimit *LimitValue `protobuf:"bytes,3,opt,name=contract_position_limit,json=contractPositionLimit" json:"contract_position_limit,omitempty"`
	// Trade size limit.
	// It is not applicable for some instrument types.
	TradeSizeLimit *LimitValue `protobuf:"bytes,4,opt,name=trade_size_limit,json=tradeSizeLimit" json:"trade_size_limit,omitempty"`
	// Trade price limit (all price sources) (in ticks).
	TradePriceLimitTicks *LimitValue `protobuf:"bytes,5,opt,name=trade_price_limit_ticks,json=tradePriceLimitTicks" json:"trade_price_limit_ticks,omitempty"`
	// Trade price limit (all price sources) (in percent).
	TradePriceLimitPercent *LimitValueDouble `protobuf:"bytes,6,opt,name=trade_price_limit_percent,json=tradePriceLimitPercent" json:"trade_price_limit_percent,omitempty"`
	// Trade price limits in ticks per price sources for continuous trading.
	TradePriceLimitTicksContinuous *TradePriceLimitsTicks `protobuf:"bytes,7,opt,name=trade_price_limit_ticks_continuous,json=tradePriceLimitTicksContinuous" json:"trade_price_limit_ticks_continuous,omitempty"`
	// Trade price limits in ticks per price sources for non-continuous trading.
	TradePriceLimitTicksNonContinuous *TradePriceLimitsTicks `protobuf:"bytes,8,opt,name=trade_price_limit_ticks_non_continuous,json=tradePriceLimitTicksNonContinuous" json:"trade_price_limit_ticks_non_continuous,omitempty"`
	// Trade price limits in percent per price sources for continuous trading.
	TradePriceLimitPercentContinuous *TradePriceLimitsPercent `protobuf:"bytes,9,opt,name=trade_price_limit_percent_continuous,json=tradePriceLimitPercentContinuous" json:"trade_price_limit_percent_continuous,omitempty"`
	// Trade price limits in percent per price sources for non-continuous trading.
	TradePriceLimitPercentNonContinuous *TradePriceLimitsPercent `protobuf:"bytes,10,opt,name=trade_price_limit_percent_non_continuous,json=tradePriceLimitPercentNonContinuous" json:"trade_price_limit_percent_non_continuous,omitempty"`
	// Order placement date plus this amount of days must be more than contract last trading date.
	LastTradingDateLimit *LimitValue `protobuf:"bytes,11,opt,name=last_trading_date_limit,json=lastTradingDateLimit" json:"last_trading_date_limit,omitempty"`
}

func (x *PositionAndTradeLimits) Reset() {
	*x = PositionAndTradeLimits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionAndTradeLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionAndTradeLimits) ProtoMessage() {}

func (x *PositionAndTradeLimits) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionAndTradeLimits.ProtoReflect.Descriptor instead.
func (*PositionAndTradeLimits) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{120}
}

func (x *PositionAndTradeLimits) GetClearedFields() []uint32 {
	if x != nil {
		return x.ClearedFields
	}
	return nil
}

func (x *PositionAndTradeLimits) GetCommodityPositionLimit() *LimitValue {
	if x != nil {
		return x.CommodityPositionLimit
	}
	return nil
}

func (x *PositionAndTradeLimits) GetInstrumentPositionLimit() *LimitValue {
	if x != nil {
		return x.InstrumentPositionLimit
	}
	return nil
}

func (x *PositionAndTradeLimits) GetContractPositionLimit() *LimitValue {
	if x != nil {
		return x.ContractPositionLimit
	}
	return nil
}

func (x *PositionAndTradeLimits) GetTradeSizeLimit() *LimitValue {
	if x != nil {
		return x.TradeSizeLimit
	}
	return nil
}

func (x *PositionAndTradeLimits) GetTradePriceLimitTicks() *LimitValue {
	if x != nil {
		return x.TradePriceLimitTicks
	}
	return nil
}

func (x *PositionAndTradeLimits) GetTradePriceLimitPercent() *LimitValueDouble {
	if x != nil {
		return x.TradePriceLimitPercent
	}
	return nil
}

func (x *PositionAndTradeLimits) GetTradePriceLimitTicksContinuous() *TradePriceLimitsTicks {
	if x != nil {
		return x.TradePriceLimitTicksContinuous
	}
	return nil
}

func (x *PositionAndTradeLimits) GetTradePriceLimitTicksNonContinuous() *TradePriceLimitsTicks {
	if x != nil {
		return x.TradePriceLimitTicksNonContinuous
	}
	return nil
}

func (x *PositionAndTradeLimits) GetTradePriceLimitPercentContinuous() *TradePriceLimitsPercent {
	if x != nil {
		return x.TradePriceLimitPercentContinuous
	}
	return nil
}

func (x *PositionAndTradeLimits) GetTradePriceLimitPercentNonContinuous() *TradePriceLimitsPercent {
	if x != nil {
		return x.TradePriceLimitPercentNonContinuous
	}
	return nil
}

func (x *PositionAndTradeLimits) GetLastTradingDateLimit() *LimitValue {
	if x != nil {
		return x.LastTradingDateLimit
	}
	return nil
}

// Trade price limits in ticks per price sources.
type TradePriceLimitsTicks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bid/Ask price source.
	BidAsk *LimitValue `protobuf:"bytes,1,opt,name=bid_ask,json=bidAsk" json:"bid_ask,omitempty"`
	// The last trade price source.
	// Not used for non-continuous trading.
	Last *LimitValue `protobuf:"bytes,2,opt,name=last" json:"last,omitempty"`
	// Open (for continuous) price source - the first trading price at the beginning of the trading day.
	// Indicative open (for non-continuous) price source - the proposed open price at the beginning of the next trading day.
	Open *LimitValue `protobuf:"bytes,3,opt,name=open" json:"open,omitempty"`
	// Settlement price source - an official price established at the end of each trading day.
	Settlement *LimitValue `protobuf:"bytes,4,opt,name=settlement" json:"settlement,omitempty"`
}

func (x *TradePriceLimitsTicks) Reset() {
	*x = TradePriceLimitsTicks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradePriceLimitsTicks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradePriceLimitsTicks) ProtoMessage() {}

func (x *TradePriceLimitsTicks) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradePriceLimitsTicks.ProtoReflect.Descriptor instead.
func (*TradePriceLimitsTicks) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{121}
}

func (x *TradePriceLimitsTicks) GetBidAsk() *LimitValue {
	if x != nil {
		return x.BidAsk
	}
	return nil
}

func (x *TradePriceLimitsTicks) GetLast() *LimitValue {
	if x != nil {
		return x.Last
	}
	return nil
}

func (x *TradePriceLimitsTicks) GetOpen() *LimitValue {
	if x != nil {
		return x.Open
	}
	return nil
}

func (x *TradePriceLimitsTicks) GetSettlement() *LimitValue {
	if x != nil {
		return x.Settlement
	}
	return nil
}

// Trade price limits in percent per price sources.
type TradePriceLimitsPercent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bid/Ask price source.
	BidAsk *LimitValueDouble `protobuf:"bytes,1,opt,name=bid_ask,json=bidAsk" json:"bid_ask,omitempty"`
	// The last trade price source.
	// Not used for non-continuous trading.
	Last *LimitValueDouble `protobuf:"bytes,2,opt,name=last" json:"last,omitempty"`
	// Open (for continuous) price source - the first trading price at the beginning of the trading day.
	// Indicative open (for non-continuous) price source - the proposed open price at the beginning of the next trading day.
	Open *LimitValueDouble `protobuf:"bytes,3,opt,name=open" json:"open,omitempty"`
	// Settlement price source - an official price established at the end of each trading day.
	Settlement *LimitValueDouble `protobuf:"bytes,4,opt,name=settlement" json:"settlement,omitempty"`
}

func (x *TradePriceLimitsPercent) Reset() {
	*x = TradePriceLimitsPercent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradePriceLimitsPercent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradePriceLimitsPercent) ProtoMessage() {}

func (x *TradePriceLimitsPercent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradePriceLimitsPercent.ProtoReflect.Descriptor instead.
func (*TradePriceLimitsPercent) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{122}
}

func (x *TradePriceLimitsPercent) GetBidAsk() *LimitValueDouble {
	if x != nil {
		return x.BidAsk
	}
	return nil
}

func (x *TradePriceLimitsPercent) GetLast() *LimitValueDouble {
	if x != nil {
		return x.Last
	}
	return nil
}

func (x *TradePriceLimitsPercent) GetOpen() *LimitValueDouble {
	if x != nil {
		return x.Open
	}
	return nil
}

func (x *TradePriceLimitsPercent) GetSettlement() *LimitValueDouble {
	if x != nil {
		return x.Settlement
	}
	return nil
}

// Exchange group level limits.
type ExchangeMarketLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Allows to clear (set to default) all limits on exchange level (default_market_limits) and below (commodity_market_limits).
	ClearedFields []uint32 `protobuf:"varint,4,rep,name=cleared_fields,json=clearedFields" json:"cleared_fields,omitempty"`
	// Trade routing system identifier of an exchange group.
	ExchangeGroupId *int32 `protobuf:"zigzag32,1,req,name=exchange_group_id,json=exchangeGroupId" json:"exchange_group_id,omitempty"`
	// Default exchange group level limits.
	DefaultMarketLimits *MarketLimitsRecord `protobuf:"bytes,2,opt,name=default_market_limits,json=defaultMarketLimits" json:"default_market_limits,omitempty"`
	// List of fungible commodity level limits.
	CommodityMarketLimits []*CommodityMarketLimits `protobuf:"bytes,3,rep,name=commodity_market_limits,json=commodityMarketLimits" json:"commodity_market_limits,omitempty"`
}

func (x *ExchangeMarketLimits) Reset() {
	*x = ExchangeMarketLimits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeMarketLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeMarketLimits) ProtoMessage() {}

func (x *ExchangeMarketLimits) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeMarketLimits.ProtoReflect.Descriptor instead.
func (*ExchangeMarketLimits) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{123}
}

func (x *ExchangeMarketLimits) GetClearedFields() []uint32 {
	if x != nil {
		return x.ClearedFields
	}
	return nil
}

func (x *ExchangeMarketLimits) GetExchangeGroupId() int32 {
	if x != nil && x.ExchangeGroupId != nil {
		return *x.ExchangeGroupId
	}
	return 0
}

func (x *ExchangeMarketLimits) GetDefaultMarketLimits() *MarketLimitsRecord {
	if x != nil {
		return x.DefaultMarketLimits
	}
	return nil
}

func (x *ExchangeMarketLimits) GetCommodityMarketLimits() []*CommodityMarketLimits {
	if x != nil {
		return x.CommodityMarketLimits
	}
	return nil
}

// Fungible commodity level limits.
type CommodityMarketLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Allows to clear (set to default) all limits of this commodity level and below (instrument_market_limits).
	ClearedFields []uint32 `protobuf:"varint,6,rep,name=cleared_fields,json=clearedFields" json:"cleared_fields,omitempty"`
	// Fungible commodity ID.
	FungibleCommodityId *int32 `protobuf:"zigzag32,1,req,name=fungible_commodity_id,json=fungibleCommodityId" json:"fungible_commodity_id,omitempty"`
	// [obsolete] List of allowed to trade tradable commodity ids.
	//
	// Deprecated: Do not use.
	ObsoleteTradableCommodityId []string `protobuf:"bytes,2,rep,name=obsolete_tradable_commodity_id,json=obsoleteTradableCommodityId" json:"obsolete_tradable_commodity_id,omitempty"`
	// Default commodity level position and Trade limits.
	PositionAndTradeLimits *PositionAndTradeLimits `protobuf:"bytes,3,opt,name=position_and_trade_limits,json=positionAndTradeLimits" json:"position_and_trade_limits,omitempty"`
	// List of instrument type level limits.
	InstrumentMarketLimits []*InstrumentMarketLimits `protobuf:"bytes,4,rep,name=instrument_market_limits,json=instrumentMarketLimits" json:"instrument_market_limits,omitempty"`
	// List of non-default allowed to trade configuration of commodities.
	// EntityAllowedToTrade.id is commodity_id (aka XBit).
	AllowedToTradeCommodities []*EntityAllowedToTrade `protobuf:"bytes,5,rep,name=allowed_to_trade_commodities,json=allowedToTradeCommodities" json:"allowed_to_trade_commodities,omitempty"`
}

func (x *CommodityMarketLimits) Reset() {
	*x = CommodityMarketLimits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommodityMarketLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommodityMarketLimits) ProtoMessage() {}

func (x *CommodityMarketLimits) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommodityMarketLimits.ProtoReflect.Descriptor instead.
func (*CommodityMarketLimits) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{124}
}

func (x *CommodityMarketLimits) GetClearedFields() []uint32 {
	if x != nil {
		return x.ClearedFields
	}
	return nil
}

func (x *CommodityMarketLimits) GetFungibleCommodityId() int32 {
	if x != nil && x.FungibleCommodityId != nil {
		return *x.FungibleCommodityId
	}
	return 0
}

// Deprecated: Do not use.
func (x *CommodityMarketLimits) GetObsoleteTradableCommodityId() []string {
	if x != nil {
		return x.ObsoleteTradableCommodityId
	}
	return nil
}

func (x *CommodityMarketLimits) GetPositionAndTradeLimits() *PositionAndTradeLimits {
	if x != nil {
		return x.PositionAndTradeLimits
	}
	return nil
}

func (x *CommodityMarketLimits) GetInstrumentMarketLimits() []*InstrumentMarketLimits {
	if x != nil {
		return x.InstrumentMarketLimits
	}
	return nil
}

func (x *CommodityMarketLimits) GetAllowedToTradeCommodities() []*EntityAllowedToTrade {
	if x != nil {
		return x.AllowedToTradeCommodities
	}
	return nil
}

// Instrument type level limits.
type InstrumentMarketLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Allows to clear (set to default) all limits of this instrument.
	ClearedFields []uint32 `protobuf:"varint,5,rep,name=cleared_fields,json=clearedFields" json:"cleared_fields,omitempty"`
	// ID of the instrument type.
	InstrumentTypeId *int32 `protobuf:"zigzag32,1,req,name=instrument_type_id,json=instrumentTypeId" json:"instrument_type_id,omitempty"`
	// Instrument type level position and Trade limits.
	PositionAndTradeLimits *PositionAndTradeLimits `protobuf:"bytes,2,opt,name=position_and_trade_limits,json=positionAndTradeLimits" json:"position_and_trade_limits,omitempty"`
	// List of non-default allowed to trade configuration of commodities.
	AllowedToTradeCommodities []*EntityAllowedToTrade `protobuf:"bytes,3,rep,name=allowed_to_trade_commodities,json=allowedToTradeCommodities" json:"allowed_to_trade_commodities,omitempty"`
	// List of non-default allowed to trade configuration of contracts.
	AllowedToTradeContracts []*EntityAllowedToTrade `protobuf:"bytes,4,rep,name=allowed_to_trade_contracts,json=allowedToTradeContracts" json:"allowed_to_trade_contracts,omitempty"`
}

func (x *InstrumentMarketLimits) Reset() {
	*x = InstrumentMarketLimits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentMarketLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentMarketLimits) ProtoMessage() {}

func (x *InstrumentMarketLimits) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentMarketLimits.ProtoReflect.Descriptor instead.
func (*InstrumentMarketLimits) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{125}
}

func (x *InstrumentMarketLimits) GetClearedFields() []uint32 {
	if x != nil {
		return x.ClearedFields
	}
	return nil
}

func (x *InstrumentMarketLimits) GetInstrumentTypeId() int32 {
	if x != nil && x.InstrumentTypeId != nil {
		return *x.InstrumentTypeId
	}
	return 0
}

func (x *InstrumentMarketLimits) GetPositionAndTradeLimits() *PositionAndTradeLimits {
	if x != nil {
		return x.PositionAndTradeLimits
	}
	return nil
}

func (x *InstrumentMarketLimits) GetAllowedToTradeCommodities() []*EntityAllowedToTrade {
	if x != nil {
		return x.AllowedToTradeCommodities
	}
	return nil
}

func (x *InstrumentMarketLimits) GetAllowedToTradeContracts() []*EntityAllowedToTrade {
	if x != nil {
		return x.AllowedToTradeContracts
	}
	return nil
}

// Represents any entity that can be allowed/disallowed to trade.
type EntityAllowedToTrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Entity identifier
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Indicates if entity is allowed to trade.
	// Values: null (not set) - default, actual value inherited from upper level.
	//         false - explicitly disallowed, no matter what value is on upper level.
	//         true - explicitly allowed, no matter what value is on upper level.
	AllowedToTrade *bool `protobuf:"varint,2,opt,name=allowed_to_trade,json=allowedToTrade" json:"allowed_to_trade,omitempty"`
	// Enforce All brokerage accounts to use this setting.
	// Only applicable for Brokerage level configuration.
	Enforce *bool `protobuf:"varint,3,opt,name=enforce" json:"enforce,omitempty"`
}

func (x *EntityAllowedToTrade) Reset() {
	*x = EntityAllowedToTrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityAllowedToTrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityAllowedToTrade) ProtoMessage() {}

func (x *EntityAllowedToTrade) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityAllowedToTrade.ProtoReflect.Descriptor instead.
func (*EntityAllowedToTrade) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{126}
}

func (x *EntityAllowedToTrade) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *EntityAllowedToTrade) GetAllowedToTrade() bool {
	if x != nil && x.AllowedToTrade != nil {
		return *x.AllowedToTrade
	}
	return false
}

func (x *EntityAllowedToTrade) GetEnforce() bool {
	if x != nil && x.Enforce != nil {
		return *x.Enforce
	}
	return false
}

// Contract positions.
type ContractPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contract symbol.
	Symbol *string `protobuf:"bytes,1,req,name=symbol" json:"symbol,omitempty"`
	// True if open positions are short (result of sell operations), long otherwise.
	IsShortOpenPosition *bool `protobuf:"varint,2,req,name=is_short_open_position,json=isShortOpenPosition" json:"is_short_open_position,omitempty"`
	// List of open positions.
	// There could be more than one position per contract separating contributed trades on different price levels.
	OpenPosition []*OpenPosition `protobuf:"bytes,3,rep,name=open_position,json=openPosition" json:"open_position,omitempty"`
}

func (x *ContractPosition) Reset() {
	*x = ContractPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractPosition) ProtoMessage() {}

func (x *ContractPosition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractPosition.ProtoReflect.Descriptor instead.
func (*ContractPosition) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{127}
}

func (x *ContractPosition) GetSymbol() string {
	if x != nil && x.Symbol != nil {
		return *x.Symbol
	}
	return ""
}

func (x *ContractPosition) GetIsShortOpenPosition() bool {
	if x != nil && x.IsShortOpenPosition != nil {
		return *x.IsShortOpenPosition
	}
	return false
}

func (x *ContractPosition) GetOpenPosition() []*OpenPosition {
	if x != nil {
		return x.OpenPosition
	}
	return nil
}

// Contract open position.
type OpenPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Position size, zero means that this position is deleted.
	Qty *uint32 `protobuf:"varint,2,req,name=qty" json:"qty,omitempty"`
	// Position average price.
	// NOTE: Since it could be an aggregated position price is sent in correct format directly.
	Price *float64 `protobuf:"fixed64,3,req,name=price" json:"price,omitempty"`
	// Exchange specific trade date when the position was open or last changed (date only value).
	TradeDate *int64 `protobuf:"zigzag64,4,req,name=trade_date,json=tradeDate" json:"trade_date,omitempty"`
	// Statement date (date value only).
	StatementDate *int64 `protobuf:"zigzag64,5,req,name=statement_date,json=statementDate" json:"statement_date,omitempty"`
	// UTC trade time (including date) if available, it might not be available e.g. for the previous day or aggregated positions.
	TradeUtcTime *int64 `protobuf:"zigzag64,6,opt,name=trade_utc_time,json=tradeUtcTime" json:"trade_utc_time,omitempty"`
	// Position ID (status=POSITION) or order request ID (status=WORKING_ORDER)
	// associated with the position (if statement hasn't run yet).
	PositionId *string `protobuf:"bytes,7,opt,name=position_id,json=positionId" json:"position_id,omitempty"`
	// Indicates whether it is 'start of the day' or 'intraday' (working order) position.
	// The value is associated with OpenPosition.PositionStatus enum.
	Status *uint32 `protobuf:"varint,8,opt,name=status" json:"status,omitempty"`
}

func (x *OpenPosition) Reset() {
	*x = OpenPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenPosition) ProtoMessage() {}

func (x *OpenPosition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenPosition.ProtoReflect.Descriptor instead.
func (*OpenPosition) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{128}
}

func (x *OpenPosition) GetQty() uint32 {
	if x != nil && x.Qty != nil {
		return *x.Qty
	}
	return 0
}

func (x *OpenPosition) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *OpenPosition) GetTradeDate() int64 {
	if x != nil && x.TradeDate != nil {
		return *x.TradeDate
	}
	return 0
}

func (x *OpenPosition) GetStatementDate() int64 {
	if x != nil && x.StatementDate != nil {
		return *x.StatementDate
	}
	return 0
}

func (x *OpenPosition) GetTradeUtcTime() int64 {
	if x != nil && x.TradeUtcTime != nil {
		return *x.TradeUtcTime
	}
	return 0
}

func (x *OpenPosition) GetPositionId() string {
	if x != nil && x.PositionId != nil {
		return *x.PositionId
	}
	return ""
}

func (x *OpenPosition) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

// Equity.
type Equity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Currency code of equity values (ISO 4217 based).
	Currency *string `protobuf:"bytes,1,req,name=currency" json:"currency,omitempty"`
	// Securities on deposit. Margin security values net of haircut.
	Securities *float64 `protobuf:"fixed64,2,req,name=securities" json:"securities,omitempty"`
	// Cash Balance excluding open futures profits/losses, option market values, and securities on deposit.
	Balance *float64 `protobuf:"fixed64,3,req,name=balance" json:"balance,omitempty"`
	// Total open trade equity. Open profits/losses on all futures positions.
	Ote *float64 `protobuf:"fixed64,4,req,name=ote" json:"ote,omitempty"`
	// Ending balance + total open trade equity.
	TotalEquity *float64 `protobuf:"fixed64,5,req,name=total_equity,json=totalEquity" json:"total_equity,omitempty"`
	// Mark to market value of option positions.
	Mvo *float64 `protobuf:"fixed64,6,req,name=mvo" json:"mvo,omitempty"`
	// Total equity + option market value + securities.
	TotalValue *float64 `protobuf:"fixed64,7,req,name=total_value,json=totalValue" json:"total_value,omitempty"`
	// Liquid funds available -- can be withdrawn from account.
	CashExcess *float64 `protobuf:"fixed64,8,opt,name=cash_excess,json=cashExcess" json:"cash_excess,omitempty"`
	// Implied initial margin requirement.
	// Equity required to establish current positions based on margin requirements.
	InitialMargin *float64 `protobuf:"fixed64,9,opt,name=initial_margin,json=initialMargin" json:"initial_margin,omitempty"`
	// Implied maintenance margin requirement.
	// Minimum equity required to maintain current positions based on margin requirements.
	MaintMargin *float64 `protobuf:"fixed64,10,opt,name=maint_margin,json=maintMargin" json:"maint_margin,omitempty"`
	// The sum of total equity and securities on deposit.
	PostedMargin *float64 `protobuf:"fixed64,11,opt,name=posted_margin,json=postedMargin" json:"posted_margin,omitempty"`
}

func (x *Equity) Reset() {
	*x = Equity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Equity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Equity) ProtoMessage() {}

func (x *Equity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Equity.ProtoReflect.Descriptor instead.
func (*Equity) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{129}
}

func (x *Equity) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *Equity) GetSecurities() float64 {
	if x != nil && x.Securities != nil {
		return *x.Securities
	}
	return 0
}

func (x *Equity) GetBalance() float64 {
	if x != nil && x.Balance != nil {
		return *x.Balance
	}
	return 0
}

func (x *Equity) GetOte() float64 {
	if x != nil && x.Ote != nil {
		return *x.Ote
	}
	return 0
}

func (x *Equity) GetTotalEquity() float64 {
	if x != nil && x.TotalEquity != nil {
		return *x.TotalEquity
	}
	return 0
}

func (x *Equity) GetMvo() float64 {
	if x != nil && x.Mvo != nil {
		return *x.Mvo
	}
	return 0
}

func (x *Equity) GetTotalValue() float64 {
	if x != nil && x.TotalValue != nil {
		return *x.TotalValue
	}
	return 0
}

func (x *Equity) GetCashExcess() float64 {
	if x != nil && x.CashExcess != nil {
		return *x.CashExcess
	}
	return 0
}

func (x *Equity) GetInitialMargin() float64 {
	if x != nil && x.InitialMargin != nil {
		return *x.InitialMargin
	}
	return 0
}

func (x *Equity) GetMaintMargin() float64 {
	if x != nil && x.MaintMargin != nil {
		return *x.MaintMargin
	}
	return 0
}

func (x *Equity) GetPostedMargin() float64 {
	if x != nil && x.PostedMargin != nil {
		return *x.PostedMargin
	}
	return 0
}

// Collateral (margin details).
type Collateral struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Currency code of margin and PP values (ISO 4217 based).
	Currency *string `protobuf:"bytes,4,req,name=currency" json:"currency,omitempty"`
	// Current total margin.
	TotalMargin *float64 `protobuf:"fixed64,5,req,name=total_margin,json=totalMargin" json:"total_margin,omitempty"`
	// Available account funds including balance, realized profit (or loss), collateral and credits.
	// NOTE: OTE and MVO are not included, regardless of account risk parameters.
	PurchasingPower *float64 `protobuf:"fixed64,6,req,name=purchasing_power,json=purchasingPower" json:"purchasing_power,omitempty"`
}

func (x *Collateral) Reset() {
	*x = Collateral{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collateral) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collateral) ProtoMessage() {}

func (x *Collateral) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collateral.ProtoReflect.Descriptor instead.
func (*Collateral) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{130}
}

func (x *Collateral) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *Collateral) GetTotalMargin() float64 {
	if x != nil && x.TotalMargin != nil {
		return *x.TotalMargin
	}
	return 0
}

func (x *Collateral) GetPurchasingPower() float64 {
	if x != nil && x.PurchasingPower != nil {
		return *x.PurchasingPower
	}
	return 0
}

// Information about one of the found orders.
type OrderSearchResultRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Brokerage account number.
	BrokerageAccountNumber *string `protobuf:"bytes,1,req,name=brokerage_account_number,json=brokerageAccountNumber" json:"brokerage_account_number,omitempty"`
	// Order ID.
	OrderId *string `protobuf:"bytes,2,req,name=order_id,json=orderId" json:"order_id,omitempty"`
	// Ticket number.
	TicketNumber *string `protobuf:"bytes,3,opt,name=ticket_number,json=ticketNumber" json:"ticket_number,omitempty"`
	// Order side.
	// The value is associated with OrderChain.Side enum.
	Side *uint32 `protobuf:"varint,4,req,name=side" json:"side,omitempty"`
	// Order type.
	// The value is associated with OrderChain.OrderType enum.
	Type *uint32 `protobuf:"varint,5,req,name=type" json:"type,omitempty"`
	// Order limit price.
	// Correct price format.
	LimitPrice *float64 `protobuf:"fixed64,6,opt,name=limit_price,json=limitPrice" json:"limit_price,omitempty"`
	// Order stop price.
	// Correct price format.
	StopPrice *float64 `protobuf:"fixed64,7,opt,name=stop_price,json=stopPrice" json:"stop_price,omitempty"`
	// Contract name.
	ContractName *string `protobuf:"bytes,8,req,name=contract_name,json=contractName" json:"contract_name,omitempty"`
	// Time when order was submitted to execution system (UTC).
	SubmittedUtcTime *int64 `protobuf:"zigzag64,9,req,name=submitted_utc_time,json=submittedUtcTime" json:"submitted_utc_time,omitempty"`
	// Order status.
	// This field is associated with OrderChain.Status enum type.
	Status *uint32 `protobuf:"varint,10,req,name=status" json:"status,omitempty"`
	// User name.
	UserName *string `protobuf:"bytes,11,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	// Last name of customer to whom belongs login that placed the order.
	CustomerLastName *string `protobuf:"bytes,12,opt,name=customer_last_name,json=customerLastName" json:"customer_last_name,omitempty"`
	// Brokerage name.
	BrokerageName *string `protobuf:"bytes,13,req,name=brokerage_name,json=brokerageName" json:"brokerage_name,omitempty"`
	// Route name.
	RouteName *string `protobuf:"bytes,14,req,name=route_name,json=routeName" json:"route_name,omitempty"`
	// Trade routing account identifier.
	AccountId *int32 `protobuf:"zigzag32,15,req,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Account name.
	AccountName *string `protobuf:"bytes,16,req,name=account_name,json=accountName" json:"account_name,omitempty"`
	// Native route name.
	NativeRouteName *string `protobuf:"bytes,17,opt,name=native_route_name,json=nativeRouteName" json:"native_route_name,omitempty"`
	// Route client order ID.
	RouteClientOrderId *string `protobuf:"bytes,18,req,name=route_client_order_id,json=routeClientOrderId" json:"route_client_order_id,omitempty"`
	// Exchange name.
	ExchangeName *string `protobuf:"bytes,19,req,name=exchange_name,json=exchangeName" json:"exchange_name,omitempty"`
	// Chain order id.
	ChainOrderId *string `protobuf:"bytes,20,opt,name=chain_order_id,json=chainOrderId" json:"chain_order_id,omitempty"`
	// Limit price of the order.
	// Display price format.
	DisplayLimitPrice *int64 `protobuf:"zigzag64,21,opt,name=display_limit_price,json=displayLimitPrice" json:"display_limit_price,omitempty"`
	// Stop price of the order.
	// Display price format.
	DisplayStopPrice *int64 `protobuf:"zigzag64,22,opt,name=display_stop_price,json=displayStopPrice" json:"display_stop_price,omitempty"`
	// Total positive size of the order.
	Size *uint32 `protobuf:"varint,23,opt,name=size" json:"size,omitempty"`
	// Sales series number.
	SalesSeriesNumber *string `protobuf:"bytes,24,opt,name=sales_series_number,json=salesSeriesNumber" json:"sales_series_number,omitempty"`
	// Sales series name.
	SalesSeriesName *string `protobuf:"bytes,25,opt,name=sales_series_name,json=salesSeriesName" json:"sales_series_name,omitempty"`
	// Id of sales series.
	SalesSeriesId *string `protobuf:"bytes,26,opt,name=sales_series_id,json=salesSeriesId" json:"sales_series_id,omitempty"`
}

func (x *OrderSearchResultRecord) Reset() {
	*x = OrderSearchResultRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderSearchResultRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderSearchResultRecord) ProtoMessage() {}

func (x *OrderSearchResultRecord) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderSearchResultRecord.ProtoReflect.Descriptor instead.
func (*OrderSearchResultRecord) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{131}
}

func (x *OrderSearchResultRecord) GetBrokerageAccountNumber() string {
	if x != nil && x.BrokerageAccountNumber != nil {
		return *x.BrokerageAccountNumber
	}
	return ""
}

func (x *OrderSearchResultRecord) GetOrderId() string {
	if x != nil && x.OrderId != nil {
		return *x.OrderId
	}
	return ""
}

func (x *OrderSearchResultRecord) GetTicketNumber() string {
	if x != nil && x.TicketNumber != nil {
		return *x.TicketNumber
	}
	return ""
}

func (x *OrderSearchResultRecord) GetSide() uint32 {
	if x != nil && x.Side != nil {
		return *x.Side
	}
	return 0
}

func (x *OrderSearchResultRecord) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *OrderSearchResultRecord) GetLimitPrice() float64 {
	if x != nil && x.LimitPrice != nil {
		return *x.LimitPrice
	}
	return 0
}

func (x *OrderSearchResultRecord) GetStopPrice() float64 {
	if x != nil && x.StopPrice != nil {
		return *x.StopPrice
	}
	return 0
}

func (x *OrderSearchResultRecord) GetContractName() string {
	if x != nil && x.ContractName != nil {
		return *x.ContractName
	}
	return ""
}

func (x *OrderSearchResultRecord) GetSubmittedUtcTime() int64 {
	if x != nil && x.SubmittedUtcTime != nil {
		return *x.SubmittedUtcTime
	}
	return 0
}

func (x *OrderSearchResultRecord) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *OrderSearchResultRecord) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *OrderSearchResultRecord) GetCustomerLastName() string {
	if x != nil && x.CustomerLastName != nil {
		return *x.CustomerLastName
	}
	return ""
}

func (x *OrderSearchResultRecord) GetBrokerageName() string {
	if x != nil && x.BrokerageName != nil {
		return *x.BrokerageName
	}
	return ""
}

func (x *OrderSearchResultRecord) GetRouteName() string {
	if x != nil && x.RouteName != nil {
		return *x.RouteName
	}
	return ""
}

func (x *OrderSearchResultRecord) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *OrderSearchResultRecord) GetAccountName() string {
	if x != nil && x.AccountName != nil {
		return *x.AccountName
	}
	return ""
}

func (x *OrderSearchResultRecord) GetNativeRouteName() string {
	if x != nil && x.NativeRouteName != nil {
		return *x.NativeRouteName
	}
	return ""
}

func (x *OrderSearchResultRecord) GetRouteClientOrderId() string {
	if x != nil && x.RouteClientOrderId != nil {
		return *x.RouteClientOrderId
	}
	return ""
}

func (x *OrderSearchResultRecord) GetExchangeName() string {
	if x != nil && x.ExchangeName != nil {
		return *x.ExchangeName
	}
	return ""
}

func (x *OrderSearchResultRecord) GetChainOrderId() string {
	if x != nil && x.ChainOrderId != nil {
		return *x.ChainOrderId
	}
	return ""
}

func (x *OrderSearchResultRecord) GetDisplayLimitPrice() int64 {
	if x != nil && x.DisplayLimitPrice != nil {
		return *x.DisplayLimitPrice
	}
	return 0
}

func (x *OrderSearchResultRecord) GetDisplayStopPrice() int64 {
	if x != nil && x.DisplayStopPrice != nil {
		return *x.DisplayStopPrice
	}
	return 0
}

func (x *OrderSearchResultRecord) GetSize() uint32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *OrderSearchResultRecord) GetSalesSeriesNumber() string {
	if x != nil && x.SalesSeriesNumber != nil {
		return *x.SalesSeriesNumber
	}
	return ""
}

func (x *OrderSearchResultRecord) GetSalesSeriesName() string {
	if x != nil && x.SalesSeriesName != nil {
		return *x.SalesSeriesName
	}
	return ""
}

func (x *OrderSearchResultRecord) GetSalesSeriesId() string {
	if x != nil && x.SalesSeriesId != nil {
		return *x.SalesSeriesId
	}
	return ""
}

// [obsolete] Account cluster.
type AccountCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [immutable] Account cluster id.
	// Omit the value during account cluster creation.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// [required-create][immutable-update] Brokerage id the cluster points to.
	BrokerageId *string `protobuf:"bytes,2,opt,name=brokerage_id,json=brokerageId" json:"brokerage_id,omitempty"`
	// [required] Cluster name (max length = 256).
	Name *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// [required] True if the cluster is removed.
	// Set the value to true during update to remove this account cluster.
	IsRemoved *bool `protobuf:"varint,4,opt,name=is_removed,json=isRemoved" json:"is_removed,omitempty"`
}

func (x *AccountCluster) Reset() {
	*x = AccountCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountCluster) ProtoMessage() {}

func (x *AccountCluster) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountCluster.ProtoReflect.Descriptor instead.
func (*AccountCluster) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{132}
}

func (x *AccountCluster) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *AccountCluster) GetBrokerageId() string {
	if x != nil && x.BrokerageId != nil {
		return *x.BrokerageId
	}
	return ""
}

func (x *AccountCluster) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AccountCluster) GetIsRemoved() bool {
	if x != nil && x.IsRemoved != nil {
		return *x.IsRemoved
	}
	return false
}

// [obsolete] Account cluster price offsets per commodity and instrument type.
type AccountClusterPriceOffset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of field ids to clear during update operation.
	ClearedFields []uint32 `protobuf:"varint,7,rep,name=cleared_fields,json=clearedFields" json:"cleared_fields,omitempty"`
	// [required] Commodity string id (aka Xbit).
	CommodityId *string `protobuf:"bytes,1,opt,name=commodity_id,json=commodityId" json:"commodity_id,omitempty"`
	// [required] Trade routing system identifier of the instrument type.
	InstrumentTypeId *int32 `protobuf:"zigzag32,2,opt,name=instrument_type_id,json=instrumentTypeId" json:"instrument_type_id,omitempty"`
	// [required-create] Price offset in ticks.
	PriceOffsetTicks *int32 `protobuf:"zigzag32,3,opt,name=price_offset_ticks,json=priceOffsetTicks" json:"price_offset_ticks,omitempty"`
	// Hedge order price offset in ticks.
	// Provide the field id in cleared_fields to reset the value during update operation.
	HedgeOffsetTicks *int32 `protobuf:"zigzag32,4,opt,name=hedge_offset_ticks,json=hedgeOffsetTicks" json:"hedge_offset_ticks,omitempty"`
	// List of execution instructions for hedge order.
	// Each field value is associated with OrderChain.ExecInstruction enum type.
	// Provide the field id in cleared_fields to reset the value during update operation.
	HedgeExecInstruction []uint32 `protobuf:"varint,5,rep,name=hedge_exec_instruction,json=hedgeExecInstruction" json:"hedge_exec_instruction,omitempty"`
	// Visible quantity of hedge iceberg order in percent.
	// The parameter is applied for hedge order with ICEBERG execution instruction.
	// Provide the field id in cleared_fields to reset the value during update operation.
	IcebergVisibleQtyPercent *uint32 `protobuf:"varint,6,opt,name=iceberg_visible_qty_percent,json=icebergVisibleQtyPercent" json:"iceberg_visible_qty_percent,omitempty"`
}

func (x *AccountClusterPriceOffset) Reset() {
	*x = AccountClusterPriceOffset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountClusterPriceOffset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountClusterPriceOffset) ProtoMessage() {}

func (x *AccountClusterPriceOffset) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountClusterPriceOffset.ProtoReflect.Descriptor instead.
func (*AccountClusterPriceOffset) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{133}
}

func (x *AccountClusterPriceOffset) GetClearedFields() []uint32 {
	if x != nil {
		return x.ClearedFields
	}
	return nil
}

func (x *AccountClusterPriceOffset) GetCommodityId() string {
	if x != nil && x.CommodityId != nil {
		return *x.CommodityId
	}
	return ""
}

func (x *AccountClusterPriceOffset) GetInstrumentTypeId() int32 {
	if x != nil && x.InstrumentTypeId != nil {
		return *x.InstrumentTypeId
	}
	return 0
}

func (x *AccountClusterPriceOffset) GetPriceOffsetTicks() int32 {
	if x != nil && x.PriceOffsetTicks != nil {
		return *x.PriceOffsetTicks
	}
	return 0
}

func (x *AccountClusterPriceOffset) GetHedgeOffsetTicks() int32 {
	if x != nil && x.HedgeOffsetTicks != nil {
		return *x.HedgeOffsetTicks
	}
	return 0
}

func (x *AccountClusterPriceOffset) GetHedgeExecInstruction() []uint32 {
	if x != nil {
		return x.HedgeExecInstruction
	}
	return nil
}

func (x *AccountClusterPriceOffset) GetIcebergVisibleQtyPercent() uint32 {
	if x != nil && x.IcebergVisibleQtyPercent != nil {
		return *x.IcebergVisibleQtyPercent
	}
	return 0
}

// Represents available route.
type Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Route common information.
	RouteInformation *RouteInformation `protobuf:"bytes,1,opt,name=route_information,json=routeInformation" json:"route_information,omitempty"`
	// Route priority.
	Priority *uint32 `protobuf:"varint,2,opt,name=priority" json:"priority,omitempty"`
	// This filed is associated with OmnibusSupportType enum.
	OmnibusSupportType *uint32 `protobuf:"varint,3,opt,name=omnibus_support_type,json=omnibusSupportType" json:"omnibus_support_type,omitempty"`
	// Available omnibus accounts for the route.
	OmnibusAccounts []*RouteOmnibusAccount `protobuf:"bytes,4,rep,name=omnibus_accounts,json=omnibusAccounts" json:"omnibus_accounts,omitempty"`
}

func (x *Route) Reset() {
	*x = Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route) ProtoMessage() {}

func (x *Route) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route.ProtoReflect.Descriptor instead.
func (*Route) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{134}
}

func (x *Route) GetRouteInformation() *RouteInformation {
	if x != nil {
		return x.RouteInformation
	}
	return nil
}

func (x *Route) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *Route) GetOmnibusSupportType() uint32 {
	if x != nil && x.OmnibusSupportType != nil {
		return *x.OmnibusSupportType
	}
	return 0
}

func (x *Route) GetOmnibusAccounts() []*RouteOmnibusAccount {
	if x != nil {
		return x.OmnibusAccounts
	}
	return nil
}

// Represents omnibus account, configured on the route.
type RouteOmnibusAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Omnibus account id.
	AccountId *string `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Omnibus account name.
	AccountName *string `protobuf:"bytes,2,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// Omnibus brokerage account name.
	BrokerageAccountNumber *string `protobuf:"bytes,3,opt,name=brokerage_account_number,json=brokerageAccountNumber" json:"brokerage_account_number,omitempty"`
	// Omnibus account priority.
	Priority *uint32 `protobuf:"varint,4,opt,name=priority" json:"priority,omitempty"`
}

func (x *RouteOmnibusAccount) Reset() {
	*x = RouteOmnibusAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteOmnibusAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteOmnibusAccount) ProtoMessage() {}

func (x *RouteOmnibusAccount) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteOmnibusAccount.ProtoReflect.Descriptor instead.
func (*RouteOmnibusAccount) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{135}
}

func (x *RouteOmnibusAccount) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *RouteOmnibusAccount) GetAccountName() string {
	if x != nil && x.AccountName != nil {
		return *x.AccountName
	}
	return ""
}

func (x *RouteOmnibusAccount) GetBrokerageAccountNumber() string {
	if x != nil && x.BrokerageAccountNumber != nil {
		return *x.BrokerageAccountNumber
	}
	return ""
}

func (x *RouteOmnibusAccount) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

// Represents route common information.
type RouteInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Code number of the route.
	RouteCode *string `protobuf:"bytes,1,opt,name=route_code,json=routeCode" json:"route_code,omitempty"`
	// Route name.
	RouteName *string `protobuf:"bytes,2,opt,name=route_name,json=routeName" json:"route_name,omitempty"`
	// If set, synthetic strategies are allowed.
	SyntheticStrategies *bool `protobuf:"varint,3,opt,name=synthetic_strategies,json=syntheticStrategies" json:"synthetic_strategies,omitempty"`
	// List of available route attributes.
	Attributes []*AccountRouteAttribute `protobuf:"bytes,4,rep,name=attributes" json:"attributes,omitempty"`
	// [obsolete] If set, route has overlapped instruments.
	//
	// Deprecated: Do not use.
	ObsoleteHasOverlappedInstruments *bool `protobuf:"varint,5,opt,name=obsolete_has_overlapped_instruments,json=obsoleteHasOverlappedInstruments" json:"obsolete_has_overlapped_instruments,omitempty"`
	// [immutable] If set, account requires authorization to use this route.
	AuthorizationRequired *bool `protobuf:"varint,6,opt,name=authorization_required,json=authorizationRequired" json:"authorization_required,omitempty"`
	// [immutable] Indicates whether this route supports synthetic orders.
	AllowSyntheticOrderTypes *bool `protobuf:"varint,7,opt,name=allow_synthetic_order_types,json=allowSyntheticOrderTypes" json:"allow_synthetic_order_types,omitempty"`
}

func (x *RouteInformation) Reset() {
	*x = RouteInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteInformation) ProtoMessage() {}

func (x *RouteInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteInformation.ProtoReflect.Descriptor instead.
func (*RouteInformation) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{136}
}

func (x *RouteInformation) GetRouteCode() string {
	if x != nil && x.RouteCode != nil {
		return *x.RouteCode
	}
	return ""
}

func (x *RouteInformation) GetRouteName() string {
	if x != nil && x.RouteName != nil {
		return *x.RouteName
	}
	return ""
}

func (x *RouteInformation) GetSyntheticStrategies() bool {
	if x != nil && x.SyntheticStrategies != nil {
		return *x.SyntheticStrategies
	}
	return false
}

func (x *RouteInformation) GetAttributes() []*AccountRouteAttribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// Deprecated: Do not use.
func (x *RouteInformation) GetObsoleteHasOverlappedInstruments() bool {
	if x != nil && x.ObsoleteHasOverlappedInstruments != nil {
		return *x.ObsoleteHasOverlappedInstruments
	}
	return false
}

func (x *RouteInformation) GetAuthorizationRequired() bool {
	if x != nil && x.AuthorizationRequired != nil {
		return *x.AuthorizationRequired
	}
	return false
}

func (x *RouteInformation) GetAllowSyntheticOrderTypes() bool {
	if x != nil && x.AllowSyntheticOrderTypes != nil {
		return *x.AllowSyntheticOrderTypes
	}
	return false
}

// Restore account.
type RestoreAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Account id to restore.
	AccountId *string `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *RestoreAccount) Reset() {
	*x = RestoreAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreAccount) ProtoMessage() {}

func (x *RestoreAccount) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreAccount.ProtoReflect.Descriptor instead.
func (*RestoreAccount) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{137}
}

func (x *RestoreAccount) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

// Account type overrides per exchange list.
type AccountTypeOverrideListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Account id to get type overrides.
	AccountId *string `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *AccountTypeOverrideListRequest) Reset() {
	*x = AccountTypeOverrideListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountTypeOverrideListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountTypeOverrideListRequest) ProtoMessage() {}

func (x *AccountTypeOverrideListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountTypeOverrideListRequest.ProtoReflect.Descriptor instead.
func (*AccountTypeOverrideListRequest) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{138}
}

func (x *AccountTypeOverrideListRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

// Update account type overrides list.
type UpdateAccountTypeOverrideList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Account id to update type overrides.
	AccountId *string `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Overrides to add or change.
	OverridesToSet []*AccountTypeOverride `protobuf:"bytes,2,rep,name=overrides_to_set,json=overridesToSet" json:"overrides_to_set,omitempty"`
	// Overrides to remove from account.
	// First - login id, second - exchange key.
	OverridesToRemove []*Tuple `protobuf:"bytes,3,rep,name=overrides_to_remove,json=overridesToRemove" json:"overrides_to_remove,omitempty"`
}

func (x *UpdateAccountTypeOverrideList) Reset() {
	*x = UpdateAccountTypeOverrideList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAccountTypeOverrideList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountTypeOverrideList) ProtoMessage() {}

func (x *UpdateAccountTypeOverrideList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountTypeOverrideList.ProtoReflect.Descriptor instead.
func (*UpdateAccountTypeOverrideList) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{139}
}

func (x *UpdateAccountTypeOverrideList) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *UpdateAccountTypeOverrideList) GetOverridesToSet() []*AccountTypeOverride {
	if x != nil {
		return x.OverridesToSet
	}
	return nil
}

func (x *UpdateAccountTypeOverrideList) GetOverridesToRemove() []*Tuple {
	if x != nil {
		return x.OverridesToRemove
	}
	return nil
}

// Result of RestoreAccount.
type RestoreAccountResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RestoreAccountResult) Reset() {
	*x = RestoreAccountResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreAccountResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreAccountResult) ProtoMessage() {}

func (x *RestoreAccountResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreAccountResult.ProtoReflect.Descriptor instead.
func (*RestoreAccountResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{140}
}

// Result of AccountTypeOverrideListRequest.
type AccountTypeOverrideListResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account type overrides.
	Overrides []*AccountTypeOverride `protobuf:"bytes,1,rep,name=overrides" json:"overrides,omitempty"`
}

func (x *AccountTypeOverrideListResult) Reset() {
	*x = AccountTypeOverrideListResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountTypeOverrideListResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountTypeOverrideListResult) ProtoMessage() {}

func (x *AccountTypeOverrideListResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountTypeOverrideListResult.ProtoReflect.Descriptor instead.
func (*AccountTypeOverrideListResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{141}
}

func (x *AccountTypeOverrideListResult) GetOverrides() []*AccountTypeOverride {
	if x != nil {
		return x.Overrides
	}
	return nil
}

// Represents account type override per exchange.
// Exchange key + login id pair is unique.
type AccountTypeOverride struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Exchange key.
	ExchangeKey *string `protobuf:"bytes,2,opt,name=exchange_key,json=exchangeKey" json:"exchange_key,omitempty"`
	// Possible affected login.
	// If not provided, all logins are affected.
	LoginId *string `protobuf:"bytes,3,opt,name=login_id,json=loginId" json:"login_id,omitempty"`
	// [required] Account type override.
	// LookupPropertyListRequest { property_type = TradeRoutingLookupPropertyType.ACCOUNT_TYPE }
	TypeId *string `protobuf:"bytes,4,opt,name=type_id,json=typeId" json:"type_id,omitempty"`
	// [required] Account origin override.
	// LookupPropertyListRequest { property_type = TradeRoutingLookupPropertyType.ACCOUNT_ORIGIN }
	OriginId *string `protobuf:"bytes,5,opt,name=origin_id,json=originId" json:"origin_id,omitempty"`
}

func (x *AccountTypeOverride) Reset() {
	*x = AccountTypeOverride{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountTypeOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountTypeOverride) ProtoMessage() {}

func (x *AccountTypeOverride) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountTypeOverride.ProtoReflect.Descriptor instead.
func (*AccountTypeOverride) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{142}
}

func (x *AccountTypeOverride) GetExchangeKey() string {
	if x != nil && x.ExchangeKey != nil {
		return *x.ExchangeKey
	}
	return ""
}

func (x *AccountTypeOverride) GetLoginId() string {
	if x != nil && x.LoginId != nil {
		return *x.LoginId
	}
	return ""
}

func (x *AccountTypeOverride) GetTypeId() string {
	if x != nil && x.TypeId != nil {
		return *x.TypeId
	}
	return ""
}

func (x *AccountTypeOverride) GetOriginId() string {
	if x != nil && x.OriginId != nil {
		return *x.OriginId
	}
	return ""
}

// Result of UpdateAccountTypeOverrideList.
type UpdateAccountTypeOverrideListResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAccountTypeOverrideListResult) Reset() {
	*x = UpdateAccountTypeOverrideListResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAccountTypeOverrideListResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountTypeOverrideListResult) ProtoMessage() {}

func (x *UpdateAccountTypeOverrideListResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountTypeOverrideListResult.ProtoReflect.Descriptor instead.
func (*UpdateAccountTypeOverrideListResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{143}
}

// Update account user authorization list operation.
type UpdateAccountUserAuthorizationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Links to add or modify.
	// Authorization is added if it does not exist with this account and user id, it is updated otherwise.
	LinksToSet []*AccountUserLink `protobuf:"bytes,1,rep,name=links_to_set,json=linksToSet" json:"links_to_set,omitempty"`
	// Links to remove. First - account id, second - user id.
	LinksToRemove []*Tuple `protobuf:"bytes,2,rep,name=links_to_remove,json=linksToRemove" json:"links_to_remove,omitempty"`
}

func (x *UpdateAccountUserAuthorizationList) Reset() {
	*x = UpdateAccountUserAuthorizationList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAccountUserAuthorizationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountUserAuthorizationList) ProtoMessage() {}

func (x *UpdateAccountUserAuthorizationList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountUserAuthorizationList.ProtoReflect.Descriptor instead.
func (*UpdateAccountUserAuthorizationList) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{144}
}

func (x *UpdateAccountUserAuthorizationList) GetLinksToSet() []*AccountUserLink {
	if x != nil {
		return x.LinksToSet
	}
	return nil
}

func (x *UpdateAccountUserAuthorizationList) GetLinksToRemove() []*Tuple {
	if x != nil {
		return x.LinksToRemove
	}
	return nil
}

// Result of account user authorization list update.
type UpdateAccountUserAuthorizationListResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAccountUserAuthorizationListResult) Reset() {
	*x = UpdateAccountUserAuthorizationListResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAccountUserAuthorizationListResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountUserAuthorizationListResult) ProtoMessage() {}

func (x *UpdateAccountUserAuthorizationListResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountUserAuthorizationListResult.ProtoReflect.Descriptor instead.
func (*UpdateAccountUserAuthorizationListResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{145}
}

// Remove account.
type RemoveAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Account id to remove.
	AccountId *string `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *RemoveAccount) Reset() {
	*x = RemoveAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveAccount) ProtoMessage() {}

func (x *RemoveAccount) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveAccount.ProtoReflect.Descriptor instead.
func (*RemoveAccount) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{146}
}

func (x *RemoveAccount) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

// Result of RemoveAccount.
type RemoveAccountResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveAccountResult) Reset() {
	*x = RemoveAccountResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveAccountResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveAccountResult) ProtoMessage() {}

func (x *RemoveAccountResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveAccountResult.ProtoReflect.Descriptor instead.
func (*RemoveAccountResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{147}
}

// Gets available to account Service Groups according to enabled routes.
type AccountAvailableServiceGroupListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Account id.
	AccountId *string `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *AccountAvailableServiceGroupListRequest) Reset() {
	*x = AccountAvailableServiceGroupListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountAvailableServiceGroupListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountAvailableServiceGroupListRequest) ProtoMessage() {}

func (x *AccountAvailableServiceGroupListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountAvailableServiceGroupListRequest.ProtoReflect.Descriptor instead.
func (*AccountAvailableServiceGroupListRequest) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{148}
}

func (x *AccountAvailableServiceGroupListRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

// Gets account's enabled Service Groups.
type AccountServiceGroupListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Account id.
	AccountId *string `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (x *AccountServiceGroupListRequest) Reset() {
	*x = AccountServiceGroupListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountServiceGroupListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountServiceGroupListRequest) ProtoMessage() {}

func (x *AccountServiceGroupListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountServiceGroupListRequest.ProtoReflect.Descriptor instead.
func (*AccountServiceGroupListRequest) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{149}
}

func (x *AccountServiceGroupListRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

// Updates list of account's enabled Service Groups.
type UpdateAccountServiceGroupList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Account id.
	AccountId *string `protobuf:"bytes,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Service Groups to enable
	ServiceGroupIdsToSet []string `protobuf:"bytes,2,rep,name=service_group_ids_to_set,json=serviceGroupIdsToSet" json:"service_group_ids_to_set,omitempty"`
	// Service Groups to remove from account.
	ServiceGroupIdsToRemove []string `protobuf:"bytes,3,rep,name=service_group_ids_to_remove,json=serviceGroupIdsToRemove" json:"service_group_ids_to_remove,omitempty"`
}

func (x *UpdateAccountServiceGroupList) Reset() {
	*x = UpdateAccountServiceGroupList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAccountServiceGroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountServiceGroupList) ProtoMessage() {}

func (x *UpdateAccountServiceGroupList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountServiceGroupList.ProtoReflect.Descriptor instead.
func (*UpdateAccountServiceGroupList) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{150}
}

func (x *UpdateAccountServiceGroupList) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *UpdateAccountServiceGroupList) GetServiceGroupIdsToSet() []string {
	if x != nil {
		return x.ServiceGroupIdsToSet
	}
	return nil
}

func (x *UpdateAccountServiceGroupList) GetServiceGroupIdsToRemove() []string {
	if x != nil {
		return x.ServiceGroupIdsToRemove
	}
	return nil
}

// Result of AccountAvailableServiceGroupListRequest.
type AccountAvailableServiceGroupListResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Currently available to account Service Group list.
	ServiceGroups []*ServiceGroup `protobuf:"bytes,1,rep,name=service_groups,json=serviceGroups" json:"service_groups,omitempty"`
}

func (x *AccountAvailableServiceGroupListResult) Reset() {
	*x = AccountAvailableServiceGroupListResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountAvailableServiceGroupListResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountAvailableServiceGroupListResult) ProtoMessage() {}

func (x *AccountAvailableServiceGroupListResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountAvailableServiceGroupListResult.ProtoReflect.Descriptor instead.
func (*AccountAvailableServiceGroupListResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{151}
}

func (x *AccountAvailableServiceGroupListResult) GetServiceGroups() []*ServiceGroup {
	if x != nil {
		return x.ServiceGroups
	}
	return nil
}

// Represents Service Group entity.
type ServiceGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Service Group's id.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// [required] Name.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// [required] Removed flag.
	Removed *bool `protobuf:"varint,3,opt,name=removed" json:"removed,omitempty"`
}

func (x *ServiceGroup) Reset() {
	*x = ServiceGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceGroup) ProtoMessage() {}

func (x *ServiceGroup) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceGroup.ProtoReflect.Descriptor instead.
func (*ServiceGroup) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{152}
}

func (x *ServiceGroup) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ServiceGroup) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ServiceGroup) GetRemoved() bool {
	if x != nil && x.Removed != nil {
		return *x.Removed
	}
	return false
}

// Result of AccountServiceGroupListRequest.
type AccountServiceGroupListResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enabled Service Groups.
	ServiceGroupIds []string `protobuf:"bytes,1,rep,name=service_group_ids,json=serviceGroupIds" json:"service_group_ids,omitempty"`
}

func (x *AccountServiceGroupListResult) Reset() {
	*x = AccountServiceGroupListResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountServiceGroupListResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountServiceGroupListResult) ProtoMessage() {}

func (x *AccountServiceGroupListResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountServiceGroupListResult.ProtoReflect.Descriptor instead.
func (*AccountServiceGroupListResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{153}
}

func (x *AccountServiceGroupListResult) GetServiceGroupIds() []string {
	if x != nil {
		return x.ServiceGroupIds
	}
	return nil
}

// Result of UpdateAccountServiceGroupList.
type UpdateAccountServiceGroupListResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAccountServiceGroupListResult) Reset() {
	*x = UpdateAccountServiceGroupListResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAccountServiceGroupListResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountServiceGroupListResult) ProtoMessage() {}

func (x *UpdateAccountServiceGroupListResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountServiceGroupListResult.ProtoReflect.Descriptor instead.
func (*UpdateAccountServiceGroupListResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{154}
}

// Gets billable exchanges available to the current admin login.
type BillableExchangeListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BillableExchangeListRequest) Reset() {
	*x = BillableExchangeListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BillableExchangeListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BillableExchangeListRequest) ProtoMessage() {}

func (x *BillableExchangeListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BillableExchangeListRequest.ProtoReflect.Descriptor instead.
func (*BillableExchangeListRequest) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{155}
}

// Result of BillableExchangeListRequest.
type BillableExchangeListResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BillableExchanges []*BillableExchange `protobuf:"bytes,1,rep,name=billable_exchanges,json=billableExchanges" json:"billable_exchanges,omitempty"`
}

func (x *BillableExchangeListResult) Reset() {
	*x = BillableExchangeListResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BillableExchangeListResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BillableExchangeListResult) ProtoMessage() {}

func (x *BillableExchangeListResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BillableExchangeListResult.ProtoReflect.Descriptor instead.
func (*BillableExchangeListResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{156}
}

func (x *BillableExchangeListResult) GetBillableExchanges() []*BillableExchange {
	if x != nil {
		return x.BillableExchanges
	}
	return nil
}

type BillableExchange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Billable Exchange's id.
	Number *string `protobuf:"bytes,1,opt,name=number" json:"number,omitempty"`
	// [required] Name.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// [required] Description.
	Description *string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// [required] Service Groups authorization level (Amount Allowed per Exchange).
	// This field is associated with ServiceGroupAuthorizationLevel enum.
	ServiceGroupAuthorizationLevel *uint32 `protobuf:"varint,4,opt,name=service_group_authorization_level,json=serviceGroupAuthorizationLevel" json:"service_group_authorization_level,omitempty"`
	// Linked Service Groups.
	ServiceGroupIds []string `protobuf:"bytes,5,rep,name=service_group_ids,json=serviceGroupIds" json:"service_group_ids,omitempty"`
}

func (x *BillableExchange) Reset() {
	*x = BillableExchange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BillableExchange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BillableExchange) ProtoMessage() {}

func (x *BillableExchange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BillableExchange.ProtoReflect.Descriptor instead.
func (*BillableExchange) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{157}
}

func (x *BillableExchange) GetNumber() string {
	if x != nil && x.Number != nil {
		return *x.Number
	}
	return ""
}

func (x *BillableExchange) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *BillableExchange) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *BillableExchange) GetServiceGroupAuthorizationLevel() uint32 {
	if x != nil && x.ServiceGroupAuthorizationLevel != nil {
		return *x.ServiceGroupAuthorizationLevel
	}
	return 0
}

func (x *BillableExchange) GetServiceGroupIds() []string {
	if x != nil {
		return x.ServiceGroupIds
	}
	return nil
}

type CreateAccountGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewAccountGroup *AccountGroup `protobuf:"bytes,1,opt,name=new_account_group,json=newAccountGroup" json:"new_account_group,omitempty"`
}

func (x *CreateAccountGroup) Reset() {
	*x = CreateAccountGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccountGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountGroup) ProtoMessage() {}

func (x *CreateAccountGroup) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountGroup.ProtoReflect.Descriptor instead.
func (*CreateAccountGroup) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{158}
}

func (x *CreateAccountGroup) GetNewAccountGroup() *AccountGroup {
	if x != nil {
		return x.NewAccountGroup
	}
	return nil
}

type CreateAccountGroupResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Created account group id.
	NewAccountGroupId *string `protobuf:"bytes,1,opt,name=new_account_group_id,json=newAccountGroupId" json:"new_account_group_id,omitempty"`
}

func (x *CreateAccountGroupResult) Reset() {
	*x = CreateAccountGroupResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccountGroupResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountGroupResult) ProtoMessage() {}

func (x *CreateAccountGroupResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountGroupResult.ProtoReflect.Descriptor instead.
func (*CreateAccountGroupResult) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{159}
}

func (x *CreateAccountGroupResult) GetNewAccountGroupId() string {
	if x != nil && x.NewAccountGroupId != nil {
		return *x.NewAccountGroupId
	}
	return ""
}

type UpdateAccountGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Account group to update.
	AccountGroup *AccountGroup `protobuf:"bytes,1,opt,name=account_group,json=accountGroup" json:"account_group,omitempty"`
	// Sub-accounts to add/update.
	SubAccountsToSet []*SubAccount `protobuf:"bytes,2,rep,name=sub_accounts_to_set,json=subAccountsToSet" json:"sub_accounts_to_set,omitempty"`
	// Sub-accounts to remove.
	SubAccountIdsToRemove []string `protobuf:"bytes,3,rep,name=sub_account_ids_to_remove,json=subAccountIdsToRemove" json:"sub_account_ids_to_remove,omitempty"`
}

func (x *UpdateAccountGroup) Reset() {
	*x = UpdateAccountGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAccountGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAccountGroup) ProtoMessage() {}

func (x *UpdateAccountGroup) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAccountGroup.ProtoReflect.Descriptor instead.
func (*UpdateAccountGroup) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{160}
}

func (x *UpdateAccountGroup) GetAccountGroup() *AccountGroup {
	if x != nil {
		return x.AccountGroup
	}
	return nil
}

func (x *UpdateAccountGroup) GetSubAccountsToSet() []*SubAccount {
	if x != nil {
		return x.SubAccountsToSet
	}
	return nil
}

func (x *UpdateAccountGroup) GetSubAccountIdsToRemove() []string {
	if x != nil {
		return x.SubAccountIdsToRemove
	}
	return nil
}

type RemoveAccountGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Account group id to remove.
	AccountGroupId *string `protobuf:"bytes,1,opt,name=account_group_id,json=accountGroupId" json:"account_group_id,omitempty"`
}

func (x *RemoveAccountGroup) Reset() {
	*x = RemoveAccountGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_traderouting_1_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveAccountGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveAccountGroup) ProtoMessage() {}

func (x *RemoveAccountGroup) ProtoReflect() protoreflect.Message {
	mi := &file_proto_traderouting_1_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveAccountGroup.ProtoReflect.Descriptor instead.
func (*RemoveAccountGroup) Descriptor() ([]byte, []int) {
	return file_proto_traderouting_1_proto_rawDescGZIP(), []int{161}
}

func (x *RemoveAccountGroup) GetAccountGroupId() string {
	if x != nil && x.AccountGroupId != nil {
		return *x.AccountGroupId
	}
	return ""
}

var File_proto_traderouting_1_proto protoreflect.FileDescriptor

var file_proto_traderouting_1_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x1a, 0x0e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb7, 0x02, 0x0a,
	0x13, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x57, 0x0a, 0x15, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a,
	0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x64, 0x0a, 0x1c, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x31, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x19, 0x6c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xd1, 0x20, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54,
	0x0a, 0x14, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x17, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x15, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x57, 0x0a, 0x15,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x73, 0x0a, 0x1f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1c, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6f, 0x0a, 0x1f, 0x6f, 0x62,
	0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x69,
	0x73, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52, 0x1c, 0x6f,
	0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x69, 0x73,
	0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x5a, 0x0a, 0x16, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x14, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x64, 0x0a, 0x1a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x17, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x89, 0x01,
	0x0a, 0x27, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x23, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x18, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x16, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x8f, 0x01, 0x0a, 0x29,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x25, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6d, 0x0a,
	0x1d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x1a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x63, 0x0a, 0x19,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x17, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x5a, 0x0a, 0x16, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65, 0x71, 0x75,
	0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x14, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x66, 0x0a,
	0x1a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x18, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x43, 0x6c,
	0x6f, 0x6e, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x6e,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5d,
	0x0a, 0x17, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x57, 0x0a,
	0x15, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x70, 0x0a, 0x1e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x69, 0x73,
	0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x1b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4e, 0x0a, 0x12, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x61, 0x0a, 0x19, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x6a, 0x0a, 0x1c, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x19, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x72, 0x0a,
	0x20, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x1d, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x6f, 0x0a, 0x1f, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x1c, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x6f, 0x0a, 0x1f, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x42, 0x02, 0x18, 0x01, 0x52, 0x1c, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x95, 0x01, 0x0a, 0x2d, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x28, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x72,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x7a, 0x0a, 0x22, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x1e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x77, 0x0a, 0x21, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x1d, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x86, 0x01, 0x0a, 0x26, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x22,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x44, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x96, 0x01, 0x0a, 0x2c, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x27, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x7a, 0x0a, 0x22, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x77, 0x0a,
	0x21, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x1d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x70, 0x0a, 0x1e, 0x62, 0x69, 0x6c, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e,
	0x42, 0x69, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1b, 0x62, 0x69, 0x6c,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x14, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x12, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x54,
	0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x54, 0x0a, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x9c, 0x07, 0x0a, 0x11, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x57, 0x0a, 0x15, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x61, 0x64, 0x64,
	0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x64, 0x64,
	0x46, 0x69, 0x6c, 0x6c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x46, 0x69, 0x6c, 0x6c, 0x12, 0x57, 0x0a,
	0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x14, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x64, 0x0a, 0x1a,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x72,
	0x65, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72,
	0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x67, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e,
	0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x73, 0x0a, 0x1f, 0x73,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x1c, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3e, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x61, 0x0a, 0x19, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x73, 0x5f, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x73, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x16, 0x72, 0x65, 0x66,
	0x6c, 0x65, 0x63, 0x74, 0x41, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x64, 0x0a, 0x1a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x65,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x65, 0x65,
	0x52, 0x17, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x65, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x13, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x54, 0x6f, 0x70, 0x22, 0xe2, 0x02, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6c,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x6c, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0c, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73,
	0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xde, 0x04, 0x0a, 0x13, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x74, 0x6f,
	0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66,
	0x69, 0x6c, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x69,
	0x6c, 0x6c, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x12, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x6c, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x12, 0x52, 0x11, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x12, 0x52, 0x10, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x12, 0x52, 0x10, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x46, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x70,
	0x65, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x66, 0x69, 0x6c, 0x6c, 0x49,
	0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x22, 0x80, 0x06, 0x0a, 0x12,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x0d, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x6f,
	0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x3c, 0x0a, 0x18, 0x6f,
	0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x63,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x16, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x22,
	0xbc, 0x03, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f,
	0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x41, 0x43, 0x54, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x49, 0x44, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x52, 0x4f, 0x4b,
	0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x07, 0x12, 0x0d,
	0x0a, 0x09, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x08, 0x12, 0x16, 0x0a,
	0x12, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45,
	0x52, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x0a, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x52,
	0x4f, 0x55, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x0c, 0x12,
	0x19, 0x0a, 0x15, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x10, 0x0e, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x49,
	0x4c, 0x4c, 0x5f, 0x43, 0x41, 0x52, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x49, 0x44,
	0x10, 0x0f, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x49, 0x44, 0x10, 0x10, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x41, 0x4c, 0x45, 0x53, 0x5f,
	0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x11, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x41, 0x4c, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x10, 0x12, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x41, 0x4c, 0x45, 0x53, 0x5f,
	0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x49, 0x44, 0x10, 0x13, 0x12, 0x11, 0x0a, 0x0d, 0x45,
	0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x14, 0x12, 0x0e,
	0x0a, 0x0a, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x15, 0x12, 0x0e,
	0x0a, 0x0a, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x16, 0x22, 0xab,
	0x01, 0x0a, 0x17, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x74,
	0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x54, 0x6f, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x22, 0xb0, 0x01, 0x0a,
	0x18, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72,
	0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x65,
	0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x5f, 0x74, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x54, 0x6f, 0x70, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x22,
	0x79, 0x0a, 0x1c, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x13, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x6f,
	0x6f, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x0b, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x16, 0x52,
	0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x17, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72,
	0x65, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74,
	0x72, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x65, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x12, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x71, 0x0a, 0x15, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0xdc, 0x01, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x28, 0x0a, 0x10,
	0x65, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x73, 0x68, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c,
	0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52,
	0x09, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x61, 0x73,
	0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x12, 0x52, 0x08,
	0x61, 0x73, 0x4f, 0x66, 0x44, 0x61, 0x74, 0x65, 0x22, 0x7e, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x11, 0x52, 0x09, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x73,
	0x68, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c,
	0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f,
	0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x22, 0xc5, 0x05, 0x0a, 0x14, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x0d, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x6f, 0x62,
	0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x3c, 0x0a, 0x18, 0x6f, 0x62,
	0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x63, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x16, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x2e, 0x0a, 0x0f, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x0e, 0x61, 0x6c, 0x6c,
	0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x27, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41,
	0x53, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x55, 0x42, 0x10, 0x03, 0x22,
	0xee, 0x02, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x49, 0x44,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x41, 0x47,
	0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x41,
	0x4c, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45,
	0x52, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x41, 0x4c, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x52,
	0x49, 0x45, 0x53, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x41,
	0x4c, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x49, 0x44, 0x10, 0x06, 0x12,
	0x0f, 0x0a, 0x0b, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x07,
	0x12, 0x11, 0x0a, 0x0d, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x5f,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f,
	0x49, 0x44, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x10,
	0x0a, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x49, 0x44, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0x0c, 0x12,
	0x10, 0x0a, 0x0c, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x44, 0x10,
	0x0d, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x53, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0f, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x53, 0x5f, 0x49, 0x4e,
	0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x10,
	0x22, 0x38, 0x0a, 0x17, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x11, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x23, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x44, 0x0a, 0x1e,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6d, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x37, 0x0a, 0x16, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x11,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x1c, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x11, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xe2, 0x01, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x75, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61,
	0x62, 0x6c, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x22,
	0x46, 0x0a, 0x25, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x3b, 0x0a, 0x1a, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x17, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x51,
	0x0a, 0x14, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x22, 0x39, 0x0a, 0x18, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c,
	0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xd4, 0x01, 0x0a,
	0x0c, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a,
	0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x11, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65, 0x77,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x19, 0x6e, 0x65, 0x77, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x13, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x6e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0f, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x45, 0x0a, 0x15,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x18, 0x6f,
	0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x16, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0xe3, 0x01, 0x0a, 0x14, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x5c, 0x0a, 0x18, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x42, 0x02, 0x18, 0x01, 0x52, 0x16, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x6d, 0x0a, 0x21, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x1e, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22,
	0xf8, 0x01, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x4f, 0x0a, 0x0e, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x74, 0x6f,
	0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x0c, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x54, 0x6f,
	0x53, 0x65, 0x74, 0x12, 0x55, 0x0a, 0x11, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x0f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x15, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x4c, 0x0a, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x10, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22,
	0x5e, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22,
	0xce, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x4e, 0x0a, 0x0f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x0e, 0x72, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x5f, 0x0a, 0x18, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x69, 0x73, 0x6b,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x16, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x52, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x22, 0xb2, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0d, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x53,
	0x65, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x12, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x54, 0x6f, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x41, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x16, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x52, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0x31, 0x0a, 0x10, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x0d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x9c, 0x03, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x33, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x54, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4e, 0x0a, 0x12,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x10, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x61, 0x0a, 0x1b,
	0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x18, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0xa7, 0x21, 0x0a, 0x12, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x51, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5a, 0x0a, 0x16, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x14, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x6a, 0x0a, 0x1c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x19, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x6a, 0x0a, 0x1c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x19, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x70, 0x0a,
	0x1e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x69,
	0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x1b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x6d, 0x0a, 0x1d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x69,
	0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x1a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x57,
	0x0a, 0x15, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x61, 0x0a, 0x19, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x16, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x86, 0x01, 0x0a, 0x26, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x22, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x5d, 0x0a, 0x17, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x15, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x70, 0x0a, 0x1e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x1b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x6a, 0x0a, 0x1c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x19, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x60, 0x0a, 0x18, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x16, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x57, 0x0a, 0x15, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65, 0x71,
	0x75, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45,
	0x71, 0x75, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x63, 0x0a, 0x19, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x17, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x54, 0x0a, 0x14, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e,
	0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x12, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x57, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x13, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x70, 0x0a, 0x1e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x1b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x54, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x83, 0x01, 0x0a, 0x25, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x21, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4b, 0x0a,
	0x11, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x74, 0x0a, 0x20, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x1c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x7d, 0x0a, 0x23, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x1f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x57, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x6f, 0x0a, 0x1f, 0x6f, 0x62, 0x73, 0x6f,
	0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x02, 0x18, 0x01, 0x52, 0x1c, 0x6f, 0x62, 0x73,
	0x6f, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x26, 0x6f, 0x62,
	0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x02, 0x18, 0x01, 0x52, 0x22, 0x6f, 0x62, 0x73, 0x6f,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x82,
	0x01, 0x0a, 0x26, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x22, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0xa8, 0x01, 0x0a, 0x34, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x02, 0x18, 0x01, 0x52, 0x2e,
	0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5a,
	0x0a, 0x16, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x14, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x77, 0x0a, 0x21, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x1d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x8a, 0x01, 0x0a, 0x28, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x23, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x99, 0x01, 0x0a, 0x2d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x28, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x57, 0x0a, 0x15,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x93, 0x01, 0x0a, 0x2b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x26, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x77, 0x0a, 0x21, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x1d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x8a, 0x01, 0x0a, 0x28, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x23, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x6d, 0x0a, 0x1d, 0x62, 0x69, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x1a, 0x62, 0x69, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x67, 0x0a, 0x1b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x18, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xeb, 0x07, 0x0a, 0x10, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x54,
	0x0a, 0x14, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x45, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x6c,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41,
	0x64, 0x64, 0x46, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x61, 0x64,
	0x64, 0x46, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x6a, 0x0a, 0x1c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x19, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x51, 0x0a, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x61, 0x0a, 0x19, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x65, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x65, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x16, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x64, 0x0a,
	0x1a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x17, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x70, 0x0a, 0x1e, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63,
	0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x53, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x72,
	0x65, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x1b, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x74, 0x69, 0x63, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x72, 0x65, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x51, 0x0a, 0x13, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x11, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x74, 0x0a, 0x20, 0x72, 0x65, 0x66, 0x6c,
	0x65, 0x63, 0x74, 0x5f, 0x61, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x73, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x1c, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x77,
	0x0a, 0x21, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72,
	0x65, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x1d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x65,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x78, 0x0a, 0x12, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3b, 0x0a,
	0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x0a,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x22, 0x0f, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x46, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x62, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4a, 0x0a, 0x0c,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0b, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x25, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74,
	0x72, 0x75, 0x65, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x22,
	0x82, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x25, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e,
	0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x44, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75,
	0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e,
	0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75,
	0x65, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x73, 0x0a,
	0x1b, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x04,
	0x6c, 0x65, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x4c, 0x65, 0x67, 0x52, 0x04, 0x6c, 0x65, 0x67, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1e, 0x0a, 0x1c, 0x52, 0x65, 0x66, 0x6c, 0x65,
	0x63, 0x74, 0x41, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1f, 0x0a, 0x1d, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72,
	0x65, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x46, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x31, 0x0a,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x5c, 0x0a, 0x14, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x44, 0x0a, 0x0e, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x0d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x47,
	0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x11, 0x52, 0x0f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x0e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x25,
	0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x6e, 0x0a, 0x16, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x54, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x22, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4b, 0x0a, 0x11,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x25, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04,
	0x74, 0x72, 0x75, 0x65, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x22, 0x63, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x7c, 0x0a, 0x1b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x5d, 0x0a, 0x17, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x72, 0x69, 0x73, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x69,
	0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x15, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x22, 0x1c, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x69, 0x73,
	0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0xac, 0x01, 0x0a, 0x1b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x44, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x47, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x6d, 0x0a, 0x19, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a,
	0x15, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x13, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22,
	0x67, 0x0a, 0x16, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4d, 0x0a, 0x11, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x45, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x2e, 0x0a, 0x06, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31,
	0x2e, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79, 0x52, 0x06, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x22,
	0x55, 0x0a, 0x17, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x6f,
	0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c,
	0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x22, 0x3a, 0x0a, 0x12, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x0e,
	0x6e, 0x65, 0x77, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x11, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1d, 0x0a, 0x1b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x55, 0x0a, 0x12, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3f,
	0x0a, 0x0c, 0x61, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x0b, 0x61, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22,
	0x23, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x40, 0x0a, 0x0f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x06,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x22, 0x1e, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x21, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x25, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xf8, 0x01, 0x0a, 0x14, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5c, 0x0a, 0x18, 0x6f, 0x62, 0x73,
	0x6f, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x16, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x81, 0x01, 0x0a, 0x26, 0x6f, 0x62, 0x73, 0x6f,
	0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x42, 0x02, 0x18, 0x01, 0x52, 0x22, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x22, 0x2c, 0x0a, 0x1a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x28, 0x0a, 0x26, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0xfa, 0x11, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x12, 0x24, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x31, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x11,
	0x52, 0x12, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4f, 0x72, 0x69, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x12,
	0x52, 0x10, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x55, 0x74, 0x63, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x64, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x65,
	0x78, 0x65, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x6f,
	0x6f, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x75, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x0c, 0x67, 0x6f, 0x6f, 0x64, 0x54, 0x68, 0x72, 0x75, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x2b, 0x0a, 0x12, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x75, 0x5f, 0x75, 0x74,
	0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x67, 0x6f,
	0x6f, 0x64, 0x54, 0x68, 0x72, 0x75, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x46, 0x69, 0x6c, 0x6c, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c,
	0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x12, 0x52, 0x11, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x10, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x6f, 0x70, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x74, 0x72,
	0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x74, 0x72, 0x61,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x73,
	0x52, 0x05, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x72,
	0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x65, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x72,
	0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x6f, 0x6f, 0x74, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x65, 0x67, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x4c, 0x65, 0x67, 0x52, 0x04, 0x6c, 0x65, 0x67, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31,
	0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x67, 0x6f,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x67, 0x6f,
	0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x6c, 0x67, 0x6f, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x30, 0x0a,
	0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x70, 0x65, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x41, 0x74,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x63,
	0x72, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x64, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x19, 0x0a, 0x04, 0x53,
	0x69, 0x64, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x55, 0x59, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x53, 0x45, 0x4c, 0x4c, 0x10, 0x02, 0x22, 0x2f, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x4b, 0x54, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x4c, 0x4d, 0x54, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x54, 0x50, 0x10, 0x03, 0x12, 0x07,
	0x0a, 0x03, 0x53, 0x54, 0x4c, 0x10, 0x04, 0x22, 0x6e, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x43, 0x45, 0x42, 0x45, 0x52, 0x47, 0x10, 0x02,
	0x12, 0x06, 0x0a, 0x02, 0x51, 0x54, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52, 0x41, 0x49,
	0x4c, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x55, 0x4e, 0x41, 0x52, 0x49, 0x10, 0x05, 0x12,
	0x07, 0x0a, 0x03, 0x4d, 0x49, 0x54, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x4c, 0x4d, 0x10,
	0x07, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x54, 0x4c, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x55,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x22, 0x52, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x41, 0x59, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x47, 0x54, 0x43, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x54, 0x44, 0x10, 0x03, 0x12, 0x07,
	0x0a, 0x03, 0x47, 0x54, 0x54, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x41, 0x4b, 0x10, 0x05,
	0x12, 0x07, 0x0a, 0x03, 0x46, 0x4f, 0x4b, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x54, 0x4f,
	0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x54, 0x43, 0x10, 0x08, 0x22, 0xb8, 0x01, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x49, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x03,
	0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a,
	0x09, 0x49, 0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09,
	0x49, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x49,
	0x4c, 0x4c, 0x45, 0x44, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e,
	0x44, 0x45, 0x44, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x41, 0x54, 0x10, 0x0b, 0x22, 0x38, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x50, 0x45, 0x4e, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e,
	0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x49, 0x4f, 0x55, 0x53, 0x10, 0x03,
	0x22, 0x3c, 0x0a, 0x0f, 0x53, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x50, 0x45, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x45, 0x44, 0x47, 0x45, 0x10, 0x02, 0x12,
	0x0d, 0x0a, 0x09, 0x41, 0x52, 0x42, 0x49, 0x54, 0x52, 0x41, 0x47, 0x45, 0x10, 0x03, 0x22, 0x8a,
	0x01, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x18, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x4f, 0x0a, 0x0a, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x7b, 0x0a, 0x10,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x65, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0xc2, 0x02, 0x0a, 0x12, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xdf,
	0x0d, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x12, 0x52, 0x10, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0b,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x6f,
	0x6f, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x75, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x0c, 0x67, 0x6f, 0x6f, 0x64, 0x54, 0x68, 0x72, 0x75, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x2b, 0x0a, 0x12, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x75, 0x5f, 0x75, 0x74,
	0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0f, 0x67, 0x6f,
	0x6f, 0x64, 0x54, 0x68, 0x72, 0x75, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x69, 0x6e, 0x6b,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x55, 0x0a, 0x15, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x12, 0x52, 0x11, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x70,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x12, 0x52, 0x10, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x39,
	0x0a, 0x08, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x52,
	0x08, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x69, 0x7a,
	0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x69, 0x7a, 0x65, 0x73, 0x52, 0x05, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x17, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x0e, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x1e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x75,
	0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x49,
	0x64, 0x12, 0x49, 0x0a, 0x21, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x79, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x13,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x12, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x24, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x54, 0x75,
	0x70, 0x6c, 0x65, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x14, 0x64, 0x69, 0x73,
	0x63, 0x72, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x64, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x10,
	0x65, 0x78, 0x65, 0x63, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x27, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x31, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x03, 0x22, 0x83, 0x01, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x41,
	0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12,
	0x0b, 0x0a, 0x07, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x49, 0x4c, 0x4c, 0x45,
	0x44, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x09,
	0x22, 0xa3, 0x01, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x6d, 0x69, 0x6e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xe5, 0x02, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x69,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x10, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x6f, 0x70, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x12, 0x52, 0x11, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x37, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x49, 0x44, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x42, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x53, 0x4b, 0x10, 0x02, 0x12, 0x0e,
	0x0a, 0x0a, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10, 0x03, 0x22, 0xf7,
	0x01, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x75, 0x69, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x98, 0x05, 0x0a, 0x11, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x07, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x12, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65,
	0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x6e, 0x65, 0x77,
	0x5f, 0x64, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6e, 0x65, 0x77,
	0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x64, 0x69, 0x73, 0x63,
	0x72, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x70, 0x72, 0x65, 0x76, 0x44, 0x69, 0x73, 0x63,
	0x72, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22,
	0xc1, 0x02, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x43, 0x4b, 0x5f, 0x50,
	0x4c, 0x41, 0x43, 0x45, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x49,
	0x46, 0x59, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x43, 0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x49,
	0x46, 0x59, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4d,
	0x4f, 0x44, 0x49, 0x46, 0x59, 0x10, 0x0a, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x4c, 0x4c, 0x10,
	0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x0c, 0x12, 0x10,
	0x0a, 0x0c, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x10, 0x0d,
	0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10,
	0x0e, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x42, 0x55, 0x53, 0x54, 0x10, 0x0f,
	0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x41, 0x54, 0x10, 0x10, 0x12, 0x0e,
	0x0a, 0x0a, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x11, 0x12, 0x17,
	0x0a, 0x13, 0x53, 0x59, 0x4e, 0x54, 0x48, 0x45, 0x54, 0x49, 0x43, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x41, 0x54, 0x45, 0x44, 0x10, 0x12, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x13, 0x22, 0xe9, 0x04, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c,
	0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x65, 0x63, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x12, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x6c, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x76, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x6c, 0x65, 0x67, 0x5f, 0x66, 0x69, 0x6c,
	0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x4c, 0x65, 0x67, 0x46, 0x69, 0x6c,
	0x6c, 0x52, 0x08, 0x6c, 0x65, 0x67, 0x46, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69, 0x6c,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x1a, 0x66, 0x69, 0x6c, 0x6c, 0x5f,
	0x63, 0x61, 0x72, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x66, 0x69, 0x6c,
	0x6c, 0x43, 0x61, 0x72, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x70, 0x65, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x41, 0x0a, 0x0a,
	0x46, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x55, 0x53, 0x54, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x22,
	0x83, 0x03, 0x0a, 0x07, 0x4c, 0x65, 0x67, 0x46, 0x69, 0x6c, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x65,
	0x78, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78,
	0x65, 0x63, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x75, 0x74, 0x63, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x6c,
	0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x6c, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69,
	0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x76, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x65, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6c, 0x65, 0x67, 0x50, 0x61, 0x74, 0x68, 0x22, 0xd7, 0x03, 0x0a, 0x0d, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e,
	0x6f, 0x64, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x39, 0x0a, 0x08,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x08, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x53, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x52, 0x4f, 0x4f, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50,
	0x4f, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4f,
	0x50, 0x4f, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x10, 0x03, 0x12, 0x0c,
	0x0a, 0x08, 0x4f, 0x43, 0x4f, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0x04, 0x22, 0x30, 0x0a, 0x11,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x43, 0x4f, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x50,
	0x4f, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x03, 0x22, 0x42,
	0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x6c, 0x65,
	0x64, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64,
	0x10, 0x03, 0x22, 0xc7, 0x03, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4c,
	0x65, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x65, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x0b, 0x79, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65,
	0x52, 0x0a, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x04,
	0x6c, 0x65, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x4c, 0x65, 0x67, 0x52, 0x04, 0x6c, 0x65, 0x67, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x2a, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x47, 0x47,
	0x52, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x55, 0x4c, 0x10, 0x03, 0x22, 0xb0, 0x07, 0x0a,
	0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x18,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x1c, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x19, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x1a, 0x6f,
	0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x17, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x17,
	0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x15, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x14, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72,
	0x69, 0x73, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x61, 0x6c,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x75, 0x62, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x35, 0x0a,
	0x17, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x72, 0x69, 0x73, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x1b, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x18, 0x6f,
	0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2e,
	0x0a, 0x13, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x2f, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x0b, 0x0a, 0x07,
	0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x45, 0x4d,
	0x50, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x4d, 0x4e, 0x49, 0x42,
	0x55, 0x53, 0x10, 0x03, 0x22, 0x39, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x55, 0x42, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x52, 0x45,
	0x47, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x55, 0x42, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x22,
	0xc6, 0x02, 0x0a, 0x0d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x11, 0x52, 0x0f, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x6e, 0x64, 0x5f,
	0x63, 0x61, 0x73, 0x68, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x43, 0x61, 0x73, 0x68, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x0a, 0x61, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x12, 0x52, 0x08, 0x61, 0x73, 0x4f, 0x66, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x22, 0x30, 0x0a, 0x0d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x41, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x56,
	0x45, 0x52, 0x53, 0x45, 0x41, 0x53, 0x10, 0x03, 0x22, 0x9e, 0x04, 0x0a, 0x19, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x16, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x11, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0f,
	0x73, 0x61, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x35, 0x0a, 0x17, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x72, 0x69, 0x73, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x22, 0x9a, 0x03, 0x0a, 0x12, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x32, 0x0a, 0x13, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x11, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x2c, 0x0a, 0x12, 0x6f, 0x6d, 0x6e, 0x69, 0x62, 0x75, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x10, 0x6f, 0x6d, 0x6e,
	0x69, 0x62, 0x75, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x45, 0x0a,
	0x1d, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6f, 0x6d, 0x6e, 0x69, 0x62, 0x75,
	0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x1a, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x6d, 0x6e, 0x69, 0x62, 0x75, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x51, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9f, 0x03, 0x0a, 0x0f, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x56,
	0x69, 0x65, 0x77, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x73, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x61, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x16, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x91, 0x07, 0x0a, 0x0f,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x11, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x69, 0x73, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x6f,
	0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x32,
	0x0a, 0x13, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x11, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x75, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x47, 0x69, 0x76, 0x65, 0x75, 0x70, 0x12,
	0x47, 0x0a, 0x1e, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x67, 0x69, 0x76, 0x65,
	0x75, 0x70, 0x5f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x1b, 0x6f, 0x62, 0x73,
	0x6f, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x69, 0x76, 0x65, 0x75, 0x70, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x7a, 0x65, 0x72, 0x6f, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63,
	0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e,
	0x0a, 0x13, 0x67, 0x69, 0x76, 0x65, 0x75, 0x70, 0x5f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x67, 0x69, 0x76,
	0x65, 0x75, 0x70, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x54,
	0x0a, 0x27, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x74, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x23, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x42, 0x0a, 0x1d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x6c, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x6f, 0x64,
	0x65, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x47, 0x0a, 0x21, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x6d, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x50,
	0x72, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x69, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x4d, 0x61, 0x72, 0x6b, 0x22, 0x39, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x45, 0x4e, 0x45, 0x52,
	0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x41,
	0x47, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x03, 0x22,
	0xe1, 0x0c, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x6e, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x75, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a,
	0x18, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x3b, 0x0a, 0x1a, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x44, 0x0a, 0x1f, 0x65,
	0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x63, 0x6b,
	0x73, 0x12, 0x56, 0x0a, 0x17, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x14, 0x74, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x47, 0x0a, 0x20, 0x65, 0x6e, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1d, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x64, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x54, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x45, 0x0a, 0x1f, 0x65, 0x6e, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1c, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x52, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x31, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x4d, 0x0a, 0x23, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x20, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x53,
	0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x69, 0x0a, 0x1b, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x19, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x37, 0x0a,
	0x18, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x6c,
	0x6f, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x6f, 0x73,
	0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x43, 0x0a, 0x10, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f,
	0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x31, 0x2e, 0x4c, 0x6f, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0e, 0x64, 0x61, 0x69,
	0x6c, 0x79, 0x4c, 0x6f, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x42, 0x0a, 0x1e, 0x65,
	0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x69,
	0x6c, 0x79, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1a, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x6f, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x4e, 0x0a, 0x16, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x6c,
	0x6f, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31,
	0x2e, 0x4c, 0x6f, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x13, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x6f, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x11, 0x52, 0x10, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a,
	0x1a, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x79, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x17, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x69, 0x73, 0x6b, 0x79, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x48, 0x0a, 0x21, 0x65, 0x6e,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x12, 0x61, 0x0a, 0x19, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52,
	0x16, 0x74, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0x2a, 0x0a, 0x0e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x4f, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x55, 0x59, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c,
	0x4c, 0x10, 0x03, 0x22, 0x9d, 0x02, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22,
	0x62, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x1b, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x50, 0x45,
	0x4e, 0x44, 0x45, 0x4e, 0x54, 0x4c, 0x59, 0x5f, 0x42, 0x4f, 0x52, 0x52, 0x4f, 0x57, 0x10, 0x01,
	0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x50,
	0x45, 0x4e, 0x44, 0x45, 0x4e, 0x54, 0x4c, 0x59, 0x5f, 0x53, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x13,
	0x0a, 0x0f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x4f, 0x47, 0x45, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x03, 0x22, 0xc4, 0x01, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3a,
	0x0a, 0x19, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x17, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x82, 0x01, 0x0a, 0x0f, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x29, 0x0a, 0x0e, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d,
	0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x30, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x64, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4a,
	0x0a, 0x10, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x22, 0x3c, 0x0a, 0x10, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x5d, 0x0a, 0x0f, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x64, 0x61, 0x79, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xec, 0x06, 0x0a, 0x19, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x3b, 0x0a, 0x1a, 0x6d, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x17, 0x6d, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x62, 0x6c, 0x65,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x6d, 0x73, 0x5f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6d, 0x73, 0x43, 0x72, 0x6f, 0x73,
	0x73, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x11, 0x6d, 0x73,
	0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x4f, 0x74, 0x65, 0x50, 0x70, 0x12, 0x29, 0x0a, 0x11, 0x6d, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x76, 0x5f, 0x70, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x6d, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4e, 0x6f, 0x76, 0x50, 0x70,
	0x12, 0x24, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x75, 0x70, 0x6c, 0x5f,
	0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x55, 0x70, 0x6c, 0x4c, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x6f, 0x74, 0x65, 0x5f, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4f, 0x74, 0x65, 0x4c, 0x6c, 0x12, 0x34, 0x0a, 0x16,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x68, 0x65, 0x6f, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x73, 0x65,
	0x54, 0x68, 0x65, 0x6f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x68,
	0x65, 0x6f, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09,
	0x74, 0x68, 0x65, 0x6f, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x5f, 0x62, 0x62, 0x61, 0x5f, 0x6f, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x42, 0x62, 0x61, 0x4f, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0f, 0x75, 0x73, 0x65,
	0x5f, 0x62, 0x62, 0x61, 0x5f, 0x6e, 0x6f, 0x76, 0x5f, 0x75, 0x70, 0x6c, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x42, 0x62, 0x61, 0x4e, 0x6f, 0x76, 0x55, 0x70, 0x6c,
	0x12, 0x39, 0x0a, 0x19, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x62, 0x79, 0x5f, 0x6e, 0x65, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x16, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x42, 0x79, 0x4e, 0x65, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x75,
	0x73, 0x65, 0x5f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x17, 0x75, 0x73, 0x65, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x10, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x29, 0x6d, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x24, 0x6d, 0x73, 0x55, 0x73, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x50,
	0x0a, 0x25, 0x6d, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x21, 0x6d,
	0x73, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x22, 0x2e, 0x0a, 0x0d, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x07, 0x0a, 0x03, 0x59, 0x45, 0x53, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x45,
	0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x4f, 0x10, 0x03,
	0x22, 0xb7, 0x01, 0x0a, 0x09, 0x4c, 0x6f, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x64, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4d, 0x4f,
	0x55, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x49, 0x4e, 0x5f, 0x50, 0x45, 0x52,
	0x43, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x16, 0x0a,
	0x12, 0x4d, 0x41, 0x58, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x4d, 0x4f,
	0x55, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x4e, 0x4f, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x05, 0x22, 0x95, 0x01, 0x0a, 0x0d, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x11, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x50, 0x0a, 0x12, 0x66, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x46, 0x75,
	0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x52,
	0x11, 0x66, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69,
	0x74, 0x79, 0x22, 0xdc, 0x01, 0x0a, 0x11, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x11, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x12,
	0x74, 0x72, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x52, 0x11, 0x74, 0x72, 0x61,
	0x64, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x12, 0x13,
	0x0a, 0x05, 0x69, 0x73, 0x5f, 0x75, 0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x08, 0x52, 0x04, 0x69,
	0x73, 0x55, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x11, 0x52,
	0x10, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x22, 0x3b, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x85,
	0x02, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x11, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0x97, 0x01, 0x0a,
	0x0f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x01, 0x12,
	0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x43,
	0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x41, 0x53,
	0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x10, 0x05, 0x22, 0x84, 0x03, 0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0d, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x4e,
	0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0f, 0x61,
	0x6c, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x4c,
	0x0a, 0x10, 0x75, 0x73, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0e, 0x75, 0x73,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x53, 0x0a, 0x14,
	0x6e, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x11,
	0x6e, 0x6f, 0x6e, 0x55, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x12, 0x5a, 0x0a, 0x16, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x14, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0x9b, 0x02,
	0x0a, 0x12, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c,
	0x65, 0x61, 0x72, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x4e, 0x0a, 0x10, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x0e, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x19, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x52, 0x16, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0xf0, 0x08, 0x0a, 0x16,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x54, 0x0a,
	0x18, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31,
	0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x56, 0x0a, 0x19, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x17, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x52, 0x0a, 0x17, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x44, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x51, 0x0a, 0x17, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x14, 0x74, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x5b, 0x0a, 0x19, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x16, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x71, 0x0a, 0x22, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x52, 0x1e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x12, 0x78, 0x0a, 0x26, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69,
	0x63, 0x6b, 0x73, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f,
	0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x52,
	0x21, 0x74, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x54, 0x69, 0x63, 0x6b, 0x73, 0x4e, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f,
	0x75, 0x73, 0x12, 0x77, 0x0a, 0x24, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x20, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x12, 0x7e, 0x0a, 0x28, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x23, 0x74, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4e, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x12, 0x51, 0x0a, 0x17, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xe8,
	0x01, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x62, 0x69, 0x64, 0x5f,
	0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x62, 0x69, 0x64, 0x41, 0x73, 0x6b, 0x12, 0x2e, 0x0a,
	0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x3a, 0x0a,
	0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x31, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x82, 0x02, 0x0a, 0x17, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x62, 0x69, 0x64, 0x5f, 0x61, 0x73, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x62, 0x69, 0x64, 0x41, 0x73, 0x6b,
	0x12, 0x34, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x40, 0x0a, 0x0a,
	0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x31, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xa0,
	0x02, 0x0a, 0x14, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0d, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2a,
	0x0a, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x11, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x15, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x13, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x12, 0x5d, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x5f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x15, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x64, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x22, 0xe7, 0x03, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x66, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x11, 0x52, 0x13, 0x66, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x64, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x1e, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x1b, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x61, 0x0a, 0x19, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x16, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x12, 0x60, 0x0a, 0x18, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x16, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x12, 0x65, 0x0a, 0x1c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f,
	0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x19, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x9a, 0x03, 0x0a, 0x16,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x11, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x61, 0x0a, 0x19, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x16, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x65,
	0x0a, 0x1c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x19, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x1a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x22, 0x6a, 0x0a, 0x14, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x08, 0x52, 0x13, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x70, 0x65,
	0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8e, 0x02, 0x0a, 0x0c, 0x4f, 0x70,
	0x65, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x03, 0x71, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x12, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x12, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x31, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x4f, 0x52, 0x4b, 0x49,
	0x4e, 0x47, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x02, 0x22, 0xd6, 0x02, 0x0a, 0x06, 0x45,
	0x71, 0x75, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x01, 0x52, 0x03, 0x6f, 0x74, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20,
	0x02, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x71, 0x75, 0x69, 0x74, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x76, 0x6f, 0x18, 0x06, 0x20, 0x02, 0x28, 0x01, 0x52, 0x03, 0x6d,
	0x76, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x65, 0x78, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x61, 0x73, 0x68, 0x45, 0x78,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x61, 0x69, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x22, 0x76, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20,
	0x02, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x12, 0x29, 0x0a, 0x10, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0x06, 0x20, 0x02, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x22, 0xd9, 0x07, 0x0a, 0x17,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x62, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x16, 0x62, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x6f, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x73, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x74, 0x63, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x02, 0x28, 0x12, 0x52, 0x10, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x02, 0x28, 0x11, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x12, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x12, 0x52, 0x11,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x6f,
	0x70, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x12, 0x52, 0x10, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x73, 0x61, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64, 0x22, 0x76, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x22,
	0xe4, 0x02, 0x0a, 0x19, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x64, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x10, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x54, 0x69,
	0x63, 0x6b, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x10, 0x68, 0x65, 0x64, 0x67, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b,
	0x73, 0x12, 0x34, 0x0a, 0x16, 0x68, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x14, 0x68, 0x65, 0x64, 0x67, 0x65, 0x45, 0x78, 0x65, 0x63, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x63, 0x65, 0x62, 0x65,
	0x72, 0x67, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x71, 0x74, 0x79, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x69, 0x63,
	0x65, 0x62, 0x65, 0x72, 0x67, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x51, 0x74, 0x79, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0xb5, 0x02, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x12, 0x4d, 0x0a, 0x11, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x6f,
	0x6d, 0x6e, 0x69, 0x62, 0x75, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6f, 0x6d, 0x6e, 0x69, 0x62,
	0x75, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a,
	0x10, 0x6f, 0x6d, 0x6e, 0x69, 0x62, 0x75, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4f, 0x6d,
	0x6e, 0x69, 0x62, 0x75, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0f, 0x6f, 0x6d,
	0x6e, 0x69, 0x62, 0x75, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x3f, 0x0a,
	0x12, 0x4f, 0x6d, 0x6e, 0x69, 0x62, 0x75, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x48, 0x49, 0x42, 0x49, 0x54, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x22, 0xad,
	0x01, 0x0a, 0x13, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4f, 0x6d, 0x6e, 0x69, 0x62, 0x75, 0x73, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x62, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x62, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x93,
	0x03, 0x0a, 0x10, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x31, 0x0a, 0x14, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x69, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x23, 0x6f,
	0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72,
	0x6c, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x20, 0x6f, 0x62,
	0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x61, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70,
	0x70, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x35,
	0x0a, 0x16, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x22, 0x2f, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x1e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xce, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x73, 0x54, 0x6f, 0x53, 0x65, 0x74, 0x12, 0x3f, 0x0a, 0x13, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x54,
	0x75, 0x70, 0x6c, 0x65, 0x52, 0x11, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x54,
	0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x62, 0x0a, 0x1d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x41, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x19,
	0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x22,
	0x25, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xa0, 0x01, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a,
	0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x54, 0x6f, 0x53, 0x65, 0x74,
	0x12, 0x37, 0x0a, 0x0f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x0d, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x22, 0x2a, 0x0a, 0x28, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x2e, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x48, 0x0a, 0x27,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x1e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x18, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x74, 0x6f,
	0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x54, 0x6f, 0x53, 0x65, 0x74,
	0x12, 0x3c, 0x0a, 0x1b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x22, 0x6d,
	0x0a, 0x26, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x43, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x4c, 0x0a,
	0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x22, 0x4b, 0x0a, 0x1d, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x22, 0x25, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x1d, 0x0a, 0x1b, 0x42, 0x69, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6d,
	0x0a, 0x1a, 0x42, 0x69, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4f, 0x0a, 0x12,
	0x62, 0x69, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x11, 0x62, 0x69, 0x6c, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0xd7, 0x01,
	0x0a, 0x10, 0x42, 0x69, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x49, 0x0a, 0x21, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x22, 0x5e, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x48, 0x0a,
	0x11, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x4b, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x6e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x22, 0xdc, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x41, 0x0a, 0x0d, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x49,
	0x0a, 0x13, 0x73, 0x75, 0x62, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x2e, 0x53, 0x75, 0x62,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x10, 0x73, 0x75, 0x62, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x54, 0x6f, 0x53, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x19, 0x73, 0x75, 0x62,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x5f,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x73, 0x75,
	0x62, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x22, 0x3e, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x2a, 0xad, 0x01, 0x0a, 0x1e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x4f, 0x44, 0x45,
	0x53, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10,
	0x66, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x67,
	0x12, 0x18, 0x0a, 0x14, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x68, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x52,
	0x41, 0x44, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x69, 0x12, 0x0f,
	0x0a, 0x0b, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x10, 0x6a, 0x12,
	0x12, 0x0a, 0x0e, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49,
	0x4e, 0x10, 0x6b, 0x2a, 0x5a, 0x0a, 0x0e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x47, 0x47, 0x52, 0x45, 0x53, 0x53,
	0x49, 0x56, 0x45, 0x5f, 0x4c, 0x4d, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x47, 0x47,
	0x52, 0x45, 0x53, 0x53, 0x49, 0x56, 0x45, 0x5f, 0x4c, 0x4d, 0x54, 0x5f, 0x53, 0x54, 0x50, 0x10,
	0x02, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4c, 0x4c, 0x5f, 0x4c, 0x4d, 0x54, 0x10, 0x03, 0x12, 0x0f,
	0x0a, 0x0b, 0x41, 0x4c, 0x4c, 0x5f, 0x4c, 0x4d, 0x54, 0x5f, 0x53, 0x54, 0x50, 0x10, 0x04, 0x2a,
	0x34, 0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x4e, 0x0a, 0x1e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x4e, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x4e, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49,
	0x52, 0x45, 0x44, 0x10, 0x02, 0x42, 0x10, 0x5a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31,
}

var (
	file_proto_traderouting_1_proto_rawDescOnce sync.Once
	file_proto_traderouting_1_proto_rawDescData = file_proto_traderouting_1_proto_rawDesc
)

func file_proto_traderouting_1_proto_rawDescGZIP() []byte {
	file_proto_traderouting_1_proto_rawDescOnce.Do(func() {
		file_proto_traderouting_1_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_traderouting_1_proto_rawDescData)
	})
	return file_proto_traderouting_1_proto_rawDescData
}

var file_proto_traderouting_1_proto_enumTypes = make([]protoimpl.EnumInfo, 34)
var file_proto_traderouting_1_proto_msgTypes = make([]protoimpl.MessageInfo, 162)
var file_proto_traderouting_1_proto_goTypes = []interface{}{
	(TradeRoutingLookupPropertyType)(0),              // 0: traderouting_1.TradeRoutingLookupPropertyType
	(PriceLimitMode)(0),                              // 1: traderouting_1.PriceLimitMode
	(LimitMode)(0),                                   // 2: traderouting_1.LimitMode
	(ServiceGroupAuthorizationLevel)(0),              // 3: traderouting_1.ServiceGroupAuthorizationLevel
	(OrderSearchRequest_SearchCriteria)(0),           // 4: traderouting_1.OrderSearchRequest.SearchCriteria
	(AccountSearchRequest_AccountGroupRole)(0),       // 5: traderouting_1.AccountSearchRequest.AccountGroupRole
	(AccountSearchRequest_SearchCriteria)(0),         // 6: traderouting_1.AccountSearchRequest.SearchCriteria
	(OrderChain_Side)(0),                             // 7: traderouting_1.OrderChain.Side
	(OrderChain_OrderType)(0),                        // 8: traderouting_1.OrderChain.OrderType
	(OrderChain_ExecInstruction)(0),                  // 9: traderouting_1.OrderChain.ExecInstruction
	(OrderChain_Duration)(0),                         // 10: traderouting_1.OrderChain.Duration
	(OrderChain_Status)(0),                           // 11: traderouting_1.OrderChain.Status
	(OrderChain_OpenCloseType)(0),                    // 12: traderouting_1.OrderChain.OpenCloseType
	(OrderChain_SpeculationType)(0),                  // 13: traderouting_1.OrderChain.SpeculationType
	(OrderRequest_RequestType)(0),                    // 14: traderouting_1.OrderRequest.RequestType
	(OrderRequest_State)(0),                          // 15: traderouting_1.OrderRequest.State
	(OrderTrailing_TrailType)(0),                     // 16: traderouting_1.OrderTrailing.TrailType
	(TransactionStatus_Status)(0),                    // 17: traderouting_1.TransactionStatus.Status
	(OrderFill_FillStatus)(0),                        // 18: traderouting_1.OrderFill.FillStatus
	(CompoundOrder_CompoundOrderNodeRole)(0),         // 19: traderouting_1.CompoundOrder.CompoundOrderNodeRole
	(CompoundOrder_CompoundOrderType)(0),             // 20: traderouting_1.CompoundOrder.CompoundOrderType
	(CompoundOrder_CompoundOrderTriggerType)(0),      // 21: traderouting_1.CompoundOrder.CompoundOrderTriggerType
	(StrategyLeg_StrategyMode)(0),                    // 22: traderouting_1.StrategyLeg.StrategyMode
	(Account_Class)(0),                               // 23: traderouting_1.Account.Class
	(Account_SubClass)(0),                            // 24: traderouting_1.Account.SubClass
	(BalanceRecord_BalanceOrigin)(0),                 // 25: traderouting_1.BalanceRecord.BalanceOrigin
	(AccountSettings_StatementOption)(0),             // 26: traderouting_1.AccountSettings.StatementOption
	(AccountRiskParameters_OptionsTrading)(0),        // 27: traderouting_1.AccountRiskParameters.OptionsTrading
	(AccountGroup_RelationType)(0),                   // 28: traderouting_1.AccountGroup.RelationType
	(PurchasingPowerParameters_IncludeOption)(0),     // 29: traderouting_1.PurchasingPowerParameters.IncludeOption
	(LossLimit_Type)(0),                              // 30: traderouting_1.LossLimit.Type
	(InstrumentType_MarketLimitType)(0),              // 31: traderouting_1.InstrumentType.MarketLimitType
	(OpenPosition_PositionStatus)(0),                 // 32: traderouting_1.OpenPosition.PositionStatus
	(Route_OmnibusSupportType)(0),                    // 33: traderouting_1.Route.OmnibusSupportType
	(*TradeRoutingRequest)(nil),                      // 34: traderouting_1.TradeRoutingRequest
	(*AccountScopeRequest)(nil),                      // 35: traderouting_1.AccountScopeRequest
	(*OrderScopeRequest)(nil),                        // 36: traderouting_1.OrderScopeRequest
	(*OrderDetailsRequest)(nil),                      // 37: traderouting_1.OrderDetailsRequest
	(*AddFill)(nil),                                  // 38: traderouting_1.AddFill
	(*CreateExternalOrder)(nil),                      // 39: traderouting_1.CreateExternalOrder
	(*OrderSearchRequest)(nil),                       // 40: traderouting_1.OrderSearchRequest
	(*RelatedOrderTreeRequest)(nil),                  // 41: traderouting_1.RelatedOrderTreeRequest
	(*CompoundOrderTreeRequest)(nil),                 // 42: traderouting_1.CompoundOrderTreeRequest
	(*SyntheticStrategyTreeRequest)(nil),             // 43: traderouting_1.SyntheticStrategyTreeRequest
	(*CancelOrder)(nil),                              // 44: traderouting_1.CancelOrder
	(*ReflectAsCanceledOrder)(nil),                   // 45: traderouting_1.ReflectAsCanceledOrder
	(*CancelCompoundOrderTree)(nil),                  // 46: traderouting_1.CancelCompoundOrderTree
	(*AccountInfoRequest)(nil),                       // 47: traderouting_1.AccountInfoRequest
	(*BalanceRecordsRequest)(nil),                    // 48: traderouting_1.BalanceRecordsRequest
	(*CreateBalanceRecord)(nil),                      // 49: traderouting_1.CreateBalanceRecord
	(*UpdateBalanceRecord)(nil),                      // 50: traderouting_1.UpdateBalanceRecord
	(*AccountSearchRequest)(nil),                     // 51: traderouting_1.AccountSearchRequest
	(*AccountRouteListRequest)(nil),                  // 52: traderouting_1.AccountRouteListRequest
	(*AccountUserAuthorizationListRequest)(nil),      // 53: traderouting_1.AccountUserAuthorizationListRequest
	(*AccountSettingsRequest)(nil),                   // 54: traderouting_1.AccountSettingsRequest
	(*AccountRiskParametersRequest)(nil),             // 55: traderouting_1.AccountRiskParametersRequest
	(*UpdateRiskParameters)(nil),                     // 56: traderouting_1.UpdateRiskParameters
	(*AccountAvailableExchangeGroupsRequest)(nil),    // 57: traderouting_1.AccountAvailableExchangeGroupsRequest
	(*AccountMarketLimitsRequest)(nil),               // 58: traderouting_1.AccountMarketLimitsRequest
	(*AccountPositionsRequest)(nil),                  // 59: traderouting_1.AccountPositionsRequest
	(*AccountEquityRequest)(nil),                     // 60: traderouting_1.AccountEquityRequest
	(*AccountCollateralRequest)(nil),                 // 61: traderouting_1.AccountCollateralRequest
	(*CloneAccount)(nil),                             // 62: traderouting_1.CloneAccount
	(*UpdateAccount)(nil),                            // 63: traderouting_1.UpdateAccount
	(*AccountClusterRequest)(nil),                    // 64: traderouting_1.AccountClusterRequest
	(*CreateAccountCluster)(nil),                     // 65: traderouting_1.CreateAccountCluster
	(*UpdateAccountCluster)(nil),                     // 66: traderouting_1.UpdateAccountCluster
	(*UpdateAccountClusterPriceOffsets)(nil),         // 67: traderouting_1.UpdateAccountClusterPriceOffsets
	(*UpdateAccountSettings)(nil),                    // 68: traderouting_1.UpdateAccountSettings
	(*AccountGroupRequest)(nil),                      // 69: traderouting_1.AccountGroupRequest
	(*UpdateAccountRiskParameters)(nil),              // 70: traderouting_1.UpdateAccountRiskParameters
	(*UpdateAccountRouteList)(nil),                   // 71: traderouting_1.UpdateAccountRouteList
	(*UpdateAccountMarketLimits)(nil),                // 72: traderouting_1.UpdateAccountMarketLimits
	(*RouteListRequest)(nil),                         // 73: traderouting_1.RouteListRequest
	(*CreateAccount)(nil),                            // 74: traderouting_1.CreateAccount
	(*TradeRoutingResult)(nil),                       // 75: traderouting_1.TradeRoutingResult
	(*AccountScopeResult)(nil),                       // 76: traderouting_1.AccountScopeResult
	(*OrderScopeResult)(nil),                         // 77: traderouting_1.OrderScopeResult
	(*OrderDetailsResult)(nil),                       // 78: traderouting_1.OrderDetailsResult
	(*AddFillResult)(nil),                            // 79: traderouting_1.AddFillResult
	(*CreateExternalOrderResult)(nil),                // 80: traderouting_1.CreateExternalOrderResult
	(*OrderSearchResult)(nil),                        // 81: traderouting_1.OrderSearchResult
	(*RelatedOrderTreeResult)(nil),                   // 82: traderouting_1.RelatedOrderTreeResult
	(*CompoundOrderTreeResult)(nil),                  // 83: traderouting_1.CompoundOrderTreeResult
	(*SyntheticStrategyTreeResult)(nil),              // 84: traderouting_1.SyntheticStrategyTreeResult
	(*CancelOrderResult)(nil),                        // 85: traderouting_1.CancelOrderResult
	(*ReflectAsCanceledOrderResult)(nil),             // 86: traderouting_1.ReflectAsCanceledOrderResult
	(*CancelCompoundOrderTreeResult)(nil),            // 87: traderouting_1.CancelCompoundOrderTreeResult
	(*AccountInfoResult)(nil),                        // 88: traderouting_1.AccountInfoResult
	(*BalanceRecordsResult)(nil),                     // 89: traderouting_1.BalanceRecordsResult
	(*CreateBalanceRecordResult)(nil),                // 90: traderouting_1.CreateBalanceRecordResult
	(*UpdateBalanceRecordResult)(nil),                // 91: traderouting_1.UpdateBalanceRecordResult
	(*AccountSearchResult)(nil),                      // 92: traderouting_1.AccountSearchResult
	(*AccountRouteListResult)(nil),                   // 93: traderouting_1.AccountRouteListResult
	(*AccountUserAuthorizationListResult)(nil),       // 94: traderouting_1.AccountUserAuthorizationListResult
	(*AccountSettingsResult)(nil),                    // 95: traderouting_1.AccountSettingsResult
	(*AccountRiskParametersResult)(nil),              // 96: traderouting_1.AccountRiskParametersResult
	(*UpdateRiskParametersResult)(nil),               // 97: traderouting_1.UpdateRiskParametersResult
	(*AccountExchangeGroupsResult)(nil),              // 98: traderouting_1.AccountExchangeGroupsResult
	(*AccountMarketLimitsResult)(nil),                // 99: traderouting_1.AccountMarketLimitsResult
	(*AccountPositionsResult)(nil),                   // 100: traderouting_1.AccountPositionsResult
	(*AccountEquityResult)(nil),                      // 101: traderouting_1.AccountEquityResult
	(*AccountCollateralResult)(nil),                  // 102: traderouting_1.AccountCollateralResult
	(*CloneAccountResult)(nil),                       // 103: traderouting_1.CloneAccountResult
	(*UpdateAccountResult)(nil),                      // 104: traderouting_1.UpdateAccountResult
	(*UpdateAccountSettingsResult)(nil),              // 105: traderouting_1.UpdateAccountSettingsResult
	(*AccountGroupResult)(nil),                       // 106: traderouting_1.AccountGroupResult
	(*UpdateAccountRiskParametersResult)(nil),        // 107: traderouting_1.UpdateAccountRiskParametersResult
	(*RouteListResult)(nil),                          // 108: traderouting_1.RouteListResult
	(*UpdateAccountRouteListResult)(nil),             // 109: traderouting_1.UpdateAccountRouteListResult
	(*UpdateAccountMarketLimitsResult)(nil),          // 110: traderouting_1.UpdateAccountMarketLimitsResult
	(*CreateAccountResult)(nil),                      // 111: traderouting_1.CreateAccountResult
	(*AccountClusterResult)(nil),                     // 112: traderouting_1.AccountClusterResult
	(*CreateAccountClusterResult)(nil),               // 113: traderouting_1.CreateAccountClusterResult
	(*UpdateAccountClusterResult)(nil),               // 114: traderouting_1.UpdateAccountClusterResult
	(*UpdateAccountClusterPriceOffsetsResult)(nil),   // 115: traderouting_1.UpdateAccountClusterPriceOffsetsResult
	(*OrderChain)(nil),                               // 116: traderouting_1.OrderChain
	(*ChainAccount)(nil),                             // 117: traderouting_1.ChainAccount
	(*OrderRoute)(nil),                               // 118: traderouting_1.OrderRoute
	(*OrderContractLeg)(nil),                         // 119: traderouting_1.OrderContractLeg
	(*AccountAndUserInfo)(nil),                       // 120: traderouting_1.AccountAndUserInfo
	(*OrderRequest)(nil),                             // 121: traderouting_1.OrderRequest
	(*OrderSizes)(nil),                               // 122: traderouting_1.OrderSizes
	(*OrderTrailing)(nil),                            // 123: traderouting_1.OrderTrailing
	(*OperationalDetails)(nil),                       // 124: traderouting_1.OperationalDetails
	(*TransactionStatus)(nil),                        // 125: traderouting_1.TransactionStatus
	(*OrderFill)(nil),                                // 126: traderouting_1.OrderFill
	(*LegFill)(nil),                                  // 127: traderouting_1.LegFill
	(*RelatedOrder)(nil),                             // 128: traderouting_1.RelatedOrder
	(*CompoundOrder)(nil),                            // 129: traderouting_1.CompoundOrder
	(*StrategyLeg)(nil),                              // 130: traderouting_1.StrategyLeg
	(*Account)(nil),                                  // 131: traderouting_1.Account
	(*BalanceRecord)(nil),                            // 132: traderouting_1.BalanceRecord
	(*AccountSearchResultRecord)(nil),                // 133: traderouting_1.AccountSearchResultRecord
	(*AccountRouteRecord)(nil),                       // 134: traderouting_1.AccountRouteRecord
	(*AccountRouteAttribute)(nil),                    // 135: traderouting_1.AccountRouteAttribute
	(*AccountUserLink)(nil),                          // 136: traderouting_1.AccountUserLink
	(*AccountSettings)(nil),                          // 137: traderouting_1.AccountSettings
	(*AccountRiskParameters)(nil),                    // 138: traderouting_1.AccountRiskParameters
	(*AccountGroup)(nil),                             // 139: traderouting_1.AccountGroup
	(*SubAccount)(nil),                               // 140: traderouting_1.SubAccount
	(*TradePriceLimit)(nil),                          // 141: traderouting_1.TradePriceLimit
	(*TradePriceLimitPercent)(nil),                   // 142: traderouting_1.TradePriceLimitPercent
	(*LimitValue)(nil),                               // 143: traderouting_1.LimitValue
	(*LimitValueDouble)(nil),                         // 144: traderouting_1.LimitValueDouble
	(*ExpirationLimit)(nil),                          // 145: traderouting_1.ExpirationLimit
	(*PurchasingPowerParameters)(nil),                // 146: traderouting_1.PurchasingPowerParameters
	(*LossLimit)(nil),                                // 147: traderouting_1.LossLimit
	(*ExchangeGroup)(nil),                            // 148: traderouting_1.ExchangeGroup
	(*FungibleCommodity)(nil),                        // 149: traderouting_1.FungibleCommodity
	(*TradableCommodity)(nil),                        // 150: traderouting_1.TradableCommodity
	(*InstrumentType)(nil),                           // 151: traderouting_1.InstrumentType
	(*MarketLimits)(nil),                             // 152: traderouting_1.MarketLimits
	(*MarketLimitsRecord)(nil),                       // 153: traderouting_1.MarketLimitsRecord
	(*PositionAndTradeLimits)(nil),                   // 154: traderouting_1.PositionAndTradeLimits
	(*TradePriceLimitsTicks)(nil),                    // 155: traderouting_1.TradePriceLimitsTicks
	(*TradePriceLimitsPercent)(nil),                  // 156: traderouting_1.TradePriceLimitsPercent
	(*ExchangeMarketLimits)(nil),                     // 157: traderouting_1.ExchangeMarketLimits
	(*CommodityMarketLimits)(nil),                    // 158: traderouting_1.CommodityMarketLimits
	(*InstrumentMarketLimits)(nil),                   // 159: traderouting_1.InstrumentMarketLimits
	(*EntityAllowedToTrade)(nil),                     // 160: traderouting_1.EntityAllowedToTrade
	(*ContractPosition)(nil),                         // 161: traderouting_1.ContractPosition
	(*OpenPosition)(nil),                             // 162: traderouting_1.OpenPosition
	(*Equity)(nil),                                   // 163: traderouting_1.Equity
	(*Collateral)(nil),                               // 164: traderouting_1.Collateral
	(*OrderSearchResultRecord)(nil),                  // 165: traderouting_1.OrderSearchResultRecord
	(*AccountCluster)(nil),                           // 166: traderouting_1.AccountCluster
	(*AccountClusterPriceOffset)(nil),                // 167: traderouting_1.AccountClusterPriceOffset
	(*Route)(nil),                                    // 168: traderouting_1.Route
	(*RouteOmnibusAccount)(nil),                      // 169: traderouting_1.RouteOmnibusAccount
	(*RouteInformation)(nil),                         // 170: traderouting_1.RouteInformation
	(*RestoreAccount)(nil),                           // 171: traderouting_1.RestoreAccount
	(*AccountTypeOverrideListRequest)(nil),           // 172: traderouting_1.AccountTypeOverrideListRequest
	(*UpdateAccountTypeOverrideList)(nil),            // 173: traderouting_1.UpdateAccountTypeOverrideList
	(*RestoreAccountResult)(nil),                     // 174: traderouting_1.RestoreAccountResult
	(*AccountTypeOverrideListResult)(nil),            // 175: traderouting_1.AccountTypeOverrideListResult
	(*AccountTypeOverride)(nil),                      // 176: traderouting_1.AccountTypeOverride
	(*UpdateAccountTypeOverrideListResult)(nil),      // 177: traderouting_1.UpdateAccountTypeOverrideListResult
	(*UpdateAccountUserAuthorizationList)(nil),       // 178: traderouting_1.UpdateAccountUserAuthorizationList
	(*UpdateAccountUserAuthorizationListResult)(nil), // 179: traderouting_1.UpdateAccountUserAuthorizationListResult
	(*RemoveAccount)(nil),                            // 180: traderouting_1.RemoveAccount
	(*RemoveAccountResult)(nil),                      // 181: traderouting_1.RemoveAccountResult
	(*AccountAvailableServiceGroupListRequest)(nil),  // 182: traderouting_1.AccountAvailableServiceGroupListRequest
	(*AccountServiceGroupListRequest)(nil),           // 183: traderouting_1.AccountServiceGroupListRequest
	(*UpdateAccountServiceGroupList)(nil),            // 184: traderouting_1.UpdateAccountServiceGroupList
	(*AccountAvailableServiceGroupListResult)(nil),   // 185: traderouting_1.AccountAvailableServiceGroupListResult
	(*ServiceGroup)(nil),                             // 186: traderouting_1.ServiceGroup
	(*AccountServiceGroupListResult)(nil),            // 187: traderouting_1.AccountServiceGroupListResult
	(*UpdateAccountServiceGroupListResult)(nil),      // 188: traderouting_1.UpdateAccountServiceGroupListResult
	(*BillableExchangeListRequest)(nil),              // 189: traderouting_1.BillableExchangeListRequest
	(*BillableExchangeListResult)(nil),               // 190: traderouting_1.BillableExchangeListResult
	(*BillableExchange)(nil),                         // 191: traderouting_1.BillableExchange
	(*CreateAccountGroup)(nil),                       // 192: traderouting_1.CreateAccountGroup
	(*CreateAccountGroupResult)(nil),                 // 193: traderouting_1.CreateAccountGroupResult
	(*UpdateAccountGroup)(nil),                       // 194: traderouting_1.UpdateAccountGroup
	(*RemoveAccountGroup)(nil),                       // 195: traderouting_1.RemoveAccountGroup
	(*LookupPropertyListRequest)(nil),                // 196: common_1.LookupPropertyListRequest
	(*SearchOption)(nil),                             // 197: common_1.SearchOption
	(*Text)(nil),                                     // 198: common_1.Text
	(*LookupPropertyListResult)(nil),                 // 199: common_1.LookupPropertyListResult
	(*Tuple)(nil),                                    // 200: common_1.Tuple
}
var file_proto_traderouting_1_proto_depIdxs = []int32{
	35,  // 0: traderouting_1.TradeRoutingRequest.account_scope_request:type_name -> traderouting_1.AccountScopeRequest
	36,  // 1: traderouting_1.TradeRoutingRequest.order_scope_request:type_name -> traderouting_1.OrderScopeRequest
	196, // 2: traderouting_1.TradeRoutingRequest.lookup_property_list_request:type_name -> common_1.LookupPropertyListRequest
	47,  // 3: traderouting_1.AccountScopeRequest.account_info_request:type_name -> traderouting_1.AccountInfoRequest
	48,  // 4: traderouting_1.AccountScopeRequest.balance_records_request:type_name -> traderouting_1.BalanceRecordsRequest
	49,  // 5: traderouting_1.AccountScopeRequest.create_balance_record:type_name -> traderouting_1.CreateBalanceRecord
	50,  // 6: traderouting_1.AccountScopeRequest.update_balance_record:type_name -> traderouting_1.UpdateBalanceRecord
	55,  // 7: traderouting_1.AccountScopeRequest.account_risk_parameters_request:type_name -> traderouting_1.AccountRiskParametersRequest
	56,  // 8: traderouting_1.AccountScopeRequest.obsolete_update_risk_parameters:type_name -> traderouting_1.UpdateRiskParameters
	51,  // 9: traderouting_1.AccountScopeRequest.account_search_request:type_name -> traderouting_1.AccountSearchRequest
	52,  // 10: traderouting_1.AccountScopeRequest.account_route_list_request:type_name -> traderouting_1.AccountRouteListRequest
	53,  // 11: traderouting_1.AccountScopeRequest.account_user_authorization_list_request:type_name -> traderouting_1.AccountUserAuthorizationListRequest
	54,  // 12: traderouting_1.AccountScopeRequest.account_settings_request:type_name -> traderouting_1.AccountSettingsRequest
	57,  // 13: traderouting_1.AccountScopeRequest.account_available_exchange_groups_request:type_name -> traderouting_1.AccountAvailableExchangeGroupsRequest
	58,  // 14: traderouting_1.AccountScopeRequest.account_market_limits_request:type_name -> traderouting_1.AccountMarketLimitsRequest
	59,  // 15: traderouting_1.AccountScopeRequest.account_positions_request:type_name -> traderouting_1.AccountPositionsRequest
	60,  // 16: traderouting_1.AccountScopeRequest.account_equity_request:type_name -> traderouting_1.AccountEquityRequest
	61,  // 17: traderouting_1.AccountScopeRequest.account_collateral_request:type_name -> traderouting_1.AccountCollateralRequest
	62,  // 18: traderouting_1.AccountScopeRequest.clone_account:type_name -> traderouting_1.CloneAccount
	63,  // 19: traderouting_1.AccountScopeRequest.update_account:type_name -> traderouting_1.UpdateAccount
	68,  // 20: traderouting_1.AccountScopeRequest.update_account_settings:type_name -> traderouting_1.UpdateAccountSettings
	69,  // 21: traderouting_1.AccountScopeRequest.account_group_request:type_name -> traderouting_1.AccountGroupRequest
	70,  // 22: traderouting_1.AccountScopeRequest.update_account_risk_parameters:type_name -> traderouting_1.UpdateAccountRiskParameters
	73,  // 23: traderouting_1.AccountScopeRequest.route_list_request:type_name -> traderouting_1.RouteListRequest
	71,  // 24: traderouting_1.AccountScopeRequest.update_account_route_list:type_name -> traderouting_1.UpdateAccountRouteList
	72,  // 25: traderouting_1.AccountScopeRequest.update_account_market_limits:type_name -> traderouting_1.UpdateAccountMarketLimits
	74,  // 26: traderouting_1.AccountScopeRequest.create_account:type_name -> traderouting_1.CreateAccount
	64,  // 27: traderouting_1.AccountScopeRequest.obsolete_account_cluster_request:type_name -> traderouting_1.AccountClusterRequest
	65,  // 28: traderouting_1.AccountScopeRequest.obsolete_create_account_cluster:type_name -> traderouting_1.CreateAccountCluster
	66,  // 29: traderouting_1.AccountScopeRequest.obsolete_update_account_cluster:type_name -> traderouting_1.UpdateAccountCluster
	67,  // 30: traderouting_1.AccountScopeRequest.obsolete_update_account_cluster_price_offsets:type_name -> traderouting_1.UpdateAccountClusterPriceOffsets
	171, // 31: traderouting_1.AccountScopeRequest.restore_account:type_name -> traderouting_1.RestoreAccount
	172, // 32: traderouting_1.AccountScopeRequest.account_type_override_list_request:type_name -> traderouting_1.AccountTypeOverrideListRequest
	173, // 33: traderouting_1.AccountScopeRequest.update_account_type_override_list:type_name -> traderouting_1.UpdateAccountTypeOverrideList
	178, // 34: traderouting_1.AccountScopeRequest.update_account_user_authorization_list:type_name -> traderouting_1.UpdateAccountUserAuthorizationList
	180, // 35: traderouting_1.AccountScopeRequest.remove_account:type_name -> traderouting_1.RemoveAccount
	182, // 36: traderouting_1.AccountScopeRequest.account_available_service_group_list_request:type_name -> traderouting_1.AccountAvailableServiceGroupListRequest
	183, // 37: traderouting_1.AccountScopeRequest.account_service_group_list_request:type_name -> traderouting_1.AccountServiceGroupListRequest
	184, // 38: traderouting_1.AccountScopeRequest.update_account_service_group_list:type_name -> traderouting_1.UpdateAccountServiceGroupList
	189, // 39: traderouting_1.AccountScopeRequest.billable_exchange_list_request:type_name -> traderouting_1.BillableExchangeListRequest
	192, // 40: traderouting_1.AccountScopeRequest.create_account_group:type_name -> traderouting_1.CreateAccountGroup
	194, // 41: traderouting_1.AccountScopeRequest.update_account_group:type_name -> traderouting_1.UpdateAccountGroup
	195, // 42: traderouting_1.AccountScopeRequest.remove_account_group:type_name -> traderouting_1.RemoveAccountGroup
	37,  // 43: traderouting_1.OrderScopeRequest.order_details_request:type_name -> traderouting_1.OrderDetailsRequest
	38,  // 44: traderouting_1.OrderScopeRequest.add_fill:type_name -> traderouting_1.AddFill
	39,  // 45: traderouting_1.OrderScopeRequest.create_external_order:type_name -> traderouting_1.CreateExternalOrder
	40,  // 46: traderouting_1.OrderScopeRequest.order_search_request:type_name -> traderouting_1.OrderSearchRequest
	41,  // 47: traderouting_1.OrderScopeRequest.related_order_tree_request:type_name -> traderouting_1.RelatedOrderTreeRequest
	42,  // 48: traderouting_1.OrderScopeRequest.compound_order_tree_request:type_name -> traderouting_1.CompoundOrderTreeRequest
	43,  // 49: traderouting_1.OrderScopeRequest.synthetic_strategy_tree_request:type_name -> traderouting_1.SyntheticStrategyTreeRequest
	44,  // 50: traderouting_1.OrderScopeRequest.cancel_order:type_name -> traderouting_1.CancelOrder
	45,  // 51: traderouting_1.OrderScopeRequest.reflect_as_canceled_order:type_name -> traderouting_1.ReflectAsCanceledOrder
	46,  // 52: traderouting_1.OrderScopeRequest.cancel_compound_order_tree:type_name -> traderouting_1.CancelCompoundOrderTree
	197, // 53: traderouting_1.OrderSearchRequest.search_options:type_name -> common_1.SearchOption
	197, // 54: traderouting_1.AccountSearchRequest.search_options:type_name -> common_1.SearchOption
	131, // 55: traderouting_1.UpdateAccount.account:type_name -> traderouting_1.Account
	131, // 56: traderouting_1.UpdateAccount.original_account:type_name -> traderouting_1.Account
	166, // 57: traderouting_1.CreateAccountCluster.obsolete_account_cluster:type_name -> traderouting_1.AccountCluster
	166, // 58: traderouting_1.UpdateAccountCluster.obsolete_account_cluster:type_name -> traderouting_1.AccountCluster
	166, // 59: traderouting_1.UpdateAccountCluster.obsolete_original_account_cluster:type_name -> traderouting_1.AccountCluster
	167, // 60: traderouting_1.UpdateAccountClusterPriceOffsets.offsets_to_set:type_name -> traderouting_1.AccountClusterPriceOffset
	167, // 61: traderouting_1.UpdateAccountClusterPriceOffsets.offsets_to_remove:type_name -> traderouting_1.AccountClusterPriceOffset
	137, // 62: traderouting_1.UpdateAccountSettings.settings:type_name -> traderouting_1.AccountSettings
	137, // 63: traderouting_1.UpdateAccountSettings.original_settings:type_name -> traderouting_1.AccountSettings
	138, // 64: traderouting_1.UpdateAccountRiskParameters.risk_parameters:type_name -> traderouting_1.AccountRiskParameters
	138, // 65: traderouting_1.UpdateAccountRiskParameters.original_risk_parameters:type_name -> traderouting_1.AccountRiskParameters
	134, // 66: traderouting_1.UpdateAccountRouteList.routes_to_set:type_name -> traderouting_1.AccountRouteRecord
	152, // 67: traderouting_1.UpdateAccountMarketLimits.market_limits:type_name -> traderouting_1.MarketLimits
	152, // 68: traderouting_1.UpdateAccountMarketLimits.original_market_limits:type_name -> traderouting_1.MarketLimits
	131, // 69: traderouting_1.CreateAccount.account:type_name -> traderouting_1.Account
	198, // 70: traderouting_1.TradeRoutingResult.error_message:type_name -> common_1.Text
	76,  // 71: traderouting_1.TradeRoutingResult.account_scope_result:type_name -> traderouting_1.AccountScopeResult
	77,  // 72: traderouting_1.TradeRoutingResult.order_scope_result:type_name -> traderouting_1.OrderScopeResult
	199, // 73: traderouting_1.TradeRoutingResult.lookup_property_list_result:type_name -> common_1.LookupPropertyListResult
	88,  // 74: traderouting_1.AccountScopeResult.account_info_result:type_name -> traderouting_1.AccountInfoResult
	89,  // 75: traderouting_1.AccountScopeResult.balance_records_result:type_name -> traderouting_1.BalanceRecordsResult
	90,  // 76: traderouting_1.AccountScopeResult.create_balance_record_result:type_name -> traderouting_1.CreateBalanceRecordResult
	91,  // 77: traderouting_1.AccountScopeResult.update_balance_record_result:type_name -> traderouting_1.UpdateBalanceRecordResult
	96,  // 78: traderouting_1.AccountScopeResult.account_risk_parameters_result:type_name -> traderouting_1.AccountRiskParametersResult
	97,  // 79: traderouting_1.AccountScopeResult.update_risk_parameters_result:type_name -> traderouting_1.UpdateRiskParametersResult
	92,  // 80: traderouting_1.AccountScopeResult.account_search_result:type_name -> traderouting_1.AccountSearchResult
	93,  // 81: traderouting_1.AccountScopeResult.account_route_list_result:type_name -> traderouting_1.AccountRouteListResult
	94,  // 82: traderouting_1.AccountScopeResult.account_user_authorization_list_result:type_name -> traderouting_1.AccountUserAuthorizationListResult
	95,  // 83: traderouting_1.AccountScopeResult.account_settings_result:type_name -> traderouting_1.AccountSettingsResult
	98,  // 84: traderouting_1.AccountScopeResult.account_exchange_groups_result:type_name -> traderouting_1.AccountExchangeGroupsResult
	99,  // 85: traderouting_1.AccountScopeResult.account_market_limits_result:type_name -> traderouting_1.AccountMarketLimitsResult
	100, // 86: traderouting_1.AccountScopeResult.account_positions_result:type_name -> traderouting_1.AccountPositionsResult
	101, // 87: traderouting_1.AccountScopeResult.account_equity_result:type_name -> traderouting_1.AccountEquityResult
	102, // 88: traderouting_1.AccountScopeResult.account_collateral_result:type_name -> traderouting_1.AccountCollateralResult
	103, // 89: traderouting_1.AccountScopeResult.clone_account_result:type_name -> traderouting_1.CloneAccountResult
	104, // 90: traderouting_1.AccountScopeResult.update_account_result:type_name -> traderouting_1.UpdateAccountResult
	105, // 91: traderouting_1.AccountScopeResult.update_account_settings_result:type_name -> traderouting_1.UpdateAccountSettingsResult
	106, // 92: traderouting_1.AccountScopeResult.account_group_result:type_name -> traderouting_1.AccountGroupResult
	107, // 93: traderouting_1.AccountScopeResult.update_account_risk_parameters_result:type_name -> traderouting_1.UpdateAccountRiskParametersResult
	108, // 94: traderouting_1.AccountScopeResult.route_list_result:type_name -> traderouting_1.RouteListResult
	109, // 95: traderouting_1.AccountScopeResult.update_account_route_list_result:type_name -> traderouting_1.UpdateAccountRouteListResult
	110, // 96: traderouting_1.AccountScopeResult.update_account_market_limits_result:type_name -> traderouting_1.UpdateAccountMarketLimitsResult
	111, // 97: traderouting_1.AccountScopeResult.create_account_result:type_name -> traderouting_1.CreateAccountResult
	112, // 98: traderouting_1.AccountScopeResult.obsolete_account_cluster_result:type_name -> traderouting_1.AccountClusterResult
	113, // 99: traderouting_1.AccountScopeResult.obsolete_create_account_cluster_result:type_name -> traderouting_1.CreateAccountClusterResult
	114, // 100: traderouting_1.AccountScopeResult.obsolete_update_account_cluster_result:type_name -> traderouting_1.UpdateAccountClusterResult
	115, // 101: traderouting_1.AccountScopeResult.obsolete_update_account_cluster_price_offsets_result:type_name -> traderouting_1.UpdateAccountClusterPriceOffsetsResult
	174, // 102: traderouting_1.AccountScopeResult.restore_account_result:type_name -> traderouting_1.RestoreAccountResult
	175, // 103: traderouting_1.AccountScopeResult.account_type_override_list_result:type_name -> traderouting_1.AccountTypeOverrideListResult
	177, // 104: traderouting_1.AccountScopeResult.update_account_type_override_list_result:type_name -> traderouting_1.UpdateAccountTypeOverrideListResult
	179, // 105: traderouting_1.AccountScopeResult.update_account_user_authorization_list_result:type_name -> traderouting_1.UpdateAccountUserAuthorizationListResult
	181, // 106: traderouting_1.AccountScopeResult.remove_account_result:type_name -> traderouting_1.RemoveAccountResult
	185, // 107: traderouting_1.AccountScopeResult.account_available_service_group_list_result:type_name -> traderouting_1.AccountAvailableServiceGroupListResult
	187, // 108: traderouting_1.AccountScopeResult.account_service_group_list_result:type_name -> traderouting_1.AccountServiceGroupListResult
	188, // 109: traderouting_1.AccountScopeResult.update_account_service_group_list_result:type_name -> traderouting_1.UpdateAccountServiceGroupListResult
	190, // 110: traderouting_1.AccountScopeResult.billable_exchange_list_result:type_name -> traderouting_1.BillableExchangeListResult
	193, // 111: traderouting_1.AccountScopeResult.create_account_group_result:type_name -> traderouting_1.CreateAccountGroupResult
	78,  // 112: traderouting_1.OrderScopeResult.order_details_result:type_name -> traderouting_1.OrderDetailsResult
	79,  // 113: traderouting_1.OrderScopeResult.add_fill_result:type_name -> traderouting_1.AddFillResult
	80,  // 114: traderouting_1.OrderScopeResult.create_external_order_result:type_name -> traderouting_1.CreateExternalOrderResult
	81,  // 115: traderouting_1.OrderScopeResult.order_search_result:type_name -> traderouting_1.OrderSearchResult
	82,  // 116: traderouting_1.OrderScopeResult.related_order_tree_result:type_name -> traderouting_1.RelatedOrderTreeResult
	83,  // 117: traderouting_1.OrderScopeResult.compound_order_tree_result:type_name -> traderouting_1.CompoundOrderTreeResult
	84,  // 118: traderouting_1.OrderScopeResult.synthetic_strategy_tree_result:type_name -> traderouting_1.SyntheticStrategyTreeResult
	85,  // 119: traderouting_1.OrderScopeResult.cancel_order_result:type_name -> traderouting_1.CancelOrderResult
	86,  // 120: traderouting_1.OrderScopeResult.reflect_as_canceled_order_result:type_name -> traderouting_1.ReflectAsCanceledOrderResult
	87,  // 121: traderouting_1.OrderScopeResult.cancel_compound_order_tree_result:type_name -> traderouting_1.CancelCompoundOrderTreeResult
	116, // 122: traderouting_1.OrderDetailsResult.order_chain:type_name -> traderouting_1.OrderChain
	165, // 123: traderouting_1.OrderSearchResult.order_record:type_name -> traderouting_1.OrderSearchResultRecord
	128, // 124: traderouting_1.RelatedOrderTreeResult.related_order:type_name -> traderouting_1.RelatedOrder
	129, // 125: traderouting_1.CompoundOrderTreeResult.compound_order:type_name -> traderouting_1.CompoundOrder
	130, // 126: traderouting_1.SyntheticStrategyTreeResult.legs:type_name -> traderouting_1.StrategyLeg
	131, // 127: traderouting_1.AccountInfoResult.account:type_name -> traderouting_1.Account
	132, // 128: traderouting_1.BalanceRecordsResult.balance_record:type_name -> traderouting_1.BalanceRecord
	133, // 129: traderouting_1.AccountSearchResult.account_record:type_name -> traderouting_1.AccountSearchResultRecord
	134, // 130: traderouting_1.AccountRouteListResult.account_route_record:type_name -> traderouting_1.AccountRouteRecord
	136, // 131: traderouting_1.AccountUserAuthorizationListResult.account_user_link:type_name -> traderouting_1.AccountUserLink
	137, // 132: traderouting_1.AccountSettingsResult.account_settings:type_name -> traderouting_1.AccountSettings
	138, // 133: traderouting_1.AccountRiskParametersResult.account_risk_parameters:type_name -> traderouting_1.AccountRiskParameters
	148, // 134: traderouting_1.AccountExchangeGroupsResult.exchange_group:type_name -> traderouting_1.ExchangeGroup
	151, // 135: traderouting_1.AccountExchangeGroupsResult.instrument_type:type_name -> traderouting_1.InstrumentType
	152, // 136: traderouting_1.AccountMarketLimitsResult.account_market_limits:type_name -> traderouting_1.MarketLimits
	161, // 137: traderouting_1.AccountPositionsResult.contract_position:type_name -> traderouting_1.ContractPosition
	163, // 138: traderouting_1.AccountEquityResult.equity:type_name -> traderouting_1.Equity
	164, // 139: traderouting_1.AccountCollateralResult.collateral:type_name -> traderouting_1.Collateral
	139, // 140: traderouting_1.AccountGroupResult.acount_group:type_name -> traderouting_1.AccountGroup
	168, // 141: traderouting_1.RouteListResult.routes:type_name -> traderouting_1.Route
	166, // 142: traderouting_1.AccountClusterResult.obsolete_account_cluster:type_name -> traderouting_1.AccountCluster
	167, // 143: traderouting_1.AccountClusterResult.obsolete_account_cluster_price_offsets:type_name -> traderouting_1.AccountClusterPriceOffset
	121, // 144: traderouting_1.OrderChain.order_request:type_name -> traderouting_1.OrderRequest
	126, // 145: traderouting_1.OrderChain.order_fill:type_name -> traderouting_1.OrderFill
	123, // 146: traderouting_1.OrderChain.trailing:type_name -> traderouting_1.OrderTrailing
	122, // 147: traderouting_1.OrderChain.sizes:type_name -> traderouting_1.OrderSizes
	117, // 148: traderouting_1.OrderChain.accounts:type_name -> traderouting_1.ChainAccount
	119, // 149: traderouting_1.OrderChain.legs:type_name -> traderouting_1.OrderContractLeg
	200, // 150: traderouting_1.OrderChain.user_attributes:type_name -> common_1.Tuple
	118, // 151: traderouting_1.OrderChain.route:type_name -> traderouting_1.OrderRoute
	125, // 152: traderouting_1.OrderRequest.transaction_status:type_name -> traderouting_1.TransactionStatus
	120, // 153: traderouting_1.OrderRequest.account_and_user_info:type_name -> traderouting_1.AccountAndUserInfo
	123, // 154: traderouting_1.OrderRequest.trailing:type_name -> traderouting_1.OrderTrailing
	122, // 155: traderouting_1.OrderRequest.sizes:type_name -> traderouting_1.OrderSizes
	118, // 156: traderouting_1.OrderRequest.routes:type_name -> traderouting_1.OrderRoute
	124, // 157: traderouting_1.OrderRequest.operational_details:type_name -> traderouting_1.OperationalDetails
	200, // 158: traderouting_1.OrderRequest.client_extra_values:type_name -> common_1.Tuple
	127, // 159: traderouting_1.OrderFill.leg_fills:type_name -> traderouting_1.LegFill
	116, // 160: traderouting_1.RelatedOrder.order_chain:type_name -> traderouting_1.OrderChain
	128, // 161: traderouting_1.RelatedOrder.children:type_name -> traderouting_1.RelatedOrder
	116, // 162: traderouting_1.CompoundOrder.order_chain:type_name -> traderouting_1.OrderChain
	129, // 163: traderouting_1.CompoundOrder.children:type_name -> traderouting_1.CompoundOrder
	117, // 164: traderouting_1.StrategyLeg.account:type_name -> traderouting_1.ChainAccount
	200, // 165: traderouting_1.StrategyLeg.yield_model:type_name -> common_1.Tuple
	130, // 166: traderouting_1.StrategyLeg.legs:type_name -> traderouting_1.StrategyLeg
	135, // 167: traderouting_1.AccountRouteRecord.attributes:type_name -> traderouting_1.AccountRouteAttribute
	141, // 168: traderouting_1.AccountRiskParameters.trade_price_limit_ticks:type_name -> traderouting_1.TradePriceLimit
	143, // 169: traderouting_1.AccountRiskParameters.commodity_position_limit:type_name -> traderouting_1.LimitValue
	143, // 170: traderouting_1.AccountRiskParameters.contract_position_limit:type_name -> traderouting_1.LimitValue
	146, // 171: traderouting_1.AccountRiskParameters.purchasing_power_parameters:type_name -> traderouting_1.PurchasingPowerParameters
	147, // 172: traderouting_1.AccountRiskParameters.daily_loss_limit:type_name -> traderouting_1.LossLimit
	147, // 173: traderouting_1.AccountRiskParameters.delta_daily_loss_limit:type_name -> traderouting_1.LossLimit
	142, // 174: traderouting_1.AccountRiskParameters.trade_price_limit_percent:type_name -> traderouting_1.TradePriceLimitPercent
	140, // 175: traderouting_1.AccountGroup.sub_accounts:type_name -> traderouting_1.SubAccount
	143, // 176: traderouting_1.TradePriceLimit.value:type_name -> traderouting_1.LimitValue
	144, // 177: traderouting_1.TradePriceLimitPercent.value:type_name -> traderouting_1.LimitValueDouble
	145, // 178: traderouting_1.LimitValue.expiration_limit:type_name -> traderouting_1.ExpirationLimit
	198, // 179: traderouting_1.ExchangeGroup.name:type_name -> common_1.Text
	149, // 180: traderouting_1.ExchangeGroup.fungible_commodity:type_name -> traderouting_1.FungibleCommodity
	198, // 181: traderouting_1.FungibleCommodity.name:type_name -> common_1.Text
	150, // 182: traderouting_1.FungibleCommodity.tradable_commodity:type_name -> traderouting_1.TradableCommodity
	198, // 183: traderouting_1.InstrumentType.name:type_name -> common_1.Text
	153, // 184: traderouting_1.MarketLimits.all_market_limits:type_name -> traderouting_1.MarketLimitsRecord
	153, // 185: traderouting_1.MarketLimits.us_market_limits:type_name -> traderouting_1.MarketLimitsRecord
	153, // 186: traderouting_1.MarketLimits.non_us_market_limits:type_name -> traderouting_1.MarketLimitsRecord
	157, // 187: traderouting_1.MarketLimits.exchange_market_limits:type_name -> traderouting_1.ExchangeMarketLimits
	160, // 188: traderouting_1.MarketLimitsRecord.allowed_to_trade:type_name -> traderouting_1.EntityAllowedToTrade
	154, // 189: traderouting_1.MarketLimitsRecord.position_and_trade_limits:type_name -> traderouting_1.PositionAndTradeLimits
	143, // 190: traderouting_1.PositionAndTradeLimits.commodity_position_limit:type_name -> traderouting_1.LimitValue
	143, // 191: traderouting_1.PositionAndTradeLimits.instrument_position_limit:type_name -> traderouting_1.LimitValue
	143, // 192: traderouting_1.PositionAndTradeLimits.contract_position_limit:type_name -> traderouting_1.LimitValue
	143, // 193: traderouting_1.PositionAndTradeLimits.trade_size_limit:type_name -> traderouting_1.LimitValue
	143, // 194: traderouting_1.PositionAndTradeLimits.trade_price_limit_ticks:type_name -> traderouting_1.LimitValue
	144, // 195: traderouting_1.PositionAndTradeLimits.trade_price_limit_percent:type_name -> traderouting_1.LimitValueDouble
	155, // 196: traderouting_1.PositionAndTradeLimits.trade_price_limit_ticks_continuous:type_name -> traderouting_1.TradePriceLimitsTicks
	155, // 197: traderouting_1.PositionAndTradeLimits.trade_price_limit_ticks_non_continuous:type_name -> traderouting_1.TradePriceLimitsTicks
	156, // 198: traderouting_1.PositionAndTradeLimits.trade_price_limit_percent_continuous:type_name -> traderouting_1.TradePriceLimitsPercent
	156, // 199: traderouting_1.PositionAndTradeLimits.trade_price_limit_percent_non_continuous:type_name -> traderouting_1.TradePriceLimitsPercent
	143, // 200: traderouting_1.PositionAndTradeLimits.last_trading_date_limit:type_name -> traderouting_1.LimitValue
	143, // 201: traderouting_1.TradePriceLimitsTicks.bid_ask:type_name -> traderouting_1.LimitValue
	143, // 202: traderouting_1.TradePriceLimitsTicks.last:type_name -> traderouting_1.LimitValue
	143, // 203: traderouting_1.TradePriceLimitsTicks.open:type_name -> traderouting_1.LimitValue
	143, // 204: traderouting_1.TradePriceLimitsTicks.settlement:type_name -> traderouting_1.LimitValue
	144, // 205: traderouting_1.TradePriceLimitsPercent.bid_ask:type_name -> traderouting_1.LimitValueDouble
	144, // 206: traderouting_1.TradePriceLimitsPercent.last:type_name -> traderouting_1.LimitValueDouble
	144, // 207: traderouting_1.TradePriceLimitsPercent.open:type_name -> traderouting_1.LimitValueDouble
	144, // 208: traderouting_1.TradePriceLimitsPercent.settlement:type_name -> traderouting_1.LimitValueDouble
	153, // 209: traderouting_1.ExchangeMarketLimits.default_market_limits:type_name -> traderouting_1.MarketLimitsRecord
	158, // 210: traderouting_1.ExchangeMarketLimits.commodity_market_limits:type_name -> traderouting_1.CommodityMarketLimits
	154, // 211: traderouting_1.CommodityMarketLimits.position_and_trade_limits:type_name -> traderouting_1.PositionAndTradeLimits
	159, // 212: traderouting_1.CommodityMarketLimits.instrument_market_limits:type_name -> traderouting_1.InstrumentMarketLimits
	160, // 213: traderouting_1.CommodityMarketLimits.allowed_to_trade_commodities:type_name -> traderouting_1.EntityAllowedToTrade
	154, // 214: traderouting_1.InstrumentMarketLimits.position_and_trade_limits:type_name -> traderouting_1.PositionAndTradeLimits
	160, // 215: traderouting_1.InstrumentMarketLimits.allowed_to_trade_commodities:type_name -> traderouting_1.EntityAllowedToTrade
	160, // 216: traderouting_1.InstrumentMarketLimits.allowed_to_trade_contracts:type_name -> traderouting_1.EntityAllowedToTrade
	162, // 217: traderouting_1.ContractPosition.open_position:type_name -> traderouting_1.OpenPosition
	170, // 218: traderouting_1.Route.route_information:type_name -> traderouting_1.RouteInformation
	169, // 219: traderouting_1.Route.omnibus_accounts:type_name -> traderouting_1.RouteOmnibusAccount
	135, // 220: traderouting_1.RouteInformation.attributes:type_name -> traderouting_1.AccountRouteAttribute
	176, // 221: traderouting_1.UpdateAccountTypeOverrideList.overrides_to_set:type_name -> traderouting_1.AccountTypeOverride
	200, // 222: traderouting_1.UpdateAccountTypeOverrideList.overrides_to_remove:type_name -> common_1.Tuple
	176, // 223: traderouting_1.AccountTypeOverrideListResult.overrides:type_name -> traderouting_1.AccountTypeOverride
	136, // 224: traderouting_1.UpdateAccountUserAuthorizationList.links_to_set:type_name -> traderouting_1.AccountUserLink
	200, // 225: traderouting_1.UpdateAccountUserAuthorizationList.links_to_remove:type_name -> common_1.Tuple
	186, // 226: traderouting_1.AccountAvailableServiceGroupListResult.service_groups:type_name -> traderouting_1.ServiceGroup
	191, // 227: traderouting_1.BillableExchangeListResult.billable_exchanges:type_name -> traderouting_1.BillableExchange
	139, // 228: traderouting_1.CreateAccountGroup.new_account_group:type_name -> traderouting_1.AccountGroup
	139, // 229: traderouting_1.UpdateAccountGroup.account_group:type_name -> traderouting_1.AccountGroup
	140, // 230: traderouting_1.UpdateAccountGroup.sub_accounts_to_set:type_name -> traderouting_1.SubAccount
	231, // [231:231] is the sub-list for method output_type
	231, // [231:231] is the sub-list for method input_type
	231, // [231:231] is the sub-list for extension type_name
	231, // [231:231] is the sub-list for extension extendee
	0,   // [0:231] is the sub-list for field type_name
}

func init() { file_proto_traderouting_1_proto_init() }
func file_proto_traderouting_1_proto_init() {
	if File_proto_traderouting_1_proto != nil {
		return
	}
	file_proto_common_1_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_traderouting_1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeRoutingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountScopeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderScopeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateExternalOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelatedOrderTreeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompoundOrderTreeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyntheticStrategyTreeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReflectAsCanceledOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelCompoundOrderTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBalanceRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBalanceRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountRouteListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountUserAuthorizationListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountRiskParametersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRiskParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountAvailableExchangeGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountMarketLimitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountPositionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountEquityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountCollateralRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloneAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAccountCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAccountCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAccountClusterPriceOffsets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAccountSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAccountRiskParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAccountRouteList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAccountMarketLimits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeRoutingResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountScopeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderScopeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderDetailsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFillResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateExternalOrderResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderSearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelatedOrderTreeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompoundOrderTreeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyntheticStrategyTreeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelOrderResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReflectAsCanceledOrderResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelCompoundOrderTreeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountInfoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceRecordsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBalanceRecordResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBalanceRecordResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountSearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountRouteListResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountUserAuthorizationListResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountSettingsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountRiskParametersResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRiskParametersResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountExchangeGroupsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountMarketLimitsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountPositionsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountEquityResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountCollateralResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloneAccountResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAccountResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAccountSettingsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountGroupResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAccountRiskParametersResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteListResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAccountRouteListResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAccountMarketLimitsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAccountResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountClusterResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAccountClusterResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAccountClusterResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAccountClusterPriceOffsetsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderChain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderContractLeg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountAndUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderSizes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderTrailing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationalDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderFill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LegFill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelatedOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompoundOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrategyLeg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountSearchResultRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountRouteRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountRouteAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountUserLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountRiskParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradePriceLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradePriceLimitPercent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitValueDouble); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpirationLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurchasingPowerParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LossLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FungibleCommodity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradableCommodity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketLimits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketLimitsRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionAndTradeLimits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradePriceLimitsTicks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradePriceLimitsPercent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeMarketLimits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommodityMarketLimits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentMarketLimits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityAllowedToTrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Equity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collateral); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderSearchResultRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountClusterPriceOffset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteOmnibusAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountTypeOverrideListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAccountTypeOverrideList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreAccountResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountTypeOverrideListResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountTypeOverride); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAccountTypeOverrideListResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAccountUserAuthorizationList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAccountUserAuthorizationListResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveAccountResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountAvailableServiceGroupListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountServiceGroupListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAccountServiceGroupList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountAvailableServiceGroupListResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountServiceGroupListResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAccountServiceGroupListResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BillableExchangeListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BillableExchangeListResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BillableExchange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAccountGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAccountGroupResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAccountGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_traderouting_1_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveAccountGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_traderouting_1_proto_rawDesc,
			NumEnums:      34,
			NumMessages:   162,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_traderouting_1_proto_goTypes,
		DependencyIndexes: file_proto_traderouting_1_proto_depIdxs,
		EnumInfos:         file_proto_traderouting_1_proto_enumTypes,
		MessageInfos:      file_proto_traderouting_1_proto_msgTypes,
	}.Build()
	File_proto_traderouting_1_proto = out.File
	file_proto_traderouting_1_proto_rawDesc = nil
	file_proto_traderouting_1_proto_goTypes = nil
	file_proto_traderouting_1_proto_depIdxs = nil
}
