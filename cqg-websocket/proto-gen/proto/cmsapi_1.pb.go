// CQG Customer Management System API Protocol.
//
// Protocol time attributes are 64-bit signed integers that contain offset in milliseconds from 01.01.1970 (unix timestamp).
//
// The following attributes are used in comments to describe fields specifics:
// 1. [immutable] - field is ignored via any operation message.
// 2. [obsolete] - field is obsolete and candidate for remove in some next protocol version.
// 3. [required] - field is required for any operation message, even if it is marked as optional.
// Attribute can be additionally amended with operation name it is applied for. For example:
// [required-create] - field is required for create message only.
//
// Last changes were made on 18 Jun 2019
// Version 1.24

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.6.1
// source: proto/cmsapi_1.proto

package protogen

import (
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ProtocolVersion int32

const (
	// Major number change is required for backward incompatible protocol versions (new 'proto' file is necessary)
	ProtocolVersion_PROTOCOL_VERSION_MAJOR ProtocolVersion = 1
	// Minor number is increased for backward compatible protocol versions when new messages and/ or fields are
	// added without removing/ changing any existing messages and fields (new 'proto' file is not created)
	ProtocolVersion_PROTOCOL_VERSION_MINOR ProtocolVersion = 24
)

// Enum value maps for ProtocolVersion.
var (
	ProtocolVersion_name = map[int32]string{
		1:  "PROTOCOL_VERSION_MAJOR",
		24: "PROTOCOL_VERSION_MINOR",
	}
	ProtocolVersion_value = map[string]int32{
		"PROTOCOL_VERSION_MAJOR": 1,
		"PROTOCOL_VERSION_MINOR": 24,
	}
)

func (x ProtocolVersion) Enum() *ProtocolVersion {
	p := new(ProtocolVersion)
	*p = x
	return p
}

func (x ProtocolVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtocolVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_cmsapi_1_proto_enumTypes[0].Descriptor()
}

func (ProtocolVersion) Type() protoreflect.EnumType {
	return &file_proto_cmsapi_1_proto_enumTypes[0]
}

func (x ProtocolVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProtocolVersion) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProtocolVersion(num)
	return nil
}

// Deprecated: Use ProtocolVersion.Descriptor instead.
func (ProtocolVersion) EnumDescriptor() ([]byte, []int) {
	return file_proto_cmsapi_1_proto_rawDescGZIP(), []int{0}
}

// Client to Server message, must include at least one field.
// Logon is required to be the first message after connection.
// Rate of incoming requests (sum of different requests within messages) is limited,
// maximum 1000 requests for 20 seconds period is allowed by default.
// NOTE: This and other limits mentioned in this protocol are not guaranteed; they are given for reference only
// and are subject to change without prior notice.
type ClientMessage struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Session related messages.
	// Only one session related message is expected in ClientMessage (it should not be combined with other messages).
	Logon                *Logon                `protobuf:"bytes,1,opt,name=logon" json:"logon,omitempty"`
	Logoff               *Logoff               `protobuf:"bytes,2,opt,name=logoff" json:"logoff,omitempty"`
	RestoreOrJoinSession *RestoreOrJoinSession `protobuf:"bytes,7,opt,name=restore_or_join_session,json=restoreOrJoinSession" json:"restore_or_join_session,omitempty"`
	ObtainDemoAccess     *ObtainDemoAccess     `protobuf:"bytes,8,opt,name=obtain_demo_access,json=obtainDemoAccess" json:"obtain_demo_access,omitempty"`
	// Information request.
	InformationRequest []*InformationRequest `protobuf:"bytes,3,rep,name=information_request,json=informationRequest" json:"information_request,omitempty"`
	// Search request.
	SearchRequest []*SearchRequest `protobuf:"bytes,4,rep,name=search_request,json=searchRequest" json:"search_request,omitempty"`
	// Operation request.
	OperationRequest []*OperationRequest `protobuf:"bytes,5,rep,name=operation_request,json=operationRequest" json:"operation_request,omitempty"`
	// Trade routing related operations.
	TradeRoutingRequest []*TradeRoutingRequest `protobuf:"bytes,6,rep,name=trade_routing_request,json=tradeRoutingRequest" json:"trade_routing_request,omitempty"`
	// Ping request initiated by client.
	Ping *Ping `protobuf:"bytes,9,opt,name=ping" json:"ping,omitempty"`
	// Pong message in response to server Ping.
	Pong *Pong `protobuf:"bytes,10,opt,name=pong" json:"pong,omitempty"`
}

func (x *ClientMessage) Reset() {
	*x = ClientMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmsapi_1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMessage) ProtoMessage() {}

func (x *ClientMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmsapi_1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMessage.ProtoReflect.Descriptor instead.
func (*ClientMessage) Descriptor() ([]byte, []int) {
	return file_proto_cmsapi_1_proto_rawDescGZIP(), []int{0}
}

var extRange_ClientMessage = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 199},
}

// Deprecated: Use ClientMessage.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*ClientMessage) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_ClientMessage
}

func (x *ClientMessage) GetLogon() *Logon {
	if x != nil {
		return x.Logon
	}
	return nil
}

func (x *ClientMessage) GetLogoff() *Logoff {
	if x != nil {
		return x.Logoff
	}
	return nil
}

func (x *ClientMessage) GetRestoreOrJoinSession() *RestoreOrJoinSession {
	if x != nil {
		return x.RestoreOrJoinSession
	}
	return nil
}

func (x *ClientMessage) GetObtainDemoAccess() *ObtainDemoAccess {
	if x != nil {
		return x.ObtainDemoAccess
	}
	return nil
}

func (x *ClientMessage) GetInformationRequest() []*InformationRequest {
	if x != nil {
		return x.InformationRequest
	}
	return nil
}

func (x *ClientMessage) GetSearchRequest() []*SearchRequest {
	if x != nil {
		return x.SearchRequest
	}
	return nil
}

func (x *ClientMessage) GetOperationRequest() []*OperationRequest {
	if x != nil {
		return x.OperationRequest
	}
	return nil
}

func (x *ClientMessage) GetTradeRoutingRequest() []*TradeRoutingRequest {
	if x != nil {
		return x.TradeRoutingRequest
	}
	return nil
}

func (x *ClientMessage) GetPing() *Ping {
	if x != nil {
		return x.Ping
	}
	return nil
}

func (x *ClientMessage) GetPong() *Pong {
	if x != nil {
		return x.Pong
	}
	return nil
}

// Information request message.
// One of the operational request fields is expected.
type InformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request identifier.
	// It should be unique to match with operation result.
	Id *uint32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// Request of user information.
	UserInfoRequest *UserInfoRequest `protobuf:"bytes,2,opt,name=user_info_request,json=userInfoRequest" json:"user_info_request,omitempty"`
	// Request of user's entitlements.
	UserEntitlementServiceRequest *UserEntitlementServiceRequest `protobuf:"bytes,3,opt,name=user_entitlement_service_request,json=userEntitlementServiceRequest" json:"user_entitlement_service_request,omitempty"`
	// Request of entitlement categories.
	EntitlementCategoryListRequest *EntitlementCategoryListRequest `protobuf:"bytes,4,opt,name=entitlement_category_list_request,json=entitlementCategoryListRequest" json:"entitlement_category_list_request,omitempty"`
	// Request of entitlement service information.
	EntitlementServiceRequest *EntitlementServiceRequest `protobuf:"bytes,5,opt,name=entitlement_service_request,json=entitlementServiceRequest" json:"entitlement_service_request,omitempty"`
	// Request of customer information.
	CustomerRequest *CustomerRequest `protobuf:"bytes,6,opt,name=customer_request,json=customerRequest" json:"customer_request,omitempty"`
	// Request for all services list.
	EntitlementServiceListRequest *EntitlementServiceListRequest `protobuf:"bytes,7,opt,name=entitlement_service_list_request,json=entitlementServiceListRequest" json:"entitlement_service_list_request,omitempty"`
	// Request of unique username
	GetUniqueUsernameRequest *GetUniqueUsernameRequest `protobuf:"bytes,8,opt,name=get_unique_username_request,json=getUniqueUsernameRequest" json:"get_unique_username_request,omitempty"`
	// Customer to sales series links request.
	CustomerSalesSeriesAuthorizationListRequest *CustomerSalesSeriesAuthorizationListRequest `protobuf:"bytes,9,opt,name=customer_sales_series_authorization_list_request,json=customerSalesSeriesAuthorizationListRequest" json:"customer_sales_series_authorization_list_request,omitempty"`
	// Login additional settings request.
	LoginSettingsRequest *LoginSettingsRequest `protobuf:"bytes,10,opt,name=login_settings_request,json=loginSettingsRequest" json:"login_settings_request,omitempty"`
	// Requests login's member ids.
	// Supported login domains: trade-routing.
	LoginExchangeMemberIdListRequest *LoginExchangeMemberIdListRequest `protobuf:"bytes,11,opt,name=login_exchange_member_id_list_request,json=loginExchangeMemberIdListRequest" json:"login_exchange_member_id_list_request,omitempty"`
	// Get a list of lookup properties.
	// Lookup Property types are defined by CommonLookupPropertyType enum.
	LookupPropertyListRequest *LookupPropertyListRequest `protobuf:"bytes,12,opt,name=lookup_property_list_request,json=lookupPropertyListRequest" json:"lookup_property_list_request,omitempty"`
	// Get list of authentication partners.
	AuthPartnerListRequest *AuthPartnerListRequest `protobuf:"bytes,13,opt,name=auth_partner_list_request,json=authPartnerListRequest" json:"auth_partner_list_request,omitempty"`
	// Request of login billing custom data.
	LoginBillingCustomDataRequest *LoginBillingCustomDataRequest `protobuf:"bytes,14,opt,name=login_billing_custom_data_request,json=loginBillingCustomDataRequest" json:"login_billing_custom_data_request,omitempty"`
}

func (x *InformationRequest) Reset() {
	*x = InformationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmsapi_1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InformationRequest) ProtoMessage() {}

func (x *InformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmsapi_1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InformationRequest.ProtoReflect.Descriptor instead.
func (*InformationRequest) Descriptor() ([]byte, []int) {
	return file_proto_cmsapi_1_proto_rawDescGZIP(), []int{1}
}

func (x *InformationRequest) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *InformationRequest) GetUserInfoRequest() *UserInfoRequest {
	if x != nil {
		return x.UserInfoRequest
	}
	return nil
}

func (x *InformationRequest) GetUserEntitlementServiceRequest() *UserEntitlementServiceRequest {
	if x != nil {
		return x.UserEntitlementServiceRequest
	}
	return nil
}

func (x *InformationRequest) GetEntitlementCategoryListRequest() *EntitlementCategoryListRequest {
	if x != nil {
		return x.EntitlementCategoryListRequest
	}
	return nil
}

func (x *InformationRequest) GetEntitlementServiceRequest() *EntitlementServiceRequest {
	if x != nil {
		return x.EntitlementServiceRequest
	}
	return nil
}

func (x *InformationRequest) GetCustomerRequest() *CustomerRequest {
	if x != nil {
		return x.CustomerRequest
	}
	return nil
}

func (x *InformationRequest) GetEntitlementServiceListRequest() *EntitlementServiceListRequest {
	if x != nil {
		return x.EntitlementServiceListRequest
	}
	return nil
}

func (x *InformationRequest) GetGetUniqueUsernameRequest() *GetUniqueUsernameRequest {
	if x != nil {
		return x.GetUniqueUsernameRequest
	}
	return nil
}

func (x *InformationRequest) GetCustomerSalesSeriesAuthorizationListRequest() *CustomerSalesSeriesAuthorizationListRequest {
	if x != nil {
		return x.CustomerSalesSeriesAuthorizationListRequest
	}
	return nil
}

func (x *InformationRequest) GetLoginSettingsRequest() *LoginSettingsRequest {
	if x != nil {
		return x.LoginSettingsRequest
	}
	return nil
}

func (x *InformationRequest) GetLoginExchangeMemberIdListRequest() *LoginExchangeMemberIdListRequest {
	if x != nil {
		return x.LoginExchangeMemberIdListRequest
	}
	return nil
}

func (x *InformationRequest) GetLookupPropertyListRequest() *LookupPropertyListRequest {
	if x != nil {
		return x.LookupPropertyListRequest
	}
	return nil
}

func (x *InformationRequest) GetAuthPartnerListRequest() *AuthPartnerListRequest {
	if x != nil {
		return x.AuthPartnerListRequest
	}
	return nil
}

func (x *InformationRequest) GetLoginBillingCustomDataRequest() *LoginBillingCustomDataRequest {
	if x != nil {
		return x.LoginBillingCustomDataRequest
	}
	return nil
}

// Request message to search for information.
// One optional field is expected.
type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request identifier.
	// It should be unique to match with operation result.
	Id *uint32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// Optionally restrict matched results by returning the first 'top' records.
	Top *uint32 `protobuf:"varint,2,opt,name=top" json:"top,omitempty"`
	// Search for users.
	UserSearchRequest *UserSearchRequest `protobuf:"bytes,3,opt,name=user_search_request,json=userSearchRequest" json:"user_search_request,omitempty"`
	// Search for customers.
	CustomerSearchRequest *CustomerSearchRequest `protobuf:"bytes,4,opt,name=customer_search_request,json=customerSearchRequest" json:"customer_search_request,omitempty"`
	// Search for sales series.
	SalesSeriesSearchRequest *SalesSeriesSearchRequest `protobuf:"bytes,5,opt,name=sales_series_search_request,json=salesSeriesSearchRequest" json:"sales_series_search_request,omitempty"`
	// Determines whether removed entities are included in search result.
	IncludeRemoved *bool `protobuf:"varint,6,opt,name=include_removed,json=includeRemoved,def=0" json:"include_removed,omitempty"`
}

// Default values for SearchRequest fields.
const (
	Default_SearchRequest_IncludeRemoved = bool(false)
)

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmsapi_1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmsapi_1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_proto_cmsapi_1_proto_rawDescGZIP(), []int{2}
}

func (x *SearchRequest) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *SearchRequest) GetTop() uint32 {
	if x != nil && x.Top != nil {
		return *x.Top
	}
	return 0
}

func (x *SearchRequest) GetUserSearchRequest() *UserSearchRequest {
	if x != nil {
		return x.UserSearchRequest
	}
	return nil
}

func (x *SearchRequest) GetCustomerSearchRequest() *CustomerSearchRequest {
	if x != nil {
		return x.CustomerSearchRequest
	}
	return nil
}

func (x *SearchRequest) GetSalesSeriesSearchRequest() *SalesSeriesSearchRequest {
	if x != nil {
		return x.SalesSeriesSearchRequest
	}
	return nil
}

func (x *SearchRequest) GetIncludeRemoved() bool {
	if x != nil && x.IncludeRemoved != nil {
		return *x.IncludeRemoved
	}
	return Default_SearchRequest_IncludeRemoved
}

// Operation request message.
// One of the request fields is expected.
// Create operations ignore entity id fields (set it to an empty string).
// Update operations use entity id fields as a key to update corresponding entities.
// Also update operations have optional original entity fields (last know information before changes).
// If the original entity is specified then it is used to identify which fields are updated and
// which stay untouched so to update only fields that are different from the provided original.
// Update operation does not fail if some of the updated fields have been changed already.
// This means that if two clients change the same entity field at the same time then the last one is set
// but if two clients change different fields of this entity at the same time then both changes are applied.
type OperationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request identifier.
	// It should be unique to match with operation result.
	Id *uint32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// Clone template or regular user.
	// Supported login domains: trade-routing.
	CloneUser *CloneUser `protobuf:"bytes,2,opt,name=clone_user,json=cloneUser" json:"clone_user,omitempty"`
	// Create customer.
	CreateCustomer *CreateCustomer `protobuf:"bytes,3,opt,name=create_customer,json=createCustomer" json:"create_customer,omitempty"`
	// Update customer.
	UpdateCustomer *UpdateCustomer `protobuf:"bytes,4,opt,name=update_customer,json=updateCustomer" json:"update_customer,omitempty"`
	// Remove customer.
	RemoveCustomer *RemoveCustomer `protobuf:"bytes,5,opt,name=remove_customer,json=removeCustomer" json:"remove_customer,omitempty"`
	// Create user.
	CreateUser *CreateUser `protobuf:"bytes,6,opt,name=create_user,json=createUser" json:"create_user,omitempty"`
	// Update user.
	UpdateUser *UpdateUser `protobuf:"bytes,7,opt,name=update_user,json=updateUser" json:"update_user,omitempty"`
	// Remove user.
	RemoveUser *RemoveUser `protobuf:"bytes,8,opt,name=remove_user,json=removeUser" json:"remove_user,omitempty"`
	// [re-]link user  to a customer.
	LinkUserToCustomer *LinkUserToCustomer `protobuf:"bytes,9,opt,name=link_user_to_customer,json=linkUserToCustomer" json:"link_user_to_customer,omitempty"`
	// Modify the list of user entitlement services.
	ModifyUserEntitlementService *ModifyUserEntitlementService `protobuf:"bytes,10,opt,name=modify_user_entitlement_service,json=modifyUserEntitlementService" json:"modify_user_entitlement_service,omitempty"`
	// Send welcome e-mail to customer.
	SendWelcomeEmail *SendWelcomeEmail `protobuf:"bytes,11,opt,name=send_welcome_email,json=sendWelcomeEmail" json:"send_welcome_email,omitempty"`
	// Restore user.
	RestoreUser *RestoreUser `protobuf:"bytes,12,opt,name=restore_user,json=restoreUser" json:"restore_user,omitempty"`
	// Restore customer.
	RestoreCustomer *RestoreCustomer `protobuf:"bytes,13,opt,name=restore_customer,json=restoreCustomer" json:"restore_customer,omitempty"`
	// Update customer to sales series authorization list operation.
	UpdateCustomerSalesSeriesAuthorizationList *UpdateCustomerSalesSeriesAuthorizationList `protobuf:"bytes,14,opt,name=update_customer_sales_series_authorization_list,json=updateCustomerSalesSeriesAuthorizationList" json:"update_customer_sales_series_authorization_list,omitempty"`
	// Update login exchange member id list.
	// Supported login domains: trade-routing.
	UpdateLoginExchangeMemberIdList *UpdateLoginExchangeMemberIdList `protobuf:"bytes,15,opt,name=update_login_exchange_member_id_list,json=updateLoginExchangeMemberIdList" json:"update_login_exchange_member_id_list,omitempty"`
	// Update Login settings.
	UpdateLoginSettings *UpdateLoginSettings `protobuf:"bytes,16,opt,name=update_login_settings,json=updateLoginSettings" json:"update_login_settings,omitempty"`
	// Activate login operation.
	// Supported login domains: trade-routing.
	ActivateLogin *ActivateLogin `protobuf:"bytes,17,opt,name=activate_login,json=activateLogin" json:"activate_login,omitempty"`
	// Deactivate login operation.
	// Supported login domains: trade-routing.
	DeactivateLogin *DeactivateLogin `protobuf:"bytes,18,opt,name=deactivate_login,json=deactivateLogin" json:"deactivate_login,omitempty"`
	// Send credential reset email.
	// Supported login domains: trade-routing, admin.
	SendCredentialResetEmail *SendCredentialResetEmail `protobuf:"bytes,19,opt,name=send_credential_reset_email,json=sendCredentialResetEmail" json:"send_credential_reset_email,omitempty"`
	// Generate a service security token for a special AuthServer operation.
	// Supported login domains: trade-routing, admin.
	GenerateServiceSecurityToken *GenerateServiceSecurityToken `protobuf:"bytes,20,opt,name=generate_service_security_token,json=generateServiceSecurityToken" json:"generate_service_security_token,omitempty"`
	// Erases current credentials of specified types.
	// Supported login domains: trade-routing, admin.
	EraseCurrentCredentials *EraseCurrentCredentials `protobuf:"bytes,21,opt,name=erase_current_credentials,json=eraseCurrentCredentials" json:"erase_current_credentials,omitempty"`
	// Supported login domains: trade-routing.
	TerminateLoginSession *TerminateLoginSession `protobuf:"bytes,22,opt,name=terminate_login_session,json=terminateLoginSession" json:"terminate_login_session,omitempty"`
	// Update login billing custom data.
	// Supported login domains: trade-routing.
	UpdateLoginBillingCustomData *UpdateLoginBillingCustomData `protobuf:"bytes,23,opt,name=update_login_billing_custom_data,json=updateLoginBillingCustomData" json:"update_login_billing_custom_data,omitempty"`
}

func (x *OperationRequest) Reset() {
	*x = OperationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmsapi_1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationRequest) ProtoMessage() {}

func (x *OperationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmsapi_1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationRequest.ProtoReflect.Descriptor instead.
func (*OperationRequest) Descriptor() ([]byte, []int) {
	return file_proto_cmsapi_1_proto_rawDescGZIP(), []int{3}
}

func (x *OperationRequest) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *OperationRequest) GetCloneUser() *CloneUser {
	if x != nil {
		return x.CloneUser
	}
	return nil
}

func (x *OperationRequest) GetCreateCustomer() *CreateCustomer {
	if x != nil {
		return x.CreateCustomer
	}
	return nil
}

func (x *OperationRequest) GetUpdateCustomer() *UpdateCustomer {
	if x != nil {
		return x.UpdateCustomer
	}
	return nil
}

func (x *OperationRequest) GetRemoveCustomer() *RemoveCustomer {
	if x != nil {
		return x.RemoveCustomer
	}
	return nil
}

func (x *OperationRequest) GetCreateUser() *CreateUser {
	if x != nil {
		return x.CreateUser
	}
	return nil
}

func (x *OperationRequest) GetUpdateUser() *UpdateUser {
	if x != nil {
		return x.UpdateUser
	}
	return nil
}

func (x *OperationRequest) GetRemoveUser() *RemoveUser {
	if x != nil {
		return x.RemoveUser
	}
	return nil
}

func (x *OperationRequest) GetLinkUserToCustomer() *LinkUserToCustomer {
	if x != nil {
		return x.LinkUserToCustomer
	}
	return nil
}

func (x *OperationRequest) GetModifyUserEntitlementService() *ModifyUserEntitlementService {
	if x != nil {
		return x.ModifyUserEntitlementService
	}
	return nil
}

func (x *OperationRequest) GetSendWelcomeEmail() *SendWelcomeEmail {
	if x != nil {
		return x.SendWelcomeEmail
	}
	return nil
}

func (x *OperationRequest) GetRestoreUser() *RestoreUser {
	if x != nil {
		return x.RestoreUser
	}
	return nil
}

func (x *OperationRequest) GetRestoreCustomer() *RestoreCustomer {
	if x != nil {
		return x.RestoreCustomer
	}
	return nil
}

func (x *OperationRequest) GetUpdateCustomerSalesSeriesAuthorizationList() *UpdateCustomerSalesSeriesAuthorizationList {
	if x != nil {
		return x.UpdateCustomerSalesSeriesAuthorizationList
	}
	return nil
}

func (x *OperationRequest) GetUpdateLoginExchangeMemberIdList() *UpdateLoginExchangeMemberIdList {
	if x != nil {
		return x.UpdateLoginExchangeMemberIdList
	}
	return nil
}

func (x *OperationRequest) GetUpdateLoginSettings() *UpdateLoginSettings {
	if x != nil {
		return x.UpdateLoginSettings
	}
	return nil
}

func (x *OperationRequest) GetActivateLogin() *ActivateLogin {
	if x != nil {
		return x.ActivateLogin
	}
	return nil
}

func (x *OperationRequest) GetDeactivateLogin() *DeactivateLogin {
	if x != nil {
		return x.DeactivateLogin
	}
	return nil
}

func (x *OperationRequest) GetSendCredentialResetEmail() *SendCredentialResetEmail {
	if x != nil {
		return x.SendCredentialResetEmail
	}
	return nil
}

func (x *OperationRequest) GetGenerateServiceSecurityToken() *GenerateServiceSecurityToken {
	if x != nil {
		return x.GenerateServiceSecurityToken
	}
	return nil
}

func (x *OperationRequest) GetEraseCurrentCredentials() *EraseCurrentCredentials {
	if x != nil {
		return x.EraseCurrentCredentials
	}
	return nil
}

func (x *OperationRequest) GetTerminateLoginSession() *TerminateLoginSession {
	if x != nil {
		return x.TerminateLoginSession
	}
	return nil
}

func (x *OperationRequest) GetUpdateLoginBillingCustomData() *UpdateLoginBillingCustomData {
	if x != nil {
		return x.UpdateLoginBillingCustomData
	}
	return nil
}

// Server to Client message.
type ServerMessage struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Session level messages results.
	LogonResult                *LogonResult                `protobuf:"bytes,1,opt,name=logon_result,json=logonResult" json:"logon_result,omitempty"`
	LoggedOff                  *LoggedOff                  `protobuf:"bytes,2,opt,name=logged_off,json=loggedOff" json:"logged_off,omitempty"`
	RestoreOrJoinSessionResult *RestoreOrJoinSessionResult `protobuf:"bytes,8,opt,name=restore_or_join_session_result,json=restoreOrJoinSessionResult" json:"restore_or_join_session_result,omitempty"`
	ObtainDemoAccessResult     *ObtainDemoAccessResult     `protobuf:"bytes,9,opt,name=obtain_demo_access_result,json=obtainDemoAccessResult" json:"obtain_demo_access_result,omitempty"`
	// Result of information request.
	InformationResult []*InformationResult `protobuf:"bytes,3,rep,name=information_result,json=informationResult" json:"information_result,omitempty"`
	// Result of search request.
	SearchResult []*SearchResult `protobuf:"bytes,4,rep,name=search_result,json=searchResult" json:"search_result,omitempty"`
	// Result of operation request.
	OperationResult []*OperationResult `protobuf:"bytes,5,rep,name=operation_result,json=operationResult" json:"operation_result,omitempty"`
	// Trade routing operation results.
	TradeRoutingResult []*TradeRoutingResult `protobuf:"bytes,6,rep,name=trade_routing_result,json=tradeRoutingResult" json:"trade_routing_result,omitempty"`
	// Message from server.
	UserMessage []*UserMessage `protobuf:"bytes,7,rep,name=user_message,json=userMessage" json:"user_message,omitempty"`
	// Ping request.
	Ping *Ping `protobuf:"bytes,10,opt,name=ping" json:"ping,omitempty"`
	// Pong message in response to client Ping request.
	Pong *Pong `protobuf:"bytes,11,opt,name=pong" json:"pong,omitempty"`
}

func (x *ServerMessage) Reset() {
	*x = ServerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmsapi_1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMessage) ProtoMessage() {}

func (x *ServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmsapi_1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMessage.ProtoReflect.Descriptor instead.
func (*ServerMessage) Descriptor() ([]byte, []int) {
	return file_proto_cmsapi_1_proto_rawDescGZIP(), []int{4}
}

var extRange_ServerMessage = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 199},
}

// Deprecated: Use ServerMessage.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*ServerMessage) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_ServerMessage
}

func (x *ServerMessage) GetLogonResult() *LogonResult {
	if x != nil {
		return x.LogonResult
	}
	return nil
}

func (x *ServerMessage) GetLoggedOff() *LoggedOff {
	if x != nil {
		return x.LoggedOff
	}
	return nil
}

func (x *ServerMessage) GetRestoreOrJoinSessionResult() *RestoreOrJoinSessionResult {
	if x != nil {
		return x.RestoreOrJoinSessionResult
	}
	return nil
}

func (x *ServerMessage) GetObtainDemoAccessResult() *ObtainDemoAccessResult {
	if x != nil {
		return x.ObtainDemoAccessResult
	}
	return nil
}

func (x *ServerMessage) GetInformationResult() []*InformationResult {
	if x != nil {
		return x.InformationResult
	}
	return nil
}

func (x *ServerMessage) GetSearchResult() []*SearchResult {
	if x != nil {
		return x.SearchResult
	}
	return nil
}

func (x *ServerMessage) GetOperationResult() []*OperationResult {
	if x != nil {
		return x.OperationResult
	}
	return nil
}

func (x *ServerMessage) GetTradeRoutingResult() []*TradeRoutingResult {
	if x != nil {
		return x.TradeRoutingResult
	}
	return nil
}

func (x *ServerMessage) GetUserMessage() []*UserMessage {
	if x != nil {
		return x.UserMessage
	}
	return nil
}

func (x *ServerMessage) GetPing() *Ping {
	if x != nil {
		return x.Ping
	}
	return nil
}

func (x *ServerMessage) GetPong() *Pong {
	if x != nil {
		return x.Pong
	}
	return nil
}

// Result of information request.
// Information is filtered according to permissions of logged-in user (or 'on-behalf-of' user).
type InformationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of a corresponding request.
	RequestId *uint32 `protobuf:"varint,1,req,name=request_id,json=requestId" json:"request_id,omitempty"`
	// Operation status.
	// This field is associated with common_1.OperationStatus enum.
	OperationStatus *uint32 `protobuf:"varint,2,req,name=operation_status,json=operationStatus" json:"operation_status,omitempty"`
	// Failure details.
	ErrorMessage *Text `protobuf:"bytes,3,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// User information.
	User *User `protobuf:"bytes,4,opt,name=user" json:"user,omitempty"`
	// List of user entitlement services.
	UserEntitlementService []*UserEntitlementService `protobuf:"bytes,5,rep,name=user_entitlement_service,json=userEntitlementService" json:"user_entitlement_service,omitempty"`
	// Entitlement categories list.
	EntitlementCategory []*EntitlementCategory `protobuf:"bytes,6,rep,name=entitlement_category,json=entitlementCategory" json:"entitlement_category,omitempty"`
	// Entitlement service list.
	EntitlementService []*EntitlementService `protobuf:"bytes,7,rep,name=entitlement_service,json=entitlementService" json:"entitlement_service,omitempty"`
	// Customer.
	Customer *Customer `protobuf:"bytes,8,opt,name=customer" json:"customer,omitempty"`
	// Get unique username result
	UniqueUsernameResult *UniqueUsernameResult `protobuf:"bytes,9,opt,name=unique_username_result,json=uniqueUsernameResult" json:"unique_username_result,omitempty"`
	// Customer to sales series authorization list result message.
	CustomerSalesSeriesAuthorizationListResult *CustomerSalesSeriesAuthorizationListResult `protobuf:"bytes,10,opt,name=customer_sales_series_authorization_list_result,json=customerSalesSeriesAuthorizationListResult" json:"customer_sales_series_authorization_list_result,omitempty"`
	// Result of LoginSettingsRequest.
	LoginSettingsResult *LoginSettingsResult `protobuf:"bytes,11,opt,name=login_settings_result,json=loginSettingsResult" json:"login_settings_result,omitempty"`
	// Result of LoginExchangeMemberIdListRequest
	LoginExchangeMemberIdListResult *LoginExchangeMemberIdListResult `protobuf:"bytes,12,opt,name=login_exchange_member_id_list_result,json=loginExchangeMemberIdListResult" json:"login_exchange_member_id_list_result,omitempty"`
	// Result of lookup_property_list_request.
	LookupPropertyListResult *LookupPropertyListResult `protobuf:"bytes,13,opt,name=lookup_property_list_result,json=lookupPropertyListResult" json:"lookup_property_list_result,omitempty"`
	// Result of AuthPartnerListRequest.
	AuthPartnerListResult *AuthPartnerListResult `protobuf:"bytes,14,opt,name=auth_partner_list_result,json=authPartnerListResult" json:"auth_partner_list_result,omitempty"`
	// Result of LoginBillingCustomDataRequest.
	LoginBillingCustomDataResult *LoginBillingCustomDataResult `protobuf:"bytes,15,opt,name=login_billing_custom_data_result,json=loginBillingCustomDataResult" json:"login_billing_custom_data_result,omitempty"`
}

func (x *InformationResult) Reset() {
	*x = InformationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmsapi_1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InformationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InformationResult) ProtoMessage() {}

func (x *InformationResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmsapi_1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InformationResult.ProtoReflect.Descriptor instead.
func (*InformationResult) Descriptor() ([]byte, []int) {
	return file_proto_cmsapi_1_proto_rawDescGZIP(), []int{5}
}

func (x *InformationResult) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *InformationResult) GetOperationStatus() uint32 {
	if x != nil && x.OperationStatus != nil {
		return *x.OperationStatus
	}
	return 0
}

func (x *InformationResult) GetErrorMessage() *Text {
	if x != nil {
		return x.ErrorMessage
	}
	return nil
}

func (x *InformationResult) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *InformationResult) GetUserEntitlementService() []*UserEntitlementService {
	if x != nil {
		return x.UserEntitlementService
	}
	return nil
}

func (x *InformationResult) GetEntitlementCategory() []*EntitlementCategory {
	if x != nil {
		return x.EntitlementCategory
	}
	return nil
}

func (x *InformationResult) GetEntitlementService() []*EntitlementService {
	if x != nil {
		return x.EntitlementService
	}
	return nil
}

func (x *InformationResult) GetCustomer() *Customer {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *InformationResult) GetUniqueUsernameResult() *UniqueUsernameResult {
	if x != nil {
		return x.UniqueUsernameResult
	}
	return nil
}

func (x *InformationResult) GetCustomerSalesSeriesAuthorizationListResult() *CustomerSalesSeriesAuthorizationListResult {
	if x != nil {
		return x.CustomerSalesSeriesAuthorizationListResult
	}
	return nil
}

func (x *InformationResult) GetLoginSettingsResult() *LoginSettingsResult {
	if x != nil {
		return x.LoginSettingsResult
	}
	return nil
}

func (x *InformationResult) GetLoginExchangeMemberIdListResult() *LoginExchangeMemberIdListResult {
	if x != nil {
		return x.LoginExchangeMemberIdListResult
	}
	return nil
}

func (x *InformationResult) GetLookupPropertyListResult() *LookupPropertyListResult {
	if x != nil {
		return x.LookupPropertyListResult
	}
	return nil
}

func (x *InformationResult) GetAuthPartnerListResult() *AuthPartnerListResult {
	if x != nil {
		return x.AuthPartnerListResult
	}
	return nil
}

func (x *InformationResult) GetLoginBillingCustomDataResult() *LoginBillingCustomDataResult {
	if x != nil {
		return x.LoginBillingCustomDataResult
	}
	return nil
}

// Search operation result.
type SearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of a corresponding request.
	RequestId *uint32 `protobuf:"varint,1,req,name=request_id,json=requestId" json:"request_id,omitempty"`
	// Operation status.
	// This field is associated with common_1.OperationStatus enum.
	OperationStatus *uint32 `protobuf:"varint,2,req,name=operation_status,json=operationStatus" json:"operation_status,omitempty"`
	// This flag is set to True if all search results are sent
	// and nothing was filtered out by 'top' parameter.
	IsComplete *bool `protobuf:"varint,3,opt,name=is_complete,json=isComplete,def=1" json:"is_complete,omitempty"`
	// Failure details.
	ErrorMessage *Text `protobuf:"bytes,4,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// User search result records.
	UserRecord []*UserSearchResultRecord `protobuf:"bytes,5,rep,name=user_record,json=userRecord" json:"user_record,omitempty"`
	// Customer search result records.
	CustomerRecord []*CustomerSearchResultRecord `protobuf:"bytes,6,rep,name=customer_record,json=customerRecord" json:"customer_record,omitempty"`
	// List of found sales series.
	SalesSeriesRecord []*SalesSeriesSearchResultRecord `protobuf:"bytes,7,rep,name=sales_series_record,json=salesSeriesRecord" json:"sales_series_record,omitempty"`
}

// Default values for SearchResult fields.
const (
	Default_SearchResult_IsComplete = bool(true)
)

func (x *SearchResult) Reset() {
	*x = SearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmsapi_1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResult) ProtoMessage() {}

func (x *SearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmsapi_1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResult.ProtoReflect.Descriptor instead.
func (*SearchResult) Descriptor() ([]byte, []int) {
	return file_proto_cmsapi_1_proto_rawDescGZIP(), []int{6}
}

func (x *SearchResult) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *SearchResult) GetOperationStatus() uint32 {
	if x != nil && x.OperationStatus != nil {
		return *x.OperationStatus
	}
	return 0
}

func (x *SearchResult) GetIsComplete() bool {
	if x != nil && x.IsComplete != nil {
		return *x.IsComplete
	}
	return Default_SearchResult_IsComplete
}

func (x *SearchResult) GetErrorMessage() *Text {
	if x != nil {
		return x.ErrorMessage
	}
	return nil
}

func (x *SearchResult) GetUserRecord() []*UserSearchResultRecord {
	if x != nil {
		return x.UserRecord
	}
	return nil
}

func (x *SearchResult) GetCustomerRecord() []*CustomerSearchResultRecord {
	if x != nil {
		return x.CustomerRecord
	}
	return nil
}

func (x *SearchResult) GetSalesSeriesRecord() []*SalesSeriesSearchResultRecord {
	if x != nil {
		return x.SalesSeriesRecord
	}
	return nil
}

// Result of operation request.
type OperationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of a corresponding request.
	RequestId *uint32 `protobuf:"varint,1,req,name=request_id,json=requestId" json:"request_id,omitempty"`
	// Operation status.
	// This field is associated with common_1.OperationStatus enum.
	OperationStatus *uint32 `protobuf:"varint,2,req,name=operation_status,json=operationStatus" json:"operation_status,omitempty"`
	// Failure details.
	ErrorMessage *Text `protobuf:"bytes,3,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// Clone user result.
	CloneUserResult *CloneUserResult `protobuf:"bytes,4,opt,name=clone_user_result,json=cloneUserResult" json:"clone_user_result,omitempty"`
	// Create customer result.
	CreateCustomerResult *CreateCustomerResult `protobuf:"bytes,5,opt,name=create_customer_result,json=createCustomerResult" json:"create_customer_result,omitempty"`
	// Update customer result.
	UpdateCustomerResult *UpdateCustomerResult `protobuf:"bytes,6,opt,name=update_customer_result,json=updateCustomerResult" json:"update_customer_result,omitempty"`
	// Remove customer result.
	RemoveCustomerResult *RemoveCustomerResult `protobuf:"bytes,7,opt,name=remove_customer_result,json=removeCustomerResult" json:"remove_customer_result,omitempty"`
	// Create user result.
	CreateUserResult *CreateUserResult `protobuf:"bytes,8,opt,name=create_user_result,json=createUserResult" json:"create_user_result,omitempty"`
	// Update user result.
	UpdateUserResult *UpdateUserResult `protobuf:"bytes,9,opt,name=update_user_result,json=updateUserResult" json:"update_user_result,omitempty"`
	// Remove user result.
	RemoveUserResult *RemoveUserResult `protobuf:"bytes,10,opt,name=remove_user_result,json=removeUserResult" json:"remove_user_result,omitempty"`
	// [re-]link user to customer result.
	LinkUserToCustomerResult *LinkUserToCustomerResult `protobuf:"bytes,11,opt,name=link_user_to_customer_result,json=linkUserToCustomerResult" json:"link_user_to_customer_result,omitempty"`
	// Modify user entitlement service result.
	ModifyUserEntitlementServiceResult *ModifyUserEntitlementServiceResult `protobuf:"bytes,12,opt,name=modify_user_entitlement_service_result,json=modifyUserEntitlementServiceResult" json:"modify_user_entitlement_service_result,omitempty"`
	// Send welcome e-mail result.
	SendWelcomeEmailResult *SendWelcomeEmailResult `protobuf:"bytes,13,opt,name=send_welcome_email_result,json=sendWelcomeEmailResult" json:"send_welcome_email_result,omitempty"`
	// Restore user result.
	RestoreUserResult *RestoreUserResult `protobuf:"bytes,14,opt,name=restore_user_result,json=restoreUserResult" json:"restore_user_result,omitempty"`
	// Restore customer result.
	RestoreCustomerResult *RestoreCustomerResult `protobuf:"bytes,15,opt,name=restore_customer_result,json=restoreCustomerResult" json:"restore_customer_result,omitempty"`
	// Result of customer to sales series authorization list update.
	UpdateCustomerSalesSeriesAuthorizationListResult *UpdateCustomerSalesSeriesAuthorizationListResult `protobuf:"bytes,16,opt,name=update_customer_sales_series_authorization_list_result,json=updateCustomerSalesSeriesAuthorizationListResult" json:"update_customer_sales_series_authorization_list_result,omitempty"`
	// Result of UpdateLoginExchangeMemberIdList.
	UpdateLoginExchangeMemberIdListResult *UpdateLoginExchangeMemberIdListResult `protobuf:"bytes,17,opt,name=update_login_exchange_member_id_list_result,json=updateLoginExchangeMemberIdListResult" json:"update_login_exchange_member_id_list_result,omitempty"`
	// Result of UpdateLoginSettings.
	UpdateLoginSettingsResult *UpdateLoginSettingsResult `protobuf:"bytes,18,opt,name=update_login_settings_result,json=updateLoginSettingsResult" json:"update_login_settings_result,omitempty"`
	// Result of ActivateLogin
	ActivateLoginResult *ActivateLoginResult `protobuf:"bytes,19,opt,name=activate_login_result,json=activateLoginResult" json:"activate_login_result,omitempty"`
	// Result of DeactivateLogin
	DeactivateLoginResult *DeactivateLoginResult `protobuf:"bytes,20,opt,name=deactivate_login_result,json=deactivateLoginResult" json:"deactivate_login_result,omitempty"`
	// Result of send credential reset email.
	SendCredentialResetEmailResult *SendCredentialResetEmailResult `protobuf:"bytes,21,opt,name=send_credential_reset_email_result,json=sendCredentialResetEmailResult" json:"send_credential_reset_email_result,omitempty"`
	// Result of generate a service security token for a special AuthServer operation.
	GenerateServiceSecurityTokenResult *GenerateServiceSecurityTokenResult `protobuf:"bytes,22,opt,name=generate_service_security_token_result,json=generateServiceSecurityTokenResult" json:"generate_service_security_token_result,omitempty"`
	// Result of EraseCurrentCredentials.
	EraseCurrentCredentialsResult *EraseCurrentCredentialsResult `protobuf:"bytes,23,opt,name=erase_current_credentials_result,json=eraseCurrentCredentialsResult" json:"erase_current_credentials_result,omitempty"`
	TerminateLoginSessionResult   *TerminateLoginSessionResult   `protobuf:"bytes,24,opt,name=terminate_login_session_result,json=terminateLoginSessionResult" json:"terminate_login_session_result,omitempty"`
	// Result of UpdateLoginBillingCustomData.
	UpdateLoginBillingCustomDataResult *UpdateLoginBillingCustomDataResult `protobuf:"bytes,25,opt,name=update_login_billing_custom_data_result,json=updateLoginBillingCustomDataResult" json:"update_login_billing_custom_data_result,omitempty"`
}

func (x *OperationResult) Reset() {
	*x = OperationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmsapi_1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationResult) ProtoMessage() {}

func (x *OperationResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmsapi_1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationResult.ProtoReflect.Descriptor instead.
func (*OperationResult) Descriptor() ([]byte, []int) {
	return file_proto_cmsapi_1_proto_rawDescGZIP(), []int{7}
}

func (x *OperationResult) GetRequestId() uint32 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *OperationResult) GetOperationStatus() uint32 {
	if x != nil && x.OperationStatus != nil {
		return *x.OperationStatus
	}
	return 0
}

func (x *OperationResult) GetErrorMessage() *Text {
	if x != nil {
		return x.ErrorMessage
	}
	return nil
}

func (x *OperationResult) GetCloneUserResult() *CloneUserResult {
	if x != nil {
		return x.CloneUserResult
	}
	return nil
}

func (x *OperationResult) GetCreateCustomerResult() *CreateCustomerResult {
	if x != nil {
		return x.CreateCustomerResult
	}
	return nil
}

func (x *OperationResult) GetUpdateCustomerResult() *UpdateCustomerResult {
	if x != nil {
		return x.UpdateCustomerResult
	}
	return nil
}

func (x *OperationResult) GetRemoveCustomerResult() *RemoveCustomerResult {
	if x != nil {
		return x.RemoveCustomerResult
	}
	return nil
}

func (x *OperationResult) GetCreateUserResult() *CreateUserResult {
	if x != nil {
		return x.CreateUserResult
	}
	return nil
}

func (x *OperationResult) GetUpdateUserResult() *UpdateUserResult {
	if x != nil {
		return x.UpdateUserResult
	}
	return nil
}

func (x *OperationResult) GetRemoveUserResult() *RemoveUserResult {
	if x != nil {
		return x.RemoveUserResult
	}
	return nil
}

func (x *OperationResult) GetLinkUserToCustomerResult() *LinkUserToCustomerResult {
	if x != nil {
		return x.LinkUserToCustomerResult
	}
	return nil
}

func (x *OperationResult) GetModifyUserEntitlementServiceResult() *ModifyUserEntitlementServiceResult {
	if x != nil {
		return x.ModifyUserEntitlementServiceResult
	}
	return nil
}

func (x *OperationResult) GetSendWelcomeEmailResult() *SendWelcomeEmailResult {
	if x != nil {
		return x.SendWelcomeEmailResult
	}
	return nil
}

func (x *OperationResult) GetRestoreUserResult() *RestoreUserResult {
	if x != nil {
		return x.RestoreUserResult
	}
	return nil
}

func (x *OperationResult) GetRestoreCustomerResult() *RestoreCustomerResult {
	if x != nil {
		return x.RestoreCustomerResult
	}
	return nil
}

func (x *OperationResult) GetUpdateCustomerSalesSeriesAuthorizationListResult() *UpdateCustomerSalesSeriesAuthorizationListResult {
	if x != nil {
		return x.UpdateCustomerSalesSeriesAuthorizationListResult
	}
	return nil
}

func (x *OperationResult) GetUpdateLoginExchangeMemberIdListResult() *UpdateLoginExchangeMemberIdListResult {
	if x != nil {
		return x.UpdateLoginExchangeMemberIdListResult
	}
	return nil
}

func (x *OperationResult) GetUpdateLoginSettingsResult() *UpdateLoginSettingsResult {
	if x != nil {
		return x.UpdateLoginSettingsResult
	}
	return nil
}

func (x *OperationResult) GetActivateLoginResult() *ActivateLoginResult {
	if x != nil {
		return x.ActivateLoginResult
	}
	return nil
}

func (x *OperationResult) GetDeactivateLoginResult() *DeactivateLoginResult {
	if x != nil {
		return x.DeactivateLoginResult
	}
	return nil
}

func (x *OperationResult) GetSendCredentialResetEmailResult() *SendCredentialResetEmailResult {
	if x != nil {
		return x.SendCredentialResetEmailResult
	}
	return nil
}

func (x *OperationResult) GetGenerateServiceSecurityTokenResult() *GenerateServiceSecurityTokenResult {
	if x != nil {
		return x.GenerateServiceSecurityTokenResult
	}
	return nil
}

func (x *OperationResult) GetEraseCurrentCredentialsResult() *EraseCurrentCredentialsResult {
	if x != nil {
		return x.EraseCurrentCredentialsResult
	}
	return nil
}

func (x *OperationResult) GetTerminateLoginSessionResult() *TerminateLoginSessionResult {
	if x != nil {
		return x.TerminateLoginSessionResult
	}
	return nil
}

func (x *OperationResult) GetUpdateLoginBillingCustomDataResult() *UpdateLoginBillingCustomDataResult {
	if x != nil {
		return x.UpdateLoginBillingCustomDataResult
	}
	return nil
}

// Send welcome e-mail operation.
type SendWelcomeEmail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Customer id of a recipient.
	CustomerId *string `protobuf:"bytes,1,opt,name=customer_id,json=customerId" json:"customer_id,omitempty"`
	// Optional list of logins to be included into this e-mail.
	// All customer's system logins are included if omitted.
	LoginId []string `protobuf:"bytes,2,rep,name=login_id,json=loginId" json:"login_id,omitempty"`
}

func (x *SendWelcomeEmail) Reset() {
	*x = SendWelcomeEmail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmsapi_1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendWelcomeEmail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendWelcomeEmail) ProtoMessage() {}

func (x *SendWelcomeEmail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmsapi_1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendWelcomeEmail.ProtoReflect.Descriptor instead.
func (*SendWelcomeEmail) Descriptor() ([]byte, []int) {
	return file_proto_cmsapi_1_proto_rawDescGZIP(), []int{8}
}

func (x *SendWelcomeEmail) GetCustomerId() string {
	if x != nil && x.CustomerId != nil {
		return *x.CustomerId
	}
	return ""
}

func (x *SendWelcomeEmail) GetLoginId() []string {
	if x != nil {
		return x.LoginId
	}
	return nil
}

// Result of send welcome e-mail operation.
type SendWelcomeEmailResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SendWelcomeEmailResult) Reset() {
	*x = SendWelcomeEmailResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmsapi_1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendWelcomeEmailResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendWelcomeEmailResult) ProtoMessage() {}

func (x *SendWelcomeEmailResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmsapi_1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendWelcomeEmailResult.ProtoReflect.Descriptor instead.
func (*SendWelcomeEmailResult) Descriptor() ([]byte, []int) {
	return file_proto_cmsapi_1_proto_rawDescGZIP(), []int{9}
}

// Send credential reset e-mail to a customer.
type SendCredentialResetEmail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] customer id of a recipient.
	CustomerId *string `protobuf:"bytes,1,opt,name=customer_id,json=customerId" json:"customer_id,omitempty"`
	// [required] A login linked to a customer for which the reset is requested.
	// Only trade-routing logins are supported now.
	LoginId *string `protobuf:"bytes,2,opt,name=login_id,json=loginId" json:"login_id,omitempty"`
	// List of special operations that are requested for this login.
	// This filed is associated with common_1.AuthServerSpecialOperation enum.
	Operation []uint32 `protobuf:"varint,3,rep,name=operation" json:"operation,omitempty"`
}

func (x *SendCredentialResetEmail) Reset() {
	*x = SendCredentialResetEmail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmsapi_1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendCredentialResetEmail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendCredentialResetEmail) ProtoMessage() {}

func (x *SendCredentialResetEmail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmsapi_1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendCredentialResetEmail.ProtoReflect.Descriptor instead.
func (*SendCredentialResetEmail) Descriptor() ([]byte, []int) {
	return file_proto_cmsapi_1_proto_rawDescGZIP(), []int{10}
}

func (x *SendCredentialResetEmail) GetCustomerId() string {
	if x != nil && x.CustomerId != nil {
		return *x.CustomerId
	}
	return ""
}

func (x *SendCredentialResetEmail) GetLoginId() string {
	if x != nil && x.LoginId != nil {
		return *x.LoginId
	}
	return ""
}

func (x *SendCredentialResetEmail) GetOperation() []uint32 {
	if x != nil {
		return x.Operation
	}
	return nil
}

// Result of send e-mail operation.
type SendCredentialResetEmailResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SendCredentialResetEmailResult) Reset() {
	*x = SendCredentialResetEmailResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmsapi_1_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendCredentialResetEmailResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendCredentialResetEmailResult) ProtoMessage() {}

func (x *SendCredentialResetEmailResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmsapi_1_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendCredentialResetEmailResult.ProtoReflect.Descriptor instead.
func (*SendCredentialResetEmailResult) Descriptor() ([]byte, []int) {
	return file_proto_cmsapi_1_proto_rawDescGZIP(), []int{11}
}

type GenerateServiceSecurityToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Generate SST for this login.
	// Only trade-routing logins are supported now.
	LoginId *string `protobuf:"bytes,1,opt,name=login_id,json=loginId" json:"login_id,omitempty"`
	// List of special operations that are requested for this login.
	// This filed is associated with common_1.AuthServerSpecialOperation enum.
	Operation []uint32 `protobuf:"varint,2,rep,name=operation" json:"operation,omitempty"`
}

func (x *GenerateServiceSecurityToken) Reset() {
	*x = GenerateServiceSecurityToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmsapi_1_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateServiceSecurityToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateServiceSecurityToken) ProtoMessage() {}

func (x *GenerateServiceSecurityToken) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmsapi_1_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateServiceSecurityToken.ProtoReflect.Descriptor instead.
func (*GenerateServiceSecurityToken) Descriptor() ([]byte, []int) {
	return file_proto_cmsapi_1_proto_rawDescGZIP(), []int{12}
}

func (x *GenerateServiceSecurityToken) GetLoginId() string {
	if x != nil && x.LoginId != nil {
		return *x.LoginId
	}
	return ""
}

func (x *GenerateServiceSecurityToken) GetOperation() []uint32 {
	if x != nil {
		return x.Operation
	}
	return nil
}

type GenerateServiceSecurityTokenResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Generated token.
	SecurityToken *string `protobuf:"bytes,1,opt,name=security_token,json=securityToken" json:"security_token,omitempty"`
	// URL that can be visited by a client to execute special operations using
	// generated token.
	Url *string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
}

func (x *GenerateServiceSecurityTokenResult) Reset() {
	*x = GenerateServiceSecurityTokenResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmsapi_1_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateServiceSecurityTokenResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateServiceSecurityTokenResult) ProtoMessage() {}

func (x *GenerateServiceSecurityTokenResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmsapi_1_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateServiceSecurityTokenResult.ProtoReflect.Descriptor instead.
func (*GenerateServiceSecurityTokenResult) Descriptor() ([]byte, []int) {
	return file_proto_cmsapi_1_proto_rawDescGZIP(), []int{13}
}

func (x *GenerateServiceSecurityTokenResult) GetSecurityToken() string {
	if x != nil && x.SecurityToken != nil {
		return *x.SecurityToken
	}
	return ""
}

func (x *GenerateServiceSecurityTokenResult) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

// Ping request which can be initiated by any side to ensure connection is alive.
// Both client and server sides must respond such request with Pong.
type Ping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token routed back in Pong response.
	Token *string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	// UTC time when this request was composed. Used for network latency diagnostics.
	PingUtcTime *int64 `protobuf:"zigzag64,2,req,name=ping_utc_time,json=pingUtcTime" json:"ping_utc_time,omitempty"`
}

func (x *Ping) Reset() {
	*x = Ping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmsapi_1_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping) ProtoMessage() {}

func (x *Ping) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmsapi_1_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping.ProtoReflect.Descriptor instead.
func (*Ping) Descriptor() ([]byte, []int) {
	return file_proto_cmsapi_1_proto_rawDescGZIP(), []int{14}
}

func (x *Ping) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

func (x *Ping) GetPingUtcTime() int64 {
	if x != nil && x.PingUtcTime != nil {
		return *x.PingUtcTime
	}
	return 0
}

// Pong response which must be sent in response on Ping request.
type Pong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token passed in Ping request.
	Token *string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	// Corresponding value from Ping request.
	PingUtcTime *int64 `protobuf:"zigzag64,2,req,name=ping_utc_time,json=pingUtcTime" json:"ping_utc_time,omitempty"`
	// UTC time when this response was composed.
	PongUtcTime *int64 `protobuf:"zigzag64,3,req,name=pong_utc_time,json=pongUtcTime" json:"pong_utc_time,omitempty"`
}

func (x *Pong) Reset() {
	*x = Pong{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmsapi_1_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pong) ProtoMessage() {}

func (x *Pong) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmsapi_1_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pong.ProtoReflect.Descriptor instead.
func (*Pong) Descriptor() ([]byte, []int) {
	return file_proto_cmsapi_1_proto_rawDescGZIP(), []int{15}
}

func (x *Pong) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

func (x *Pong) GetPingUtcTime() int64 {
	if x != nil && x.PingUtcTime != nil {
		return *x.PingUtcTime
	}
	return 0
}

func (x *Pong) GetPongUtcTime() int64 {
	if x != nil && x.PongUtcTime != nil {
		return *x.PongUtcTime
	}
	return 0
}

// Request for list of authentication partners.
type AuthPartnerListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AuthPartnerListRequest) Reset() {
	*x = AuthPartnerListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmsapi_1_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthPartnerListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthPartnerListRequest) ProtoMessage() {}

func (x *AuthPartnerListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmsapi_1_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthPartnerListRequest.ProtoReflect.Descriptor instead.
func (*AuthPartnerListRequest) Descriptor() ([]byte, []int) {
	return file_proto_cmsapi_1_proto_rawDescGZIP(), []int{16}
}

// Reply to AuthPartnerListRequest.
type AuthPartnerListResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthPartner []*AuthPartner `protobuf:"bytes,1,rep,name=auth_partner,json=authPartner" json:"auth_partner,omitempty"`
}

func (x *AuthPartnerListResult) Reset() {
	*x = AuthPartnerListResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmsapi_1_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthPartnerListResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthPartnerListResult) ProtoMessage() {}

func (x *AuthPartnerListResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmsapi_1_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthPartnerListResult.ProtoReflect.Descriptor instead.
func (*AuthPartnerListResult) Descriptor() ([]byte, []int) {
	return file_proto_cmsapi_1_proto_rawDescGZIP(), []int{17}
}

func (x *AuthPartnerListResult) GetAuthPartner() []*AuthPartner {
	if x != nil {
		return x.AuthPartner
	}
	return nil
}

// Information about authentication partner.
type AuthPartner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [required] Partner's ID.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Partner's display name.
	DisplayName *string `protobuf:"bytes,2,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	// List of brokerage (FCM) IDs the partner enabled for.
	BrokerageId []string `protobuf:"bytes,3,rep,name=brokerage_id,json=brokerageId" json:"brokerage_id,omitempty"`
}

func (x *AuthPartner) Reset() {
	*x = AuthPartner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cmsapi_1_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthPartner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthPartner) ProtoMessage() {}

func (x *AuthPartner) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cmsapi_1_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthPartner.ProtoReflect.Descriptor instead.
func (*AuthPartner) Descriptor() ([]byte, []int) {
	return file_proto_cmsapi_1_proto_rawDescGZIP(), []int{18}
}

func (x *AuthPartner) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *AuthPartner) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *AuthPartner) GetBrokerageId() []string {
	if x != nil {
		return x.BrokerageId
	}
	return nil
}

var File_proto_cmsapi_1_proto protoreflect.FileDescriptor

var file_proto_cmsapi_1_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x5f, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x63, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x5f, 0x31,
	0x1a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x14, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x81, 0x05, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x6e, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x6f, 0x6e, 0x12,
	0x28, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x6f, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x66,
	0x66, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x6f, 0x66, 0x66, 0x12, 0x55, 0x0a, 0x17, 0x72, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6f, 0x72, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x72, 0x4a,
	0x6f, 0x69, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x72, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x4f, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x48, 0x0a, 0x12, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x6d, 0x6f, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x44, 0x65,
	0x6d, 0x6f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x10, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e,
	0x44, 0x65, 0x6d, 0x6f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4d, 0x0a, 0x13, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6d, 0x73, 0x61, 0x70, 0x69,
	0x5f, 0x31, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x5f, 0x31, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x11, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x5f, 0x31, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x57, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x13, 0x74, 0x72, 0x61, 0x64, 0x65, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x70,
	0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6d, 0x73, 0x61,
	0x70, 0x69, 0x5f, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12,
	0x22, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x63, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x5f, 0x31, 0x2e, 0x50, 0x6f, 0x6e, 0x67, 0x52, 0x04, 0x70,
	0x6f, 0x6e, 0x67, 0x2a, 0x05, 0x08, 0x64, 0x10, 0xc8, 0x01, 0x22, 0xfa, 0x0a, 0x0a, 0x12, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x45, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x70, 0x0a, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1d, 0x75, 0x73, 0x65,
	0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x73, 0x0a, 0x21, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x1e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x63, 0x0a, 0x1b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x19, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x70, 0x0a, 0x20, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1d, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x61, 0x0a, 0x1b,
	0x67, 0x65, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x18, 0x67, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x9c, 0x01, 0x0a, 0x30, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x61, 0x6c,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x2b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x73,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54,
	0x0a, 0x16, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x14,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x7b, 0x0a, 0x25, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x64, 0x0a, 0x1c, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x31, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x19, 0x6c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x19, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6d, 0x73,
	0x61, 0x70, 0x69, 0x5f, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x16, 0x61, 0x75,
	0x74, 0x68, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x71, 0x0a, 0x21, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x1d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x42,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xea, 0x02, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x4b, 0x0a, 0x13, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x17, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x15, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x61, 0x0a, 0x1b, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x31, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x18, 0x73, 0x61, 0x6c, 0x65,
	0x73, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x64, 0x22, 0xb7, 0x0e, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x0a, 0x63, 0x6c, 0x6f,
	0x6e, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x41, 0x0a,
	0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x12, 0x41, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x35, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x15, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x6f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x6d, 0x0a, 0x1f,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31,
	0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x1c, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x77, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x61, 0x70, 0x69,
	0x5f, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x38, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x44, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x99, 0x01, 0x0a, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x2a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x78, 0x0a, 0x24, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x1f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x15, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3e,
	0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x44,
	0x0a, 0x10, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x31, 0x2e, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x0f, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x12, 0x61, 0x0a, 0x1b, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6d, 0x73, 0x61,
	0x70, 0x69, 0x5f, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x18, 0x73,
	0x65, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x6d, 0x0a, 0x1f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x63, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x5f, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x1c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x5d, 0x0a, 0x19, 0x65, 0x72, 0x61, 0x73, 0x65, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x45, 0x72, 0x61, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x17, 0x65, 0x72,
	0x61, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x57, 0x0a, 0x17, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x31, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x6e,
	0x0a, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x1c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x22, 0xf2,
	0x05, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x38, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x6c,
	0x6f, 0x67, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x6c, 0x6f,
	0x67, 0x67, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64,
	0x4f, 0x66, 0x66, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x12, 0x68,
	0x0a, 0x1e, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6f, 0x72, 0x5f, 0x6a, 0x6f, 0x69,
	0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x1a, 0x72, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5b, 0x0a, 0x19, 0x6f, 0x62, 0x74, 0x61,
	0x69, 0x6e, 0x5f, 0x64, 0x65, 0x6d, 0x6f, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x6d,
	0x6f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x16, 0x6f,
	0x62, 0x74, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x6d, 0x6f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4a, 0x0a, 0x12, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x5f, 0x31, 0x2e, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x11,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x3b, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6d, 0x73, 0x61, 0x70,
	0x69, 0x5f, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x44,
	0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6d, 0x73, 0x61, 0x70,
	0x69, 0x5f, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x54, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x74, 0x72, 0x61, 0x64, 0x65, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x0c, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x5f, 0x31, 0x2e, 0x50, 0x69,
	0x6e, 0x67, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x6f, 0x6e, 0x67,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x5f,
	0x31, 0x2e, 0x50, 0x6f, 0x6e, 0x67, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x2a, 0x05, 0x08, 0x64,
	0x10, 0xc8, 0x01, 0x22, 0xcf, 0x09, 0x0a, 0x11, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x18,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x16, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x14, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x13, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x4d, 0x0a, 0x13, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x12, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52,
	0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x16, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x14, 0x75, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x99, 0x01, 0x0a, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x61, 0x6c,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x2a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x51, 0x0a, 0x15, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x13, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x78,
	0x0a, 0x24, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x1f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x61, 0x0a, 0x1b, 0x6c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x18, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x58, 0x0a, 0x18, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x5f, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x15,
	0x61, 0x75, 0x74, 0x68, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x6e, 0x0a, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x1c, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x9f, 0x03, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x25, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0a, 0x69, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0c,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x4d, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x57,
	0x0a, 0x13, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x11, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0xcb, 0x12, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x63, 0x6c,
	0x6f, 0x6e, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31,
	0x2e, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x54, 0x0a, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x54, 0x0a, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x54, 0x0a,
	0x16, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x14, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x48, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x10, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x48, 0x0a,
	0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x48, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x10, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x62, 0x0a, 0x1c, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74,
	0x6f, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x18, 0x6c, 0x69, 0x6e,
	0x6b, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x26, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x22, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5b, 0x0a, 0x19, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x77, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6d,
	0x73, 0x61, 0x70, 0x69, 0x5f, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x57, 0x65, 0x6c, 0x63, 0x6f,
	0x6d, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x16, 0x73,
	0x65, 0x6e, 0x64, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4b, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x11, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x57, 0x0a, 0x17, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x15, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0xac, 0x01, 0x0a, 0x36,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x30, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x8b, 0x01, 0x0a, 0x2b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x25, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x64, 0x0a, 0x1c, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x19, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x51,
	0x0a, 0x15, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x13, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x57, 0x0a, 0x17, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x44, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x15, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x74, 0x0a, 0x22, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x5f,
	0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x1e, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x80, 0x01, 0x0a, 0x26, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x5f, 0x31, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x22, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x70, 0x0a, 0x20, 0x65, 0x72, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x45, 0x72, 0x61, 0x73, 0x65, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x1d, 0x65, 0x72, 0x61, 0x73, 0x65, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x6a, 0x0a, 0x1e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x1b, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x81, 0x01, 0x0a, 0x27, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x22, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x42, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x4e, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x57, 0x65, 0x6c,
	0x63, 0x6f, 0x6d, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x57, 0x65, 0x6c,
	0x63, 0x6f, 0x6d, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x74, 0x0a, 0x18, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x20, 0x0a, 0x1e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x57, 0x0a, 0x1c, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x5d, 0x0a, 0x22, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22,
	0x40, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a,
	0x0d, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x12, 0x52, 0x0b, 0x70, 0x69, 0x6e, 0x67, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x64, 0x0a, 0x04, 0x50, 0x6f, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x22, 0x0a, 0x0d, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x12, 0x52, 0x0b, 0x70, 0x69, 0x6e, 0x67, 0x55, 0x74, 0x63, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x6f, 0x6e, 0x67, 0x5f, 0x75, 0x74, 0x63, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x12, 0x52, 0x0b, 0x70, 0x6f, 0x6e, 0x67,
	0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x41, 0x75, 0x74, 0x68, 0x50,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x51, 0x0a, 0x15, 0x41, 0x75, 0x74, 0x68, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x0c, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x6d, 0x73, 0x61, 0x70, 0x69, 0x5f, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x22, 0x63, 0x0a, 0x0b, 0x41, 0x75, 0x74, 0x68, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x2a, 0x49, 0x0a, 0x0f, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x16,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x4d, 0x41, 0x4a, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e,
	0x4f, 0x52, 0x10, 0x18, 0x42, 0x10, 0x5a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x31,
}

var (
	file_proto_cmsapi_1_proto_rawDescOnce sync.Once
	file_proto_cmsapi_1_proto_rawDescData = file_proto_cmsapi_1_proto_rawDesc
)

func file_proto_cmsapi_1_proto_rawDescGZIP() []byte {
	file_proto_cmsapi_1_proto_rawDescOnce.Do(func() {
		file_proto_cmsapi_1_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_cmsapi_1_proto_rawDescData)
	})
	return file_proto_cmsapi_1_proto_rawDescData
}

var file_proto_cmsapi_1_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_cmsapi_1_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_proto_cmsapi_1_proto_goTypes = []interface{}{
	(ProtocolVersion)(0),                                     // 0: cmsapi_1.ProtocolVersion
	(*ClientMessage)(nil),                                    // 1: cmsapi_1.ClientMessage
	(*InformationRequest)(nil),                               // 2: cmsapi_1.InformationRequest
	(*SearchRequest)(nil),                                    // 3: cmsapi_1.SearchRequest
	(*OperationRequest)(nil),                                 // 4: cmsapi_1.OperationRequest
	(*ServerMessage)(nil),                                    // 5: cmsapi_1.ServerMessage
	(*InformationResult)(nil),                                // 6: cmsapi_1.InformationResult
	(*SearchResult)(nil),                                     // 7: cmsapi_1.SearchResult
	(*OperationResult)(nil),                                  // 8: cmsapi_1.OperationResult
	(*SendWelcomeEmail)(nil),                                 // 9: cmsapi_1.SendWelcomeEmail
	(*SendWelcomeEmailResult)(nil),                           // 10: cmsapi_1.SendWelcomeEmailResult
	(*SendCredentialResetEmail)(nil),                         // 11: cmsapi_1.SendCredentialResetEmail
	(*SendCredentialResetEmailResult)(nil),                   // 12: cmsapi_1.SendCredentialResetEmailResult
	(*GenerateServiceSecurityToken)(nil),                     // 13: cmsapi_1.GenerateServiceSecurityToken
	(*GenerateServiceSecurityTokenResult)(nil),               // 14: cmsapi_1.GenerateServiceSecurityTokenResult
	(*Ping)(nil),                                             // 15: cmsapi_1.Ping
	(*Pong)(nil),                                             // 16: cmsapi_1.Pong
	(*AuthPartnerListRequest)(nil),                           // 17: cmsapi_1.AuthPartnerListRequest
	(*AuthPartnerListResult)(nil),                            // 18: cmsapi_1.AuthPartnerListResult
	(*AuthPartner)(nil),                                      // 19: cmsapi_1.AuthPartner
	(*Logon)(nil),                                            // 20: common_1.Logon
	(*Logoff)(nil),                                           // 21: common_1.Logoff
	(*RestoreOrJoinSession)(nil),                             // 22: common_1.RestoreOrJoinSession
	(*ObtainDemoAccess)(nil),                                 // 23: common_1.ObtainDemoAccess
	(*TradeRoutingRequest)(nil),                              // 24: traderouting_1.TradeRoutingRequest
	(*UserInfoRequest)(nil),                                  // 25: common_1.UserInfoRequest
	(*UserEntitlementServiceRequest)(nil),                    // 26: common_1.UserEntitlementServiceRequest
	(*EntitlementCategoryListRequest)(nil),                   // 27: common_1.EntitlementCategoryListRequest
	(*EntitlementServiceRequest)(nil),                        // 28: common_1.EntitlementServiceRequest
	(*CustomerRequest)(nil),                                  // 29: common_1.CustomerRequest
	(*EntitlementServiceListRequest)(nil),                    // 30: common_1.EntitlementServiceListRequest
	(*GetUniqueUsernameRequest)(nil),                         // 31: common_1.GetUniqueUsernameRequest
	(*CustomerSalesSeriesAuthorizationListRequest)(nil),      // 32: common_1.CustomerSalesSeriesAuthorizationListRequest
	(*LoginSettingsRequest)(nil),                             // 33: common_1.LoginSettingsRequest
	(*LoginExchangeMemberIdListRequest)(nil),                 // 34: common_1.LoginExchangeMemberIdListRequest
	(*LookupPropertyListRequest)(nil),                        // 35: common_1.LookupPropertyListRequest
	(*LoginBillingCustomDataRequest)(nil),                    // 36: common_1.LoginBillingCustomDataRequest
	(*UserSearchRequest)(nil),                                // 37: common_1.UserSearchRequest
	(*CustomerSearchRequest)(nil),                            // 38: common_1.CustomerSearchRequest
	(*SalesSeriesSearchRequest)(nil),                         // 39: common_1.SalesSeriesSearchRequest
	(*CloneUser)(nil),                                        // 40: common_1.CloneUser
	(*CreateCustomer)(nil),                                   // 41: common_1.CreateCustomer
	(*UpdateCustomer)(nil),                                   // 42: common_1.UpdateCustomer
	(*RemoveCustomer)(nil),                                   // 43: common_1.RemoveCustomer
	(*CreateUser)(nil),                                       // 44: common_1.CreateUser
	(*UpdateUser)(nil),                                       // 45: common_1.UpdateUser
	(*RemoveUser)(nil),                                       // 46: common_1.RemoveUser
	(*LinkUserToCustomer)(nil),                               // 47: common_1.LinkUserToCustomer
	(*ModifyUserEntitlementService)(nil),                     // 48: common_1.ModifyUserEntitlementService
	(*RestoreUser)(nil),                                      // 49: common_1.RestoreUser
	(*RestoreCustomer)(nil),                                  // 50: common_1.RestoreCustomer
	(*UpdateCustomerSalesSeriesAuthorizationList)(nil),       // 51: common_1.UpdateCustomerSalesSeriesAuthorizationList
	(*UpdateLoginExchangeMemberIdList)(nil),                  // 52: common_1.UpdateLoginExchangeMemberIdList
	(*UpdateLoginSettings)(nil),                              // 53: common_1.UpdateLoginSettings
	(*ActivateLogin)(nil),                                    // 54: common_1.ActivateLogin
	(*DeactivateLogin)(nil),                                  // 55: common_1.DeactivateLogin
	(*EraseCurrentCredentials)(nil),                          // 56: common_1.EraseCurrentCredentials
	(*TerminateLoginSession)(nil),                            // 57: common_1.TerminateLoginSession
	(*UpdateLoginBillingCustomData)(nil),                     // 58: common_1.UpdateLoginBillingCustomData
	(*LogonResult)(nil),                                      // 59: common_1.LogonResult
	(*LoggedOff)(nil),                                        // 60: common_1.LoggedOff
	(*RestoreOrJoinSessionResult)(nil),                       // 61: common_1.RestoreOrJoinSessionResult
	(*ObtainDemoAccessResult)(nil),                           // 62: common_1.ObtainDemoAccessResult
	(*TradeRoutingResult)(nil),                               // 63: traderouting_1.TradeRoutingResult
	(*UserMessage)(nil),                                      // 64: common_1.UserMessage
	(*Text)(nil),                                             // 65: common_1.Text
	(*User)(nil),                                             // 66: common_1.User
	(*UserEntitlementService)(nil),                           // 67: common_1.UserEntitlementService
	(*EntitlementCategory)(nil),                              // 68: common_1.EntitlementCategory
	(*EntitlementService)(nil),                               // 69: common_1.EntitlementService
	(*Customer)(nil),                                         // 70: common_1.Customer
	(*UniqueUsernameResult)(nil),                             // 71: common_1.UniqueUsernameResult
	(*CustomerSalesSeriesAuthorizationListResult)(nil),       // 72: common_1.CustomerSalesSeriesAuthorizationListResult
	(*LoginSettingsResult)(nil),                              // 73: common_1.LoginSettingsResult
	(*LoginExchangeMemberIdListResult)(nil),                  // 74: common_1.LoginExchangeMemberIdListResult
	(*LookupPropertyListResult)(nil),                         // 75: common_1.LookupPropertyListResult
	(*LoginBillingCustomDataResult)(nil),                     // 76: common_1.LoginBillingCustomDataResult
	(*UserSearchResultRecord)(nil),                           // 77: common_1.UserSearchResultRecord
	(*CustomerSearchResultRecord)(nil),                       // 78: common_1.CustomerSearchResultRecord
	(*SalesSeriesSearchResultRecord)(nil),                    // 79: common_1.SalesSeriesSearchResultRecord
	(*CloneUserResult)(nil),                                  // 80: common_1.CloneUserResult
	(*CreateCustomerResult)(nil),                             // 81: common_1.CreateCustomerResult
	(*UpdateCustomerResult)(nil),                             // 82: common_1.UpdateCustomerResult
	(*RemoveCustomerResult)(nil),                             // 83: common_1.RemoveCustomerResult
	(*CreateUserResult)(nil),                                 // 84: common_1.CreateUserResult
	(*UpdateUserResult)(nil),                                 // 85: common_1.UpdateUserResult
	(*RemoveUserResult)(nil),                                 // 86: common_1.RemoveUserResult
	(*LinkUserToCustomerResult)(nil),                         // 87: common_1.LinkUserToCustomerResult
	(*ModifyUserEntitlementServiceResult)(nil),               // 88: common_1.ModifyUserEntitlementServiceResult
	(*RestoreUserResult)(nil),                                // 89: common_1.RestoreUserResult
	(*RestoreCustomerResult)(nil),                            // 90: common_1.RestoreCustomerResult
	(*UpdateCustomerSalesSeriesAuthorizationListResult)(nil), // 91: common_1.UpdateCustomerSalesSeriesAuthorizationListResult
	(*UpdateLoginExchangeMemberIdListResult)(nil),            // 92: common_1.UpdateLoginExchangeMemberIdListResult
	(*UpdateLoginSettingsResult)(nil),                        // 93: common_1.UpdateLoginSettingsResult
	(*ActivateLoginResult)(nil),                              // 94: common_1.ActivateLoginResult
	(*DeactivateLoginResult)(nil),                            // 95: common_1.DeactivateLoginResult
	(*EraseCurrentCredentialsResult)(nil),                    // 96: common_1.EraseCurrentCredentialsResult
	(*TerminateLoginSessionResult)(nil),                      // 97: common_1.TerminateLoginSessionResult
	(*UpdateLoginBillingCustomDataResult)(nil),               // 98: common_1.UpdateLoginBillingCustomDataResult
}
var file_proto_cmsapi_1_proto_depIdxs = []int32{
	20,  // 0: cmsapi_1.ClientMessage.logon:type_name -> common_1.Logon
	21,  // 1: cmsapi_1.ClientMessage.logoff:type_name -> common_1.Logoff
	22,  // 2: cmsapi_1.ClientMessage.restore_or_join_session:type_name -> common_1.RestoreOrJoinSession
	23,  // 3: cmsapi_1.ClientMessage.obtain_demo_access:type_name -> common_1.ObtainDemoAccess
	2,   // 4: cmsapi_1.ClientMessage.information_request:type_name -> cmsapi_1.InformationRequest
	3,   // 5: cmsapi_1.ClientMessage.search_request:type_name -> cmsapi_1.SearchRequest
	4,   // 6: cmsapi_1.ClientMessage.operation_request:type_name -> cmsapi_1.OperationRequest
	24,  // 7: cmsapi_1.ClientMessage.trade_routing_request:type_name -> traderouting_1.TradeRoutingRequest
	15,  // 8: cmsapi_1.ClientMessage.ping:type_name -> cmsapi_1.Ping
	16,  // 9: cmsapi_1.ClientMessage.pong:type_name -> cmsapi_1.Pong
	25,  // 10: cmsapi_1.InformationRequest.user_info_request:type_name -> common_1.UserInfoRequest
	26,  // 11: cmsapi_1.InformationRequest.user_entitlement_service_request:type_name -> common_1.UserEntitlementServiceRequest
	27,  // 12: cmsapi_1.InformationRequest.entitlement_category_list_request:type_name -> common_1.EntitlementCategoryListRequest
	28,  // 13: cmsapi_1.InformationRequest.entitlement_service_request:type_name -> common_1.EntitlementServiceRequest
	29,  // 14: cmsapi_1.InformationRequest.customer_request:type_name -> common_1.CustomerRequest
	30,  // 15: cmsapi_1.InformationRequest.entitlement_service_list_request:type_name -> common_1.EntitlementServiceListRequest
	31,  // 16: cmsapi_1.InformationRequest.get_unique_username_request:type_name -> common_1.GetUniqueUsernameRequest
	32,  // 17: cmsapi_1.InformationRequest.customer_sales_series_authorization_list_request:type_name -> common_1.CustomerSalesSeriesAuthorizationListRequest
	33,  // 18: cmsapi_1.InformationRequest.login_settings_request:type_name -> common_1.LoginSettingsRequest
	34,  // 19: cmsapi_1.InformationRequest.login_exchange_member_id_list_request:type_name -> common_1.LoginExchangeMemberIdListRequest
	35,  // 20: cmsapi_1.InformationRequest.lookup_property_list_request:type_name -> common_1.LookupPropertyListRequest
	17,  // 21: cmsapi_1.InformationRequest.auth_partner_list_request:type_name -> cmsapi_1.AuthPartnerListRequest
	36,  // 22: cmsapi_1.InformationRequest.login_billing_custom_data_request:type_name -> common_1.LoginBillingCustomDataRequest
	37,  // 23: cmsapi_1.SearchRequest.user_search_request:type_name -> common_1.UserSearchRequest
	38,  // 24: cmsapi_1.SearchRequest.customer_search_request:type_name -> common_1.CustomerSearchRequest
	39,  // 25: cmsapi_1.SearchRequest.sales_series_search_request:type_name -> common_1.SalesSeriesSearchRequest
	40,  // 26: cmsapi_1.OperationRequest.clone_user:type_name -> common_1.CloneUser
	41,  // 27: cmsapi_1.OperationRequest.create_customer:type_name -> common_1.CreateCustomer
	42,  // 28: cmsapi_1.OperationRequest.update_customer:type_name -> common_1.UpdateCustomer
	43,  // 29: cmsapi_1.OperationRequest.remove_customer:type_name -> common_1.RemoveCustomer
	44,  // 30: cmsapi_1.OperationRequest.create_user:type_name -> common_1.CreateUser
	45,  // 31: cmsapi_1.OperationRequest.update_user:type_name -> common_1.UpdateUser
	46,  // 32: cmsapi_1.OperationRequest.remove_user:type_name -> common_1.RemoveUser
	47,  // 33: cmsapi_1.OperationRequest.link_user_to_customer:type_name -> common_1.LinkUserToCustomer
	48,  // 34: cmsapi_1.OperationRequest.modify_user_entitlement_service:type_name -> common_1.ModifyUserEntitlementService
	9,   // 35: cmsapi_1.OperationRequest.send_welcome_email:type_name -> cmsapi_1.SendWelcomeEmail
	49,  // 36: cmsapi_1.OperationRequest.restore_user:type_name -> common_1.RestoreUser
	50,  // 37: cmsapi_1.OperationRequest.restore_customer:type_name -> common_1.RestoreCustomer
	51,  // 38: cmsapi_1.OperationRequest.update_customer_sales_series_authorization_list:type_name -> common_1.UpdateCustomerSalesSeriesAuthorizationList
	52,  // 39: cmsapi_1.OperationRequest.update_login_exchange_member_id_list:type_name -> common_1.UpdateLoginExchangeMemberIdList
	53,  // 40: cmsapi_1.OperationRequest.update_login_settings:type_name -> common_1.UpdateLoginSettings
	54,  // 41: cmsapi_1.OperationRequest.activate_login:type_name -> common_1.ActivateLogin
	55,  // 42: cmsapi_1.OperationRequest.deactivate_login:type_name -> common_1.DeactivateLogin
	11,  // 43: cmsapi_1.OperationRequest.send_credential_reset_email:type_name -> cmsapi_1.SendCredentialResetEmail
	13,  // 44: cmsapi_1.OperationRequest.generate_service_security_token:type_name -> cmsapi_1.GenerateServiceSecurityToken
	56,  // 45: cmsapi_1.OperationRequest.erase_current_credentials:type_name -> common_1.EraseCurrentCredentials
	57,  // 46: cmsapi_1.OperationRequest.terminate_login_session:type_name -> common_1.TerminateLoginSession
	58,  // 47: cmsapi_1.OperationRequest.update_login_billing_custom_data:type_name -> common_1.UpdateLoginBillingCustomData
	59,  // 48: cmsapi_1.ServerMessage.logon_result:type_name -> common_1.LogonResult
	60,  // 49: cmsapi_1.ServerMessage.logged_off:type_name -> common_1.LoggedOff
	61,  // 50: cmsapi_1.ServerMessage.restore_or_join_session_result:type_name -> common_1.RestoreOrJoinSessionResult
	62,  // 51: cmsapi_1.ServerMessage.obtain_demo_access_result:type_name -> common_1.ObtainDemoAccessResult
	6,   // 52: cmsapi_1.ServerMessage.information_result:type_name -> cmsapi_1.InformationResult
	7,   // 53: cmsapi_1.ServerMessage.search_result:type_name -> cmsapi_1.SearchResult
	8,   // 54: cmsapi_1.ServerMessage.operation_result:type_name -> cmsapi_1.OperationResult
	63,  // 55: cmsapi_1.ServerMessage.trade_routing_result:type_name -> traderouting_1.TradeRoutingResult
	64,  // 56: cmsapi_1.ServerMessage.user_message:type_name -> common_1.UserMessage
	15,  // 57: cmsapi_1.ServerMessage.ping:type_name -> cmsapi_1.Ping
	16,  // 58: cmsapi_1.ServerMessage.pong:type_name -> cmsapi_1.Pong
	65,  // 59: cmsapi_1.InformationResult.error_message:type_name -> common_1.Text
	66,  // 60: cmsapi_1.InformationResult.user:type_name -> common_1.User
	67,  // 61: cmsapi_1.InformationResult.user_entitlement_service:type_name -> common_1.UserEntitlementService
	68,  // 62: cmsapi_1.InformationResult.entitlement_category:type_name -> common_1.EntitlementCategory
	69,  // 63: cmsapi_1.InformationResult.entitlement_service:type_name -> common_1.EntitlementService
	70,  // 64: cmsapi_1.InformationResult.customer:type_name -> common_1.Customer
	71,  // 65: cmsapi_1.InformationResult.unique_username_result:type_name -> common_1.UniqueUsernameResult
	72,  // 66: cmsapi_1.InformationResult.customer_sales_series_authorization_list_result:type_name -> common_1.CustomerSalesSeriesAuthorizationListResult
	73,  // 67: cmsapi_1.InformationResult.login_settings_result:type_name -> common_1.LoginSettingsResult
	74,  // 68: cmsapi_1.InformationResult.login_exchange_member_id_list_result:type_name -> common_1.LoginExchangeMemberIdListResult
	75,  // 69: cmsapi_1.InformationResult.lookup_property_list_result:type_name -> common_1.LookupPropertyListResult
	18,  // 70: cmsapi_1.InformationResult.auth_partner_list_result:type_name -> cmsapi_1.AuthPartnerListResult
	76,  // 71: cmsapi_1.InformationResult.login_billing_custom_data_result:type_name -> common_1.LoginBillingCustomDataResult
	65,  // 72: cmsapi_1.SearchResult.error_message:type_name -> common_1.Text
	77,  // 73: cmsapi_1.SearchResult.user_record:type_name -> common_1.UserSearchResultRecord
	78,  // 74: cmsapi_1.SearchResult.customer_record:type_name -> common_1.CustomerSearchResultRecord
	79,  // 75: cmsapi_1.SearchResult.sales_series_record:type_name -> common_1.SalesSeriesSearchResultRecord
	65,  // 76: cmsapi_1.OperationResult.error_message:type_name -> common_1.Text
	80,  // 77: cmsapi_1.OperationResult.clone_user_result:type_name -> common_1.CloneUserResult
	81,  // 78: cmsapi_1.OperationResult.create_customer_result:type_name -> common_1.CreateCustomerResult
	82,  // 79: cmsapi_1.OperationResult.update_customer_result:type_name -> common_1.UpdateCustomerResult
	83,  // 80: cmsapi_1.OperationResult.remove_customer_result:type_name -> common_1.RemoveCustomerResult
	84,  // 81: cmsapi_1.OperationResult.create_user_result:type_name -> common_1.CreateUserResult
	85,  // 82: cmsapi_1.OperationResult.update_user_result:type_name -> common_1.UpdateUserResult
	86,  // 83: cmsapi_1.OperationResult.remove_user_result:type_name -> common_1.RemoveUserResult
	87,  // 84: cmsapi_1.OperationResult.link_user_to_customer_result:type_name -> common_1.LinkUserToCustomerResult
	88,  // 85: cmsapi_1.OperationResult.modify_user_entitlement_service_result:type_name -> common_1.ModifyUserEntitlementServiceResult
	10,  // 86: cmsapi_1.OperationResult.send_welcome_email_result:type_name -> cmsapi_1.SendWelcomeEmailResult
	89,  // 87: cmsapi_1.OperationResult.restore_user_result:type_name -> common_1.RestoreUserResult
	90,  // 88: cmsapi_1.OperationResult.restore_customer_result:type_name -> common_1.RestoreCustomerResult
	91,  // 89: cmsapi_1.OperationResult.update_customer_sales_series_authorization_list_result:type_name -> common_1.UpdateCustomerSalesSeriesAuthorizationListResult
	92,  // 90: cmsapi_1.OperationResult.update_login_exchange_member_id_list_result:type_name -> common_1.UpdateLoginExchangeMemberIdListResult
	93,  // 91: cmsapi_1.OperationResult.update_login_settings_result:type_name -> common_1.UpdateLoginSettingsResult
	94,  // 92: cmsapi_1.OperationResult.activate_login_result:type_name -> common_1.ActivateLoginResult
	95,  // 93: cmsapi_1.OperationResult.deactivate_login_result:type_name -> common_1.DeactivateLoginResult
	12,  // 94: cmsapi_1.OperationResult.send_credential_reset_email_result:type_name -> cmsapi_1.SendCredentialResetEmailResult
	14,  // 95: cmsapi_1.OperationResult.generate_service_security_token_result:type_name -> cmsapi_1.GenerateServiceSecurityTokenResult
	96,  // 96: cmsapi_1.OperationResult.erase_current_credentials_result:type_name -> common_1.EraseCurrentCredentialsResult
	97,  // 97: cmsapi_1.OperationResult.terminate_login_session_result:type_name -> common_1.TerminateLoginSessionResult
	98,  // 98: cmsapi_1.OperationResult.update_login_billing_custom_data_result:type_name -> common_1.UpdateLoginBillingCustomDataResult
	19,  // 99: cmsapi_1.AuthPartnerListResult.auth_partner:type_name -> cmsapi_1.AuthPartner
	100, // [100:100] is the sub-list for method output_type
	100, // [100:100] is the sub-list for method input_type
	100, // [100:100] is the sub-list for extension type_name
	100, // [100:100] is the sub-list for extension extendee
	0,   // [0:100] is the sub-list for field type_name
}

func init() { file_proto_cmsapi_1_proto_init() }
func file_proto_cmsapi_1_proto_init() {
	if File_proto_cmsapi_1_proto != nil {
		return
	}
	file_proto_common_1_proto_init()
	file_proto_traderouting_1_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_cmsapi_1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_proto_cmsapi_1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InformationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmsapi_1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmsapi_1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmsapi_1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_proto_cmsapi_1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InformationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmsapi_1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmsapi_1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmsapi_1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendWelcomeEmail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmsapi_1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendWelcomeEmailResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmsapi_1_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendCredentialResetEmail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmsapi_1_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendCredentialResetEmailResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmsapi_1_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateServiceSecurityToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmsapi_1_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateServiceSecurityTokenResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmsapi_1_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmsapi_1_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pong); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmsapi_1_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthPartnerListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmsapi_1_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthPartnerListResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cmsapi_1_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthPartner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_cmsapi_1_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_cmsapi_1_proto_goTypes,
		DependencyIndexes: file_proto_cmsapi_1_proto_depIdxs,
		EnumInfos:         file_proto_cmsapi_1_proto_enumTypes,
		MessageInfos:      file_proto_cmsapi_1_proto_msgTypes,
	}.Build()
	File_proto_cmsapi_1_proto = out.File
	file_proto_cmsapi_1_proto_rawDesc = nil
	file_proto_cmsapi_1_proto_goTypes = nil
	file_proto_cmsapi_1_proto_depIdxs = nil
}
